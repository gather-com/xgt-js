!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("xgt",[],t):"object"==typeof exports?exports.xgt=t():e.xgt=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=80)}([function(e,t,r){var n=r(3),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},function(e,t,r){(function(e){!function(e,t){"use strict";function n(e,t){if(!e)throw new Error(t||"Assertion failed")}function i(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}function o(e,t,r){if(o.isBN(e))return e;this.negative=0,this.words=null,this.length=0,this.red=null,null!==e&&("le"!==t&&"be"!==t||(r=t,t=10),this._init(e||0,t||10,r||"be"))}var a;"object"==typeof e?e.exports=o:t.BN=o,o.BN=o,o.wordSize=26;try{a=r(145).Buffer}catch(e){}function f(e,t,r){for(var n=0,i=Math.min(e.length,r),o=t;o<i;o++){var a=e.charCodeAt(o)-48;n<<=4,n|=a>=49&&a<=54?a-49+10:a>=17&&a<=22?a-17+10:15&a}return n}function s(e,t,r,n){for(var i=0,o=Math.min(e.length,r),a=t;a<o;a++){var f=e.charCodeAt(a)-48;i*=n,i+=f>=49?f-49+10:f>=17?f-17+10:f}return i}o.isBN=function(e){return e instanceof o||null!==e&&"object"==typeof e&&e.constructor.wordSize===o.wordSize&&Array.isArray(e.words)},o.max=function(e,t){return e.cmp(t)>0?e:t},o.min=function(e,t){return e.cmp(t)<0?e:t},o.prototype._init=function(e,t,r){if("number"==typeof e)return this._initNumber(e,t,r);if("object"==typeof e)return this._initArray(e,t,r);"hex"===t&&(t=16),n(t===(0|t)&&t>=2&&t<=36);var i=0;"-"===(e=e.toString().replace(/\s+/g,""))[0]&&i++,16===t?this._parseHex(e,i):this._parseBase(e,t,i),"-"===e[0]&&(this.negative=1),this.strip(),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initNumber=function(e,t,r){e<0&&(this.negative=1,e=-e),e<67108864?(this.words=[67108863&e],this.length=1):e<4503599627370496?(this.words=[67108863&e,e/67108864&67108863],this.length=2):(n(e<9007199254740992),this.words=[67108863&e,e/67108864&67108863,1],this.length=3),"le"===r&&this._initArray(this.toArray(),t,r)},o.prototype._initArray=function(e,t,r){if(n("number"==typeof e.length),e.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(e.length/3),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var o,a,f=0;if("be"===r)for(i=e.length-1,o=0;i>=0;i-=3)a=e[i]|e[i-1]<<8|e[i-2]<<16,this.words[o]|=a<<f&67108863,this.words[o+1]=a>>>26-f&67108863,(f+=24)>=26&&(f-=26,o++);else if("le"===r)for(i=0,o=0;i<e.length;i+=3)a=e[i]|e[i+1]<<8|e[i+2]<<16,this.words[o]|=a<<f&67108863,this.words[o+1]=a>>>26-f&67108863,(f+=24)>=26&&(f-=26,o++);return this.strip()},o.prototype._parseHex=function(e,t){this.length=Math.ceil((e.length-t)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var n,i,o=0;for(r=e.length-6,n=0;r>=t;r-=6)i=f(e,r,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303,(o+=24)>=26&&(o-=26,n++);r+6!==t&&(i=f(e,t,r+6),this.words[n]|=i<<o&67108863,this.words[n+1]|=i>>>26-o&4194303),this.strip()},o.prototype._parseBase=function(e,t,r){this.words=[0],this.length=1;for(var n=0,i=1;i<=67108863;i*=t)n++;n--,i=i/t|0;for(var o=e.length-r,a=o%n,f=Math.min(o,o-a)+r,c=0,u=r;u<f;u+=n)c=s(e,u,u+n,t),this.imuln(i),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c);if(0!==a){var h=1;for(c=s(e,u,e.length,t),u=0;u<a;u++)h*=t;this.imuln(h),this.words[0]+c<67108864?this.words[0]+=c:this._iaddn(c)}},o.prototype.copy=function(e){e.words=new Array(this.length);for(var t=0;t<this.length;t++)e.words[t]=this.words[t];e.length=this.length,e.negative=this.negative,e.red=this.red},o.prototype.clone=function(){var e=new o(null);return this.copy(e),e},o.prototype._expand=function(e){for(;this.length<e;)this.words[this.length++]=0;return this},o.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},o.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},o.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var c=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],u=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],h=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(e,t,r){r.negative=t.negative^e.negative;var n=e.length+t.length|0;r.length=n,n=n-1|0;var i=0|e.words[0],o=0|t.words[0],a=i*o,f=67108863&a,s=a/67108864|0;r.words[0]=f;for(var c=1;c<n;c++){for(var u=s>>>26,h=67108863&s,d=Math.min(c,t.length-1),l=Math.max(0,c-e.length+1);l<=d;l++){var p=c-l|0;u+=(a=(i=0|e.words[p])*(o=0|t.words[l])+h)/67108864|0,h=67108863&a}r.words[c]=0|h,s=0|u}return 0!==s?r.words[c]=0|s:r.length--,r.strip()}o.prototype.toString=function(e,t){var r;if(t=0|t||1,16===(e=e||10)||"hex"===e){r="";for(var i=0,o=0,a=0;a<this.length;a++){var f=this.words[a],s=(16777215&(f<<i|o)).toString(16);r=0!==(o=f>>>24-i&16777215)||a!==this.length-1?c[6-s.length]+s+r:s+r,(i+=2)>=26&&(i-=26,a--)}for(0!==o&&(r=o.toString(16)+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}if(e===(0|e)&&e>=2&&e<=36){var d=u[e],l=h[e];r="";var p=this.clone();for(p.negative=0;!p.isZero();){var b=p.modn(l).toString(e);r=(p=p.idivn(l)).isZero()?b+r:c[d-b.length]+b+r}for(this.isZero()&&(r="0"+r);r.length%t!=0;)r="0"+r;return 0!==this.negative&&(r="-"+r),r}n(!1,"Base should be between 2 and 36")},o.prototype.toNumber=function(){var e=this.words[0];return 2===this.length?e+=67108864*this.words[1]:3===this.length&&1===this.words[2]?e+=4503599627370496+67108864*this.words[1]:this.length>2&&n(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-e:e},o.prototype.toJSON=function(){return this.toString(16)},o.prototype.toBuffer=function(e,t){return n(void 0!==a),this.toArrayLike(a,e,t)},o.prototype.toArray=function(e,t){return this.toArrayLike(Array,e,t)},o.prototype.toArrayLike=function(e,t,r){var i=this.byteLength(),o=r||Math.max(1,i);n(i<=o,"byte array longer than desired length"),n(o>0,"Requested array length <= 0"),this.strip();var a,f,s="le"===t,c=new e(o),u=this.clone();if(s){for(f=0;!u.isZero();f++)a=u.andln(255),u.iushrn(8),c[f]=a;for(;f<o;f++)c[f]=0}else{for(f=0;f<o-i;f++)c[f]=0;for(f=0;!u.isZero();f++)a=u.andln(255),u.iushrn(8),c[o-f-1]=a}return c},Math.clz32?o.prototype._countBits=function(e){return 32-Math.clz32(e)}:o.prototype._countBits=function(e){var t=e,r=0;return t>=4096&&(r+=13,t>>>=13),t>=64&&(r+=7,t>>>=7),t>=8&&(r+=4,t>>>=4),t>=2&&(r+=2,t>>>=2),r+t},o.prototype._zeroBits=function(e){if(0===e)return 26;var t=e,r=0;return 0==(8191&t)&&(r+=13,t>>>=13),0==(127&t)&&(r+=7,t>>>=7),0==(15&t)&&(r+=4,t>>>=4),0==(3&t)&&(r+=2,t>>>=2),0==(1&t)&&r++,r},o.prototype.bitLength=function(){var e=this.words[this.length-1],t=this._countBits(e);return 26*(this.length-1)+t},o.prototype.zeroBits=function(){if(this.isZero())return 0;for(var e=0,t=0;t<this.length;t++){var r=this._zeroBits(this.words[t]);if(e+=r,26!==r)break}return e},o.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},o.prototype.toTwos=function(e){return 0!==this.negative?this.abs().inotn(e).iaddn(1):this.clone()},o.prototype.fromTwos=function(e){return this.testn(e-1)?this.notn(e).iaddn(1).ineg():this.clone()},o.prototype.isNeg=function(){return 0!==this.negative},o.prototype.neg=function(){return this.clone().ineg()},o.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},o.prototype.iuor=function(e){for(;this.length<e.length;)this.words[this.length++]=0;for(var t=0;t<e.length;t++)this.words[t]=this.words[t]|e.words[t];return this.strip()},o.prototype.ior=function(e){return n(0==(this.negative|e.negative)),this.iuor(e)},o.prototype.or=function(e){return this.length>e.length?this.clone().ior(e):e.clone().ior(this)},o.prototype.uor=function(e){return this.length>e.length?this.clone().iuor(e):e.clone().iuor(this)},o.prototype.iuand=function(e){var t;t=this.length>e.length?e:this;for(var r=0;r<t.length;r++)this.words[r]=this.words[r]&e.words[r];return this.length=t.length,this.strip()},o.prototype.iand=function(e){return n(0==(this.negative|e.negative)),this.iuand(e)},o.prototype.and=function(e){return this.length>e.length?this.clone().iand(e):e.clone().iand(this)},o.prototype.uand=function(e){return this.length>e.length?this.clone().iuand(e):e.clone().iuand(this)},o.prototype.iuxor=function(e){var t,r;this.length>e.length?(t=this,r=e):(t=e,r=this);for(var n=0;n<r.length;n++)this.words[n]=t.words[n]^r.words[n];if(this!==t)for(;n<t.length;n++)this.words[n]=t.words[n];return this.length=t.length,this.strip()},o.prototype.ixor=function(e){return n(0==(this.negative|e.negative)),this.iuxor(e)},o.prototype.xor=function(e){return this.length>e.length?this.clone().ixor(e):e.clone().ixor(this)},o.prototype.uxor=function(e){return this.length>e.length?this.clone().iuxor(e):e.clone().iuxor(this)},o.prototype.inotn=function(e){n("number"==typeof e&&e>=0);var t=0|Math.ceil(e/26),r=e%26;this._expand(t),r>0&&t--;for(var i=0;i<t;i++)this.words[i]=67108863&~this.words[i];return r>0&&(this.words[i]=~this.words[i]&67108863>>26-r),this.strip()},o.prototype.notn=function(e){return this.clone().inotn(e)},o.prototype.setn=function(e,t){n("number"==typeof e&&e>=0);var r=e/26|0,i=e%26;return this._expand(r+1),this.words[r]=t?this.words[r]|1<<i:this.words[r]&~(1<<i),this.strip()},o.prototype.iadd=function(e){var t,r,n;if(0!==this.negative&&0===e.negative)return this.negative=0,t=this.isub(e),this.negative^=1,this._normSign();if(0===this.negative&&0!==e.negative)return e.negative=0,t=this.isub(e),e.negative=1,t._normSign();this.length>e.length?(r=this,n=e):(r=e,n=this);for(var i=0,o=0;o<n.length;o++)t=(0|r.words[o])+(0|n.words[o])+i,this.words[o]=67108863&t,i=t>>>26;for(;0!==i&&o<r.length;o++)t=(0|r.words[o])+i,this.words[o]=67108863&t,i=t>>>26;if(this.length=r.length,0!==i)this.words[this.length]=i,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},o.prototype.add=function(e){var t;return 0!==e.negative&&0===this.negative?(e.negative=0,t=this.sub(e),e.negative^=1,t):0===e.negative&&0!==this.negative?(this.negative=0,t=e.sub(this),this.negative=1,t):this.length>e.length?this.clone().iadd(e):e.clone().iadd(this)},o.prototype.isub=function(e){if(0!==e.negative){e.negative=0;var t=this.iadd(e);return e.negative=1,t._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(e),this.negative=1,this._normSign();var r,n,i=this.cmp(e);if(0===i)return this.negative=0,this.length=1,this.words[0]=0,this;i>0?(r=this,n=e):(r=e,n=this);for(var o=0,a=0;a<n.length;a++)o=(t=(0|r.words[a])-(0|n.words[a])+o)>>26,this.words[a]=67108863&t;for(;0!==o&&a<r.length;a++)o=(t=(0|r.words[a])+o)>>26,this.words[a]=67108863&t;if(0===o&&a<r.length&&r!==this)for(;a<r.length;a++)this.words[a]=r.words[a];return this.length=Math.max(this.length,a),r!==this&&(this.negative=1),this.strip()},o.prototype.sub=function(e){return this.clone().isub(e)};var l=function(e,t,r){var n,i,o,a=e.words,f=t.words,s=r.words,c=0,u=0|a[0],h=8191&u,d=u>>>13,l=0|a[1],p=8191&l,b=l>>>13,y=0|a[2],v=8191&y,g=y>>>13,m=0|a[3],_=8191&m,w=m>>>13,E=0|a[4],S=8191&E,A=E>>>13,I=0|a[5],M=8191&I,k=I>>>13,x=0|a[6],B=8191&x,T=x>>>13,R=0|a[7],L=8191&R,P=R>>>13,C=0|a[8],N=8191&C,D=C>>>13,j=0|a[9],U=8191&j,O=j>>>13,q=0|f[0],K=8191&q,z=q>>>13,V=0|f[1],Y=8191&V,F=V>>>13,H=0|f[2],G=8191&H,W=H>>>13,X=0|f[3],Z=8191&X,J=X>>>13,$=0|f[4],Q=8191&$,ee=$>>>13,te=0|f[5],re=8191&te,ne=te>>>13,ie=0|f[6],oe=8191&ie,ae=ie>>>13,fe=0|f[7],se=8191&fe,ce=fe>>>13,ue=0|f[8],he=8191&ue,de=ue>>>13,le=0|f[9],pe=8191&le,be=le>>>13;r.negative=e.negative^t.negative,r.length=19;var ye=(c+(n=Math.imul(h,K))|0)+((8191&(i=(i=Math.imul(h,z))+Math.imul(d,K)|0))<<13)|0;c=((o=Math.imul(d,z))+(i>>>13)|0)+(ye>>>26)|0,ye&=67108863,n=Math.imul(p,K),i=(i=Math.imul(p,z))+Math.imul(b,K)|0,o=Math.imul(b,z);var ve=(c+(n=n+Math.imul(h,Y)|0)|0)+((8191&(i=(i=i+Math.imul(h,F)|0)+Math.imul(d,Y)|0))<<13)|0;c=((o=o+Math.imul(d,F)|0)+(i>>>13)|0)+(ve>>>26)|0,ve&=67108863,n=Math.imul(v,K),i=(i=Math.imul(v,z))+Math.imul(g,K)|0,o=Math.imul(g,z),n=n+Math.imul(p,Y)|0,i=(i=i+Math.imul(p,F)|0)+Math.imul(b,Y)|0,o=o+Math.imul(b,F)|0;var ge=(c+(n=n+Math.imul(h,G)|0)|0)+((8191&(i=(i=i+Math.imul(h,W)|0)+Math.imul(d,G)|0))<<13)|0;c=((o=o+Math.imul(d,W)|0)+(i>>>13)|0)+(ge>>>26)|0,ge&=67108863,n=Math.imul(_,K),i=(i=Math.imul(_,z))+Math.imul(w,K)|0,o=Math.imul(w,z),n=n+Math.imul(v,Y)|0,i=(i=i+Math.imul(v,F)|0)+Math.imul(g,Y)|0,o=o+Math.imul(g,F)|0,n=n+Math.imul(p,G)|0,i=(i=i+Math.imul(p,W)|0)+Math.imul(b,G)|0,o=o+Math.imul(b,W)|0;var me=(c+(n=n+Math.imul(h,Z)|0)|0)+((8191&(i=(i=i+Math.imul(h,J)|0)+Math.imul(d,Z)|0))<<13)|0;c=((o=o+Math.imul(d,J)|0)+(i>>>13)|0)+(me>>>26)|0,me&=67108863,n=Math.imul(S,K),i=(i=Math.imul(S,z))+Math.imul(A,K)|0,o=Math.imul(A,z),n=n+Math.imul(_,Y)|0,i=(i=i+Math.imul(_,F)|0)+Math.imul(w,Y)|0,o=o+Math.imul(w,F)|0,n=n+Math.imul(v,G)|0,i=(i=i+Math.imul(v,W)|0)+Math.imul(g,G)|0,o=o+Math.imul(g,W)|0,n=n+Math.imul(p,Z)|0,i=(i=i+Math.imul(p,J)|0)+Math.imul(b,Z)|0,o=o+Math.imul(b,J)|0;var _e=(c+(n=n+Math.imul(h,Q)|0)|0)+((8191&(i=(i=i+Math.imul(h,ee)|0)+Math.imul(d,Q)|0))<<13)|0;c=((o=o+Math.imul(d,ee)|0)+(i>>>13)|0)+(_e>>>26)|0,_e&=67108863,n=Math.imul(M,K),i=(i=Math.imul(M,z))+Math.imul(k,K)|0,o=Math.imul(k,z),n=n+Math.imul(S,Y)|0,i=(i=i+Math.imul(S,F)|0)+Math.imul(A,Y)|0,o=o+Math.imul(A,F)|0,n=n+Math.imul(_,G)|0,i=(i=i+Math.imul(_,W)|0)+Math.imul(w,G)|0,o=o+Math.imul(w,W)|0,n=n+Math.imul(v,Z)|0,i=(i=i+Math.imul(v,J)|0)+Math.imul(g,Z)|0,o=o+Math.imul(g,J)|0,n=n+Math.imul(p,Q)|0,i=(i=i+Math.imul(p,ee)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,ee)|0;var we=(c+(n=n+Math.imul(h,re)|0)|0)+((8191&(i=(i=i+Math.imul(h,ne)|0)+Math.imul(d,re)|0))<<13)|0;c=((o=o+Math.imul(d,ne)|0)+(i>>>13)|0)+(we>>>26)|0,we&=67108863,n=Math.imul(B,K),i=(i=Math.imul(B,z))+Math.imul(T,K)|0,o=Math.imul(T,z),n=n+Math.imul(M,Y)|0,i=(i=i+Math.imul(M,F)|0)+Math.imul(k,Y)|0,o=o+Math.imul(k,F)|0,n=n+Math.imul(S,G)|0,i=(i=i+Math.imul(S,W)|0)+Math.imul(A,G)|0,o=o+Math.imul(A,W)|0,n=n+Math.imul(_,Z)|0,i=(i=i+Math.imul(_,J)|0)+Math.imul(w,Z)|0,o=o+Math.imul(w,J)|0,n=n+Math.imul(v,Q)|0,i=(i=i+Math.imul(v,ee)|0)+Math.imul(g,Q)|0,o=o+Math.imul(g,ee)|0,n=n+Math.imul(p,re)|0,i=(i=i+Math.imul(p,ne)|0)+Math.imul(b,re)|0,o=o+Math.imul(b,ne)|0;var Ee=(c+(n=n+Math.imul(h,oe)|0)|0)+((8191&(i=(i=i+Math.imul(h,ae)|0)+Math.imul(d,oe)|0))<<13)|0;c=((o=o+Math.imul(d,ae)|0)+(i>>>13)|0)+(Ee>>>26)|0,Ee&=67108863,n=Math.imul(L,K),i=(i=Math.imul(L,z))+Math.imul(P,K)|0,o=Math.imul(P,z),n=n+Math.imul(B,Y)|0,i=(i=i+Math.imul(B,F)|0)+Math.imul(T,Y)|0,o=o+Math.imul(T,F)|0,n=n+Math.imul(M,G)|0,i=(i=i+Math.imul(M,W)|0)+Math.imul(k,G)|0,o=o+Math.imul(k,W)|0,n=n+Math.imul(S,Z)|0,i=(i=i+Math.imul(S,J)|0)+Math.imul(A,Z)|0,o=o+Math.imul(A,J)|0,n=n+Math.imul(_,Q)|0,i=(i=i+Math.imul(_,ee)|0)+Math.imul(w,Q)|0,o=o+Math.imul(w,ee)|0,n=n+Math.imul(v,re)|0,i=(i=i+Math.imul(v,ne)|0)+Math.imul(g,re)|0,o=o+Math.imul(g,ne)|0,n=n+Math.imul(p,oe)|0,i=(i=i+Math.imul(p,ae)|0)+Math.imul(b,oe)|0,o=o+Math.imul(b,ae)|0;var Se=(c+(n=n+Math.imul(h,se)|0)|0)+((8191&(i=(i=i+Math.imul(h,ce)|0)+Math.imul(d,se)|0))<<13)|0;c=((o=o+Math.imul(d,ce)|0)+(i>>>13)|0)+(Se>>>26)|0,Se&=67108863,n=Math.imul(N,K),i=(i=Math.imul(N,z))+Math.imul(D,K)|0,o=Math.imul(D,z),n=n+Math.imul(L,Y)|0,i=(i=i+Math.imul(L,F)|0)+Math.imul(P,Y)|0,o=o+Math.imul(P,F)|0,n=n+Math.imul(B,G)|0,i=(i=i+Math.imul(B,W)|0)+Math.imul(T,G)|0,o=o+Math.imul(T,W)|0,n=n+Math.imul(M,Z)|0,i=(i=i+Math.imul(M,J)|0)+Math.imul(k,Z)|0,o=o+Math.imul(k,J)|0,n=n+Math.imul(S,Q)|0,i=(i=i+Math.imul(S,ee)|0)+Math.imul(A,Q)|0,o=o+Math.imul(A,ee)|0,n=n+Math.imul(_,re)|0,i=(i=i+Math.imul(_,ne)|0)+Math.imul(w,re)|0,o=o+Math.imul(w,ne)|0,n=n+Math.imul(v,oe)|0,i=(i=i+Math.imul(v,ae)|0)+Math.imul(g,oe)|0,o=o+Math.imul(g,ae)|0,n=n+Math.imul(p,se)|0,i=(i=i+Math.imul(p,ce)|0)+Math.imul(b,se)|0,o=o+Math.imul(b,ce)|0;var Ae=(c+(n=n+Math.imul(h,he)|0)|0)+((8191&(i=(i=i+Math.imul(h,de)|0)+Math.imul(d,he)|0))<<13)|0;c=((o=o+Math.imul(d,de)|0)+(i>>>13)|0)+(Ae>>>26)|0,Ae&=67108863,n=Math.imul(U,K),i=(i=Math.imul(U,z))+Math.imul(O,K)|0,o=Math.imul(O,z),n=n+Math.imul(N,Y)|0,i=(i=i+Math.imul(N,F)|0)+Math.imul(D,Y)|0,o=o+Math.imul(D,F)|0,n=n+Math.imul(L,G)|0,i=(i=i+Math.imul(L,W)|0)+Math.imul(P,G)|0,o=o+Math.imul(P,W)|0,n=n+Math.imul(B,Z)|0,i=(i=i+Math.imul(B,J)|0)+Math.imul(T,Z)|0,o=o+Math.imul(T,J)|0,n=n+Math.imul(M,Q)|0,i=(i=i+Math.imul(M,ee)|0)+Math.imul(k,Q)|0,o=o+Math.imul(k,ee)|0,n=n+Math.imul(S,re)|0,i=(i=i+Math.imul(S,ne)|0)+Math.imul(A,re)|0,o=o+Math.imul(A,ne)|0,n=n+Math.imul(_,oe)|0,i=(i=i+Math.imul(_,ae)|0)+Math.imul(w,oe)|0,o=o+Math.imul(w,ae)|0,n=n+Math.imul(v,se)|0,i=(i=i+Math.imul(v,ce)|0)+Math.imul(g,se)|0,o=o+Math.imul(g,ce)|0,n=n+Math.imul(p,he)|0,i=(i=i+Math.imul(p,de)|0)+Math.imul(b,he)|0,o=o+Math.imul(b,de)|0;var Ie=(c+(n=n+Math.imul(h,pe)|0)|0)+((8191&(i=(i=i+Math.imul(h,be)|0)+Math.imul(d,pe)|0))<<13)|0;c=((o=o+Math.imul(d,be)|0)+(i>>>13)|0)+(Ie>>>26)|0,Ie&=67108863,n=Math.imul(U,Y),i=(i=Math.imul(U,F))+Math.imul(O,Y)|0,o=Math.imul(O,F),n=n+Math.imul(N,G)|0,i=(i=i+Math.imul(N,W)|0)+Math.imul(D,G)|0,o=o+Math.imul(D,W)|0,n=n+Math.imul(L,Z)|0,i=(i=i+Math.imul(L,J)|0)+Math.imul(P,Z)|0,o=o+Math.imul(P,J)|0,n=n+Math.imul(B,Q)|0,i=(i=i+Math.imul(B,ee)|0)+Math.imul(T,Q)|0,o=o+Math.imul(T,ee)|0,n=n+Math.imul(M,re)|0,i=(i=i+Math.imul(M,ne)|0)+Math.imul(k,re)|0,o=o+Math.imul(k,ne)|0,n=n+Math.imul(S,oe)|0,i=(i=i+Math.imul(S,ae)|0)+Math.imul(A,oe)|0,o=o+Math.imul(A,ae)|0,n=n+Math.imul(_,se)|0,i=(i=i+Math.imul(_,ce)|0)+Math.imul(w,se)|0,o=o+Math.imul(w,ce)|0,n=n+Math.imul(v,he)|0,i=(i=i+Math.imul(v,de)|0)+Math.imul(g,he)|0,o=o+Math.imul(g,de)|0;var Me=(c+(n=n+Math.imul(p,pe)|0)|0)+((8191&(i=(i=i+Math.imul(p,be)|0)+Math.imul(b,pe)|0))<<13)|0;c=((o=o+Math.imul(b,be)|0)+(i>>>13)|0)+(Me>>>26)|0,Me&=67108863,n=Math.imul(U,G),i=(i=Math.imul(U,W))+Math.imul(O,G)|0,o=Math.imul(O,W),n=n+Math.imul(N,Z)|0,i=(i=i+Math.imul(N,J)|0)+Math.imul(D,Z)|0,o=o+Math.imul(D,J)|0,n=n+Math.imul(L,Q)|0,i=(i=i+Math.imul(L,ee)|0)+Math.imul(P,Q)|0,o=o+Math.imul(P,ee)|0,n=n+Math.imul(B,re)|0,i=(i=i+Math.imul(B,ne)|0)+Math.imul(T,re)|0,o=o+Math.imul(T,ne)|0,n=n+Math.imul(M,oe)|0,i=(i=i+Math.imul(M,ae)|0)+Math.imul(k,oe)|0,o=o+Math.imul(k,ae)|0,n=n+Math.imul(S,se)|0,i=(i=i+Math.imul(S,ce)|0)+Math.imul(A,se)|0,o=o+Math.imul(A,ce)|0,n=n+Math.imul(_,he)|0,i=(i=i+Math.imul(_,de)|0)+Math.imul(w,he)|0,o=o+Math.imul(w,de)|0;var ke=(c+(n=n+Math.imul(v,pe)|0)|0)+((8191&(i=(i=i+Math.imul(v,be)|0)+Math.imul(g,pe)|0))<<13)|0;c=((o=o+Math.imul(g,be)|0)+(i>>>13)|0)+(ke>>>26)|0,ke&=67108863,n=Math.imul(U,Z),i=(i=Math.imul(U,J))+Math.imul(O,Z)|0,o=Math.imul(O,J),n=n+Math.imul(N,Q)|0,i=(i=i+Math.imul(N,ee)|0)+Math.imul(D,Q)|0,o=o+Math.imul(D,ee)|0,n=n+Math.imul(L,re)|0,i=(i=i+Math.imul(L,ne)|0)+Math.imul(P,re)|0,o=o+Math.imul(P,ne)|0,n=n+Math.imul(B,oe)|0,i=(i=i+Math.imul(B,ae)|0)+Math.imul(T,oe)|0,o=o+Math.imul(T,ae)|0,n=n+Math.imul(M,se)|0,i=(i=i+Math.imul(M,ce)|0)+Math.imul(k,se)|0,o=o+Math.imul(k,ce)|0,n=n+Math.imul(S,he)|0,i=(i=i+Math.imul(S,de)|0)+Math.imul(A,he)|0,o=o+Math.imul(A,de)|0;var xe=(c+(n=n+Math.imul(_,pe)|0)|0)+((8191&(i=(i=i+Math.imul(_,be)|0)+Math.imul(w,pe)|0))<<13)|0;c=((o=o+Math.imul(w,be)|0)+(i>>>13)|0)+(xe>>>26)|0,xe&=67108863,n=Math.imul(U,Q),i=(i=Math.imul(U,ee))+Math.imul(O,Q)|0,o=Math.imul(O,ee),n=n+Math.imul(N,re)|0,i=(i=i+Math.imul(N,ne)|0)+Math.imul(D,re)|0,o=o+Math.imul(D,ne)|0,n=n+Math.imul(L,oe)|0,i=(i=i+Math.imul(L,ae)|0)+Math.imul(P,oe)|0,o=o+Math.imul(P,ae)|0,n=n+Math.imul(B,se)|0,i=(i=i+Math.imul(B,ce)|0)+Math.imul(T,se)|0,o=o+Math.imul(T,ce)|0,n=n+Math.imul(M,he)|0,i=(i=i+Math.imul(M,de)|0)+Math.imul(k,he)|0,o=o+Math.imul(k,de)|0;var Be=(c+(n=n+Math.imul(S,pe)|0)|0)+((8191&(i=(i=i+Math.imul(S,be)|0)+Math.imul(A,pe)|0))<<13)|0;c=((o=o+Math.imul(A,be)|0)+(i>>>13)|0)+(Be>>>26)|0,Be&=67108863,n=Math.imul(U,re),i=(i=Math.imul(U,ne))+Math.imul(O,re)|0,o=Math.imul(O,ne),n=n+Math.imul(N,oe)|0,i=(i=i+Math.imul(N,ae)|0)+Math.imul(D,oe)|0,o=o+Math.imul(D,ae)|0,n=n+Math.imul(L,se)|0,i=(i=i+Math.imul(L,ce)|0)+Math.imul(P,se)|0,o=o+Math.imul(P,ce)|0,n=n+Math.imul(B,he)|0,i=(i=i+Math.imul(B,de)|0)+Math.imul(T,he)|0,o=o+Math.imul(T,de)|0;var Te=(c+(n=n+Math.imul(M,pe)|0)|0)+((8191&(i=(i=i+Math.imul(M,be)|0)+Math.imul(k,pe)|0))<<13)|0;c=((o=o+Math.imul(k,be)|0)+(i>>>13)|0)+(Te>>>26)|0,Te&=67108863,n=Math.imul(U,oe),i=(i=Math.imul(U,ae))+Math.imul(O,oe)|0,o=Math.imul(O,ae),n=n+Math.imul(N,se)|0,i=(i=i+Math.imul(N,ce)|0)+Math.imul(D,se)|0,o=o+Math.imul(D,ce)|0,n=n+Math.imul(L,he)|0,i=(i=i+Math.imul(L,de)|0)+Math.imul(P,he)|0,o=o+Math.imul(P,de)|0;var Re=(c+(n=n+Math.imul(B,pe)|0)|0)+((8191&(i=(i=i+Math.imul(B,be)|0)+Math.imul(T,pe)|0))<<13)|0;c=((o=o+Math.imul(T,be)|0)+(i>>>13)|0)+(Re>>>26)|0,Re&=67108863,n=Math.imul(U,se),i=(i=Math.imul(U,ce))+Math.imul(O,se)|0,o=Math.imul(O,ce),n=n+Math.imul(N,he)|0,i=(i=i+Math.imul(N,de)|0)+Math.imul(D,he)|0,o=o+Math.imul(D,de)|0;var Le=(c+(n=n+Math.imul(L,pe)|0)|0)+((8191&(i=(i=i+Math.imul(L,be)|0)+Math.imul(P,pe)|0))<<13)|0;c=((o=o+Math.imul(P,be)|0)+(i>>>13)|0)+(Le>>>26)|0,Le&=67108863,n=Math.imul(U,he),i=(i=Math.imul(U,de))+Math.imul(O,he)|0,o=Math.imul(O,de);var Pe=(c+(n=n+Math.imul(N,pe)|0)|0)+((8191&(i=(i=i+Math.imul(N,be)|0)+Math.imul(D,pe)|0))<<13)|0;c=((o=o+Math.imul(D,be)|0)+(i>>>13)|0)+(Pe>>>26)|0,Pe&=67108863;var Ce=(c+(n=Math.imul(U,pe))|0)+((8191&(i=(i=Math.imul(U,be))+Math.imul(O,pe)|0))<<13)|0;return c=((o=Math.imul(O,be))+(i>>>13)|0)+(Ce>>>26)|0,Ce&=67108863,s[0]=ye,s[1]=ve,s[2]=ge,s[3]=me,s[4]=_e,s[5]=we,s[6]=Ee,s[7]=Se,s[8]=Ae,s[9]=Ie,s[10]=Me,s[11]=ke,s[12]=xe,s[13]=Be,s[14]=Te,s[15]=Re,s[16]=Le,s[17]=Pe,s[18]=Ce,0!==c&&(s[19]=c,r.length++),r};function p(e,t,r){return(new b).mulp(e,t,r)}function b(e,t){this.x=e,this.y=t}Math.imul||(l=d),o.prototype.mulTo=function(e,t){var r=this.length+e.length;return 10===this.length&&10===e.length?l(this,e,t):r<63?d(this,e,t):r<1024?function(e,t,r){r.negative=t.negative^e.negative,r.length=e.length+t.length;for(var n=0,i=0,o=0;o<r.length-1;o++){var a=i;i=0;for(var f=67108863&n,s=Math.min(o,t.length-1),c=Math.max(0,o-e.length+1);c<=s;c++){var u=o-c,h=(0|e.words[u])*(0|t.words[c]),d=67108863&h;f=67108863&(d=d+f|0),i+=(a=(a=a+(h/67108864|0)|0)+(d>>>26)|0)>>>26,a&=67108863}r.words[o]=f,n=a,a=i}return 0!==n?r.words[o]=n:r.length--,r.strip()}(this,e,t):p(this,e,t)},b.prototype.makeRBT=function(e){for(var t=new Array(e),r=o.prototype._countBits(e)-1,n=0;n<e;n++)t[n]=this.revBin(n,r,e);return t},b.prototype.revBin=function(e,t,r){if(0===e||e===r-1)return e;for(var n=0,i=0;i<t;i++)n|=(1&e)<<t-i-1,e>>=1;return n},b.prototype.permute=function(e,t,r,n,i,o){for(var a=0;a<o;a++)n[a]=t[e[a]],i[a]=r[e[a]]},b.prototype.transform=function(e,t,r,n,i,o){this.permute(o,e,t,r,n,i);for(var a=1;a<i;a<<=1)for(var f=a<<1,s=Math.cos(2*Math.PI/f),c=Math.sin(2*Math.PI/f),u=0;u<i;u+=f)for(var h=s,d=c,l=0;l<a;l++){var p=r[u+l],b=n[u+l],y=r[u+l+a],v=n[u+l+a],g=h*y-d*v;v=h*v+d*y,y=g,r[u+l]=p+y,n[u+l]=b+v,r[u+l+a]=p-y,n[u+l+a]=b-v,l!==f&&(g=s*h-c*d,d=s*d+c*h,h=g)}},b.prototype.guessLen13b=function(e,t){var r=1|Math.max(t,e),n=1&r,i=0;for(r=r/2|0;r;r>>>=1)i++;return 1<<i+1+n},b.prototype.conjugate=function(e,t,r){if(!(r<=1))for(var n=0;n<r/2;n++){var i=e[n];e[n]=e[r-n-1],e[r-n-1]=i,i=t[n],t[n]=-t[r-n-1],t[r-n-1]=-i}},b.prototype.normalize13b=function(e,t){for(var r=0,n=0;n<t/2;n++){var i=8192*Math.round(e[2*n+1]/t)+Math.round(e[2*n]/t)+r;e[n]=67108863&i,r=i<67108864?0:i/67108864|0}return e},b.prototype.convert13b=function(e,t,r,i){for(var o=0,a=0;a<t;a++)o+=0|e[a],r[2*a]=8191&o,o>>>=13,r[2*a+1]=8191&o,o>>>=13;for(a=2*t;a<i;++a)r[a]=0;n(0===o),n(0==(-8192&o))},b.prototype.stub=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=0;return t},b.prototype.mulp=function(e,t,r){var n=2*this.guessLen13b(e.length,t.length),i=this.makeRBT(n),o=this.stub(n),a=new Array(n),f=new Array(n),s=new Array(n),c=new Array(n),u=new Array(n),h=new Array(n),d=r.words;d.length=n,this.convert13b(e.words,e.length,a,n),this.convert13b(t.words,t.length,c,n),this.transform(a,o,f,s,n,i),this.transform(c,o,u,h,n,i);for(var l=0;l<n;l++){var p=f[l]*u[l]-s[l]*h[l];s[l]=f[l]*h[l]+s[l]*u[l],f[l]=p}return this.conjugate(f,s,n),this.transform(f,s,d,o,n,i),this.conjugate(d,o,n),this.normalize13b(d,n),r.negative=e.negative^t.negative,r.length=e.length+t.length,r.strip()},o.prototype.mul=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),this.mulTo(e,t)},o.prototype.mulf=function(e){var t=new o(null);return t.words=new Array(this.length+e.length),p(this,e,t)},o.prototype.imul=function(e){return this.clone().mulTo(e,this)},o.prototype.imuln=function(e){n("number"==typeof e),n(e<67108864);for(var t=0,r=0;r<this.length;r++){var i=(0|this.words[r])*e,o=(67108863&i)+(67108863&t);t>>=26,t+=i/67108864|0,t+=o>>>26,this.words[r]=67108863&o}return 0!==t&&(this.words[r]=t,this.length++),this},o.prototype.muln=function(e){return this.clone().imuln(e)},o.prototype.sqr=function(){return this.mul(this)},o.prototype.isqr=function(){return this.imul(this.clone())},o.prototype.pow=function(e){var t=function(e){for(var t=new Array(e.bitLength()),r=0;r<t.length;r++){var n=r/26|0,i=r%26;t[r]=(e.words[n]&1<<i)>>>i}return t}(e);if(0===t.length)return new o(1);for(var r=this,n=0;n<t.length&&0===t[n];n++,r=r.sqr());if(++n<t.length)for(var i=r.sqr();n<t.length;n++,i=i.sqr())0!==t[n]&&(r=r.mul(i));return r},o.prototype.iushln=function(e){n("number"==typeof e&&e>=0);var t,r=e%26,i=(e-r)/26,o=67108863>>>26-r<<26-r;if(0!==r){var a=0;for(t=0;t<this.length;t++){var f=this.words[t]&o,s=(0|this.words[t])-f<<r;this.words[t]=s|a,a=f>>>26-r}a&&(this.words[t]=a,this.length++)}if(0!==i){for(t=this.length-1;t>=0;t--)this.words[t+i]=this.words[t];for(t=0;t<i;t++)this.words[t]=0;this.length+=i}return this.strip()},o.prototype.ishln=function(e){return n(0===this.negative),this.iushln(e)},o.prototype.iushrn=function(e,t,r){var i;n("number"==typeof e&&e>=0),i=t?(t-t%26)/26:0;var o=e%26,a=Math.min((e-o)/26,this.length),f=67108863^67108863>>>o<<o,s=r;if(i-=a,i=Math.max(0,i),s){for(var c=0;c<a;c++)s.words[c]=this.words[c];s.length=a}if(0===a);else if(this.length>a)for(this.length-=a,c=0;c<this.length;c++)this.words[c]=this.words[c+a];else this.words[0]=0,this.length=1;var u=0;for(c=this.length-1;c>=0&&(0!==u||c>=i);c--){var h=0|this.words[c];this.words[c]=u<<26-o|h>>>o,u=h&f}return s&&0!==u&&(s.words[s.length++]=u),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},o.prototype.ishrn=function(e,t,r){return n(0===this.negative),this.iushrn(e,t,r)},o.prototype.shln=function(e){return this.clone().ishln(e)},o.prototype.ushln=function(e){return this.clone().iushln(e)},o.prototype.shrn=function(e){return this.clone().ishrn(e)},o.prototype.ushrn=function(e){return this.clone().iushrn(e)},o.prototype.testn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26,i=1<<t;return!(this.length<=r)&&!!(this.words[r]&i)},o.prototype.imaskn=function(e){n("number"==typeof e&&e>=0);var t=e%26,r=(e-t)/26;if(n(0===this.negative,"imaskn works only with positive numbers"),this.length<=r)return this;if(0!==t&&r++,this.length=Math.min(r,this.length),0!==t){var i=67108863^67108863>>>t<<t;this.words[this.length-1]&=i}return this.strip()},o.prototype.maskn=function(e){return this.clone().imaskn(e)},o.prototype.iaddn=function(e){return n("number"==typeof e),n(e<67108864),e<0?this.isubn(-e):0!==this.negative?1===this.length&&(0|this.words[0])<e?(this.words[0]=e-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(e),this.negative=1,this):this._iaddn(e)},o.prototype._iaddn=function(e){this.words[0]+=e;for(var t=0;t<this.length&&this.words[t]>=67108864;t++)this.words[t]-=67108864,t===this.length-1?this.words[t+1]=1:this.words[t+1]++;return this.length=Math.max(this.length,t+1),this},o.prototype.isubn=function(e){if(n("number"==typeof e),n(e<67108864),e<0)return this.iaddn(-e);if(0!==this.negative)return this.negative=0,this.iaddn(e),this.negative=1,this;if(this.words[0]-=e,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var t=0;t<this.length&&this.words[t]<0;t++)this.words[t]+=67108864,this.words[t+1]-=1;return this.strip()},o.prototype.addn=function(e){return this.clone().iaddn(e)},o.prototype.subn=function(e){return this.clone().isubn(e)},o.prototype.iabs=function(){return this.negative=0,this},o.prototype.abs=function(){return this.clone().iabs()},o.prototype._ishlnsubmul=function(e,t,r){var i,o,a=e.length+r;this._expand(a);var f=0;for(i=0;i<e.length;i++){o=(0|this.words[i+r])+f;var s=(0|e.words[i])*t;f=((o-=67108863&s)>>26)-(s/67108864|0),this.words[i+r]=67108863&o}for(;i<this.length-r;i++)f=(o=(0|this.words[i+r])+f)>>26,this.words[i+r]=67108863&o;if(0===f)return this.strip();for(n(-1===f),f=0,i=0;i<this.length;i++)f=(o=-(0|this.words[i])+f)>>26,this.words[i]=67108863&o;return this.negative=1,this.strip()},o.prototype._wordDiv=function(e,t){var r=(this.length,e.length),n=this.clone(),i=e,a=0|i.words[i.length-1];0!==(r=26-this._countBits(a))&&(i=i.ushln(r),n.iushln(r),a=0|i.words[i.length-1]);var f,s=n.length-i.length;if("mod"!==t){(f=new o(null)).length=s+1,f.words=new Array(f.length);for(var c=0;c<f.length;c++)f.words[c]=0}var u=n.clone()._ishlnsubmul(i,1,s);0===u.negative&&(n=u,f&&(f.words[s]=1));for(var h=s-1;h>=0;h--){var d=67108864*(0|n.words[i.length+h])+(0|n.words[i.length+h-1]);for(d=Math.min(d/a|0,67108863),n._ishlnsubmul(i,d,h);0!==n.negative;)d--,n.negative=0,n._ishlnsubmul(i,1,h),n.isZero()||(n.negative^=1);f&&(f.words[h]=d)}return f&&f.strip(),n.strip(),"div"!==t&&0!==r&&n.iushrn(r),{div:f||null,mod:n}},o.prototype.divmod=function(e,t,r){return n(!e.isZero()),this.isZero()?{div:new o(0),mod:new o(0)}:0!==this.negative&&0===e.negative?(f=this.neg().divmod(e,t),"mod"!==t&&(i=f.div.neg()),"div"!==t&&(a=f.mod.neg(),r&&0!==a.negative&&a.iadd(e)),{div:i,mod:a}):0===this.negative&&0!==e.negative?(f=this.divmod(e.neg(),t),"mod"!==t&&(i=f.div.neg()),{div:i,mod:f.mod}):0!=(this.negative&e.negative)?(f=this.neg().divmod(e.neg(),t),"div"!==t&&(a=f.mod.neg(),r&&0!==a.negative&&a.isub(e)),{div:f.div,mod:a}):e.length>this.length||this.cmp(e)<0?{div:new o(0),mod:this}:1===e.length?"div"===t?{div:this.divn(e.words[0]),mod:null}:"mod"===t?{div:null,mod:new o(this.modn(e.words[0]))}:{div:this.divn(e.words[0]),mod:new o(this.modn(e.words[0]))}:this._wordDiv(e,t);var i,a,f},o.prototype.div=function(e){return this.divmod(e,"div",!1).div},o.prototype.mod=function(e){return this.divmod(e,"mod",!1).mod},o.prototype.umod=function(e){return this.divmod(e,"mod",!0).mod},o.prototype.divRound=function(e){var t=this.divmod(e);if(t.mod.isZero())return t.div;var r=0!==t.div.negative?t.mod.isub(e):t.mod,n=e.ushrn(1),i=e.andln(1),o=r.cmp(n);return o<0||1===i&&0===o?t.div:0!==t.div.negative?t.div.isubn(1):t.div.iaddn(1)},o.prototype.modn=function(e){n(e<=67108863);for(var t=(1<<26)%e,r=0,i=this.length-1;i>=0;i--)r=(t*r+(0|this.words[i]))%e;return r},o.prototype.idivn=function(e){n(e<=67108863);for(var t=0,r=this.length-1;r>=0;r--){var i=(0|this.words[r])+67108864*t;this.words[r]=i/e|0,t=i%e}return this.strip()},o.prototype.divn=function(e){return this.clone().idivn(e)},o.prototype.egcd=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i=new o(1),a=new o(0),f=new o(0),s=new o(1),c=0;t.isEven()&&r.isEven();)t.iushrn(1),r.iushrn(1),++c;for(var u=r.clone(),h=t.clone();!t.isZero();){for(var d=0,l=1;0==(t.words[0]&l)&&d<26;++d,l<<=1);if(d>0)for(t.iushrn(d);d-- >0;)(i.isOdd()||a.isOdd())&&(i.iadd(u),a.isub(h)),i.iushrn(1),a.iushrn(1);for(var p=0,b=1;0==(r.words[0]&b)&&p<26;++p,b<<=1);if(p>0)for(r.iushrn(p);p-- >0;)(f.isOdd()||s.isOdd())&&(f.iadd(u),s.isub(h)),f.iushrn(1),s.iushrn(1);t.cmp(r)>=0?(t.isub(r),i.isub(f),a.isub(s)):(r.isub(t),f.isub(i),s.isub(a))}return{a:f,b:s,gcd:r.iushln(c)}},o.prototype._invmp=function(e){n(0===e.negative),n(!e.isZero());var t=this,r=e.clone();t=0!==t.negative?t.umod(e):t.clone();for(var i,a=new o(1),f=new o(0),s=r.clone();t.cmpn(1)>0&&r.cmpn(1)>0;){for(var c=0,u=1;0==(t.words[0]&u)&&c<26;++c,u<<=1);if(c>0)for(t.iushrn(c);c-- >0;)a.isOdd()&&a.iadd(s),a.iushrn(1);for(var h=0,d=1;0==(r.words[0]&d)&&h<26;++h,d<<=1);if(h>0)for(r.iushrn(h);h-- >0;)f.isOdd()&&f.iadd(s),f.iushrn(1);t.cmp(r)>=0?(t.isub(r),a.isub(f)):(r.isub(t),f.isub(a))}return(i=0===t.cmpn(1)?a:f).cmpn(0)<0&&i.iadd(e),i},o.prototype.gcd=function(e){if(this.isZero())return e.abs();if(e.isZero())return this.abs();var t=this.clone(),r=e.clone();t.negative=0,r.negative=0;for(var n=0;t.isEven()&&r.isEven();n++)t.iushrn(1),r.iushrn(1);for(;;){for(;t.isEven();)t.iushrn(1);for(;r.isEven();)r.iushrn(1);var i=t.cmp(r);if(i<0){var o=t;t=r,r=o}else if(0===i||0===r.cmpn(1))break;t.isub(r)}return r.iushln(n)},o.prototype.invm=function(e){return this.egcd(e).a.umod(e)},o.prototype.isEven=function(){return 0==(1&this.words[0])},o.prototype.isOdd=function(){return 1==(1&this.words[0])},o.prototype.andln=function(e){return this.words[0]&e},o.prototype.bincn=function(e){n("number"==typeof e);var t=e%26,r=(e-t)/26,i=1<<t;if(this.length<=r)return this._expand(r+1),this.words[r]|=i,this;for(var o=i,a=r;0!==o&&a<this.length;a++){var f=0|this.words[a];o=(f+=o)>>>26,f&=67108863,this.words[a]=f}return 0!==o&&(this.words[a]=o,this.length++),this},o.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},o.prototype.cmpn=function(e){var t,r=e<0;if(0!==this.negative&&!r)return-1;if(0===this.negative&&r)return 1;if(this.strip(),this.length>1)t=1;else{r&&(e=-e),n(e<=67108863,"Number is too big");var i=0|this.words[0];t=i===e?0:i<e?-1:1}return 0!==this.negative?0|-t:t},o.prototype.cmp=function(e){if(0!==this.negative&&0===e.negative)return-1;if(0===this.negative&&0!==e.negative)return 1;var t=this.ucmp(e);return 0!==this.negative?0|-t:t},o.prototype.ucmp=function(e){if(this.length>e.length)return 1;if(this.length<e.length)return-1;for(var t=0,r=this.length-1;r>=0;r--){var n=0|this.words[r],i=0|e.words[r];if(n!==i){n<i?t=-1:n>i&&(t=1);break}}return t},o.prototype.gtn=function(e){return 1===this.cmpn(e)},o.prototype.gt=function(e){return 1===this.cmp(e)},o.prototype.gten=function(e){return this.cmpn(e)>=0},o.prototype.gte=function(e){return this.cmp(e)>=0},o.prototype.ltn=function(e){return-1===this.cmpn(e)},o.prototype.lt=function(e){return-1===this.cmp(e)},o.prototype.lten=function(e){return this.cmpn(e)<=0},o.prototype.lte=function(e){return this.cmp(e)<=0},o.prototype.eqn=function(e){return 0===this.cmpn(e)},o.prototype.eq=function(e){return 0===this.cmp(e)},o.red=function(e){return new E(e)},o.prototype.toRed=function(e){return n(!this.red,"Already a number in reduction context"),n(0===this.negative,"red works only with positives"),e.convertTo(this)._forceRed(e)},o.prototype.fromRed=function(){return n(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},o.prototype._forceRed=function(e){return this.red=e,this},o.prototype.forceRed=function(e){return n(!this.red,"Already a number in reduction context"),this._forceRed(e)},o.prototype.redAdd=function(e){return n(this.red,"redAdd works only with red numbers"),this.red.add(this,e)},o.prototype.redIAdd=function(e){return n(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,e)},o.prototype.redSub=function(e){return n(this.red,"redSub works only with red numbers"),this.red.sub(this,e)},o.prototype.redISub=function(e){return n(this.red,"redISub works only with red numbers"),this.red.isub(this,e)},o.prototype.redShl=function(e){return n(this.red,"redShl works only with red numbers"),this.red.shl(this,e)},o.prototype.redMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.mul(this,e)},o.prototype.redIMul=function(e){return n(this.red,"redMul works only with red numbers"),this.red._verify2(this,e),this.red.imul(this,e)},o.prototype.redSqr=function(){return n(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},o.prototype.redISqr=function(){return n(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},o.prototype.redSqrt=function(){return n(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},o.prototype.redInvm=function(){return n(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},o.prototype.redNeg=function(){return n(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},o.prototype.redPow=function(e){return n(this.red&&!e.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,e)};var y={k256:null,p224:null,p192:null,p25519:null};function v(e,t){this.name=e,this.p=new o(t,16),this.n=this.p.bitLength(),this.k=new o(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function g(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function m(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function _(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function w(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function E(e){if("string"==typeof e){var t=o._prime(e);this.m=t.p,this.prime=t}else n(e.gtn(1),"modulus must be greater than 1"),this.m=e,this.prime=null}function S(e){E.call(this,e),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new o(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var e=new o(null);return e.words=new Array(Math.ceil(this.n/13)),e},v.prototype.ireduce=function(e){var t,r=e;do{this.split(r,this.tmp),t=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(t>this.n);var n=t<this.n?-1:r.ucmp(this.p);return 0===n?(r.words[0]=0,r.length=1):n>0?r.isub(this.p):r.strip(),r},v.prototype.split=function(e,t){e.iushrn(this.n,0,t)},v.prototype.imulK=function(e){return e.imul(this.k)},i(g,v),g.prototype.split=function(e,t){for(var r=Math.min(e.length,9),n=0;n<r;n++)t.words[n]=e.words[n];if(t.length=r,e.length<=9)return e.words[0]=0,void(e.length=1);var i=e.words[9];for(t.words[t.length++]=4194303&i,n=10;n<e.length;n++){var o=0|e.words[n];e.words[n-10]=(4194303&o)<<4|i>>>22,i=o}i>>>=22,e.words[n-10]=i,0===i&&e.length>10?e.length-=10:e.length-=9},g.prototype.imulK=function(e){e.words[e.length]=0,e.words[e.length+1]=0,e.length+=2;for(var t=0,r=0;r<e.length;r++){var n=0|e.words[r];t+=977*n,e.words[r]=67108863&t,t=64*n+(t/67108864|0)}return 0===e.words[e.length-1]&&(e.length--,0===e.words[e.length-1]&&e.length--),e},i(m,v),i(_,v),i(w,v),w.prototype.imulK=function(e){for(var t=0,r=0;r<e.length;r++){var n=19*(0|e.words[r])+t,i=67108863&n;n>>>=26,e.words[r]=i,t=n}return 0!==t&&(e.words[e.length++]=t),e},o._prime=function(e){if(y[e])return y[e];var t;if("k256"===e)t=new g;else if("p224"===e)t=new m;else if("p192"===e)t=new _;else{if("p25519"!==e)throw new Error("Unknown prime "+e);t=new w}return y[e]=t,t},E.prototype._verify1=function(e){n(0===e.negative,"red works only with positives"),n(e.red,"red works only with red numbers")},E.prototype._verify2=function(e,t){n(0==(e.negative|t.negative),"red works only with positives"),n(e.red&&e.red===t.red,"red works only with red numbers")},E.prototype.imod=function(e){return this.prime?this.prime.ireduce(e)._forceRed(this):e.umod(this.m)._forceRed(this)},E.prototype.neg=function(e){return e.isZero()?e.clone():this.m.sub(e)._forceRed(this)},E.prototype.add=function(e,t){this._verify2(e,t);var r=e.add(t);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},E.prototype.iadd=function(e,t){this._verify2(e,t);var r=e.iadd(t);return r.cmp(this.m)>=0&&r.isub(this.m),r},E.prototype.sub=function(e,t){this._verify2(e,t);var r=e.sub(t);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},E.prototype.isub=function(e,t){this._verify2(e,t);var r=e.isub(t);return r.cmpn(0)<0&&r.iadd(this.m),r},E.prototype.shl=function(e,t){return this._verify1(e),this.imod(e.ushln(t))},E.prototype.imul=function(e,t){return this._verify2(e,t),this.imod(e.imul(t))},E.prototype.mul=function(e,t){return this._verify2(e,t),this.imod(e.mul(t))},E.prototype.isqr=function(e){return this.imul(e,e.clone())},E.prototype.sqr=function(e){return this.mul(e,e)},E.prototype.sqrt=function(e){if(e.isZero())return e.clone();var t=this.m.andln(3);if(n(t%2==1),3===t){var r=this.m.add(new o(1)).iushrn(2);return this.pow(e,r)}for(var i=this.m.subn(1),a=0;!i.isZero()&&0===i.andln(1);)a++,i.iushrn(1);n(!i.isZero());var f=new o(1).toRed(this),s=f.redNeg(),c=this.m.subn(1).iushrn(1),u=this.m.bitLength();for(u=new o(2*u*u).toRed(this);0!==this.pow(u,c).cmp(s);)u.redIAdd(s);for(var h=this.pow(u,i),d=this.pow(e,i.addn(1).iushrn(1)),l=this.pow(e,i),p=a;0!==l.cmp(f);){for(var b=l,y=0;0!==b.cmp(f);y++)b=b.redSqr();n(y<p);var v=this.pow(h,new o(1).iushln(p-y-1));d=d.redMul(v),h=v.redSqr(),l=l.redMul(h),p=y}return d},E.prototype.invm=function(e){var t=e._invmp(this.m);return 0!==t.negative?(t.negative=0,this.imod(t).redNeg()):this.imod(t)},E.prototype.pow=function(e,t){if(t.isZero())return new o(1).toRed(this);if(0===t.cmpn(1))return e.clone();var r=new Array(16);r[0]=new o(1).toRed(this),r[1]=e;for(var n=2;n<r.length;n++)r[n]=this.mul(r[n-1],e);var i=r[0],a=0,f=0,s=t.bitLength()%26;for(0===s&&(s=26),n=t.length-1;n>=0;n--){for(var c=t.words[n],u=s-1;u>=0;u--){var h=c>>u&1;i!==r[0]&&(i=this.sqr(i)),0!==h||0!==a?(a<<=1,a|=h,(4===++f||0===n&&0===u)&&(i=this.mul(i,r[a]),f=0,a=0)):f=0}s=26}return i},E.prototype.convertTo=function(e){var t=e.umod(this.m);return t===e?t.clone():t},E.prototype.convertFrom=function(e){var t=e.clone();return t.red=null,t},o.mont=function(e){return new S(e)},i(S,E),S.prototype.convertTo=function(e){return this.imod(e.ushln(this.shift))},S.prototype.convertFrom=function(e){var t=this.imod(e.mul(this.rinv));return t.red=null,t},S.prototype.imul=function(e,t){if(e.isZero()||t.isZero())return e.words[0]=0,e.length=1,e;var r=e.imul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),o=i;return i.cmp(this.m)>=0?o=i.isub(this.m):i.cmpn(0)<0&&(o=i.iadd(this.m)),o._forceRed(this)},S.prototype.mul=function(e,t){if(e.isZero()||t.isZero())return new o(0)._forceRed(this);var r=e.mul(t),n=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i=r.isub(n).iushrn(this.shift),a=i;return i.cmp(this.m)>=0?a=i.isub(this.m):i.cmpn(0)<0&&(a=i.iadd(this.m)),a._forceRed(this)},S.prototype.invm=function(e){return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this)}}(e,this)}).call(this,r(144)(e))},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var n=r(105),i=r(106),o=r(44);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function f(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=s.prototype:(null===e&&(e=new s(t)),e.length=t),e}function s(e,t,r){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,e)}return c(this,e,t,r)}function c(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);s.TYPED_ARRAY_SUPPORT?(e=t).__proto__=s.prototype:e=d(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!s.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|p(t,r),i=(e=f(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(s.isBuffer(t)){var r=0|l(t.length);return 0===(e=f(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?f(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function h(e,t){if(u(t),e=f(e,t<0?0:0|l(t)),!s.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function d(e,t){var r=t.length<0?0:0|l(t.length);e=f(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function l(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(s.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return q(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return K(e).length;default:if(n)return q(e).length;t=(""+t).toLowerCase(),n=!0}}function b(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function y(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=s.from(t,n)),s.isBuffer(t))return 0===t.length?-1:v(e,t,r,n,i);if("number"==typeof t)return t&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):v(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function v(e,t,r,n,i){var o,a=1,f=e.length,s=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,f/=2,s/=2,r/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var u=-1;for(o=r;o<f;o++)if(c(e,o)===c(t,-1===u?0:o-u)){if(-1===u&&(u=o),o-u+1===s)return u*a}else-1!==u&&(o-=o-u),u=-1}else for(r+s>f&&(r=f-s),o=r;o>=0;o--){for(var h=!0,d=0;d<s;d++)if(c(e,o+d)!==c(t,d)){h=!1;break}if(h)return o}return-1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var f=parseInt(t.substr(2*a,2),16);if(isNaN(f))return a;e[r+a]=f}return a}function m(e,t,r,n){return z(q(t,e.length-r),e,r,n)}function _(e,t,r,n){return z(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function w(e,t,r,n){return _(e,t,r,n)}function E(e,t,r,n){return z(K(t),e,r,n)}function S(e,t,r,n){return z(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function A(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function I(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,f,s,c=e[i],u=null,h=c>239?4:c>223?3:c>191?2:1;if(i+h<=r)switch(h){case 1:c<128&&(u=c);break;case 2:128==(192&(o=e[i+1]))&&(s=(31&c)<<6|63&o)>127&&(u=s);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(s=(15&c)<<12|(63&o)<<6|63&a)>2047&&(s<55296||s>57343)&&(u=s);break;case 4:o=e[i+1],a=e[i+2],f=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&f)&&(s=(15&c)<<18|(63&o)<<12|(63&a)<<6|63&f)>65535&&s<1114112&&(u=s)}null===u?(u=65533,h=1):u>65535&&(u-=65536,n.push(u>>>10&1023|55296),u=56320|1023&u),n.push(u),i+=h}return function(e){var t=e.length;if(t<=M)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=M));return r}(n)}t.Buffer=s,t.SlowBuffer=function(e){+e!=e&&(e=0);return s.alloc(+e)},t.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),s.poolSize=8192,s._augment=function(e){return e.__proto__=s.prototype,e},s.from=function(e,t,r){return c(null,e,t,r)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(e,t,r){return function(e,t,r,n){return u(t),t<=0?f(e,t):void 0!==r?"string"==typeof n?f(e,t).fill(r,n):f(e,t).fill(r):f(e,t)}(null,e,t,r)},s.allocUnsafe=function(e){return h(null,e)},s.allocUnsafeSlow=function(e){return h(null,e)},s.isBuffer=function(e){return!(null==e||!e._isBuffer)},s.compare=function(e,t){if(!s.isBuffer(e)||!s.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},s.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return s.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=s.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},s.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},s.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},s.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?I(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return B(this,t,r);case"utf8":case"utf-8":return I(this,t,r);case"ascii":return k(this,t,r);case"latin1":case"binary":return x(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},s.prototype.equals=function(e){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===s.compare(this,e)},s.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},s.prototype.compare=function(e,t,r,n,i){if(!s.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),f=Math.min(o,a),c=this.slice(n,i),u=e.slice(t,r),h=0;h<f;++h)if(c[h]!==u[h]){o=c[h],a=u[h];break}return o<a?-1:a<o?1:0},s.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},s.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},s.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},s.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,e,t,r);case"utf8":case"utf-8":return m(this,e,t,r);case"ascii":return _(this,e,t,r);case"latin1":case"binary":return w(this,e,t,r);case"base64":return E(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var M=4096;function k(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function x(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function B(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=O(e[o]);return i}function T(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function L(e,t,r,n,i,o){if(!s.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function P(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function C(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function N(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function D(e,t,r,n,o){return o||N(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function j(e,t,r,n,o){return o||N(e,0,r,8),i.write(e,t,r,n,52,8),r+8}s.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),s.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=s.prototype;else{var i=t-e;r=new s(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},s.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},s.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},s.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},s.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},s.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},s.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},s.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},s.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},s.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||R(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},s.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},s.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},s.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},s.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},s.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!0,23,4)},s.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),i.read(this,e,!1,23,4)},s.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!0,52,8)},s.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),i.read(this,e,!1,52,8)},s.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},s.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||L(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},s.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,255,0),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},s.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},s.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},s.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):C(this,e,t,!0),t+4},s.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},s.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);L(this,e,t,r,i-1,-i)}var o=0,a=1,f=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===f&&0!==this[t+o-1]&&(f=1),this[t+o]=(e/a>>0)-f&255;return t+r},s.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);L(this,e,t,r,i-1,-i)}var o=r-1,a=1,f=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===f&&0!==this[t+o+1]&&(f=1),this[t+o]=(e/a>>0)-f&255;return t+r},s.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,1,127,-128),s.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},s.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},s.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},s.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):C(this,e,t,!0),t+4},s.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||L(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),s.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},s.prototype.writeFloatLE=function(e,t,r){return D(this,e,t,!0,r)},s.prototype.writeFloatBE=function(e,t,r){return D(this,e,t,!1,r)},s.prototype.writeDoubleLE=function(e,t,r){return j(this,e,t,!0,r)},s.prototype.writeDoubleBE=function(e,t,r){return j(this,e,t,!1,r)},s.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},s.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!s.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=s.isBuffer(e)?e:q(new s(e,n).toString()),f=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%f]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function O(e){return e<16?"0"+e.toString(16):e.toString(16)}function q(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function K(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function z(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(9))},function(e,t,r){"use strict";var n=t;n.version=r(151).version,n.utils=r(152),n.rand=r(66),n.curve=r(23),n.curves=r(157),n.ec=r(165),n.eddsa=r(169)},function(e,t,r){"use strict";var n=r(39),i=r(86),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function f(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:i,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return f(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,i=arguments.length;n<i;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,function(t,i){e[i]=r&&"function"==typeof t?n(t,r):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){function r(e,t){if(!e)throw new Error(t||"Assertion failed")}e.exports=r,r.equal=function(e,t,r){if(e!=t)throw new Error(r||"Assertion failed: "+e+" != "+t)}},function(e,t,r){"use strict";var n=r(6),i=r(1);function o(e){return(e>>>24|e>>>8&65280|e<<8&16711680|(255&e)<<24)>>>0}function a(e){return 1===e.length?"0"+e:e}function f(e){return 7===e.length?"0"+e:6===e.length?"00"+e:5===e.length?"000"+e:4===e.length?"0000"+e:3===e.length?"00000"+e:2===e.length?"000000"+e:1===e.length?"0000000"+e:e}t.inherits=i,t.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"==typeof e)if(t){if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16))}else for(var n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,a=255&i;o?r.push(o,a):r.push(a)}else for(n=0;n<e.length;n++)r[n]=0|e[n];return r},t.toHex=function(e){for(var t="",r=0;r<e.length;r++)t+=a(e[r].toString(16));return t},t.htonl=o,t.toHex32=function(e,t){for(var r="",n=0;n<e.length;n++){var i=e[n];"little"===t&&(i=o(i)),r+=f(i.toString(16))}return r},t.zero2=a,t.zero8=f,t.join32=function(e,t,r,i){var o=r-t;n(o%4==0);for(var a=new Array(o/4),f=0,s=t;f<a.length;f++,s+=4){var c;c="big"===i?e[s]<<24|e[s+1]<<16|e[s+2]<<8|e[s+3]:e[s+3]<<24|e[s+2]<<16|e[s+1]<<8|e[s],a[f]=c>>>0}return a},t.split32=function(e,t){for(var r=new Array(4*e.length),n=0,i=0;n<e.length;n++,i+=4){var o=e[n];"big"===t?(r[i]=o>>>24,r[i+1]=o>>>16&255,r[i+2]=o>>>8&255,r[i+3]=255&o):(r[i+3]=o>>>24,r[i+2]=o>>>16&255,r[i+1]=o>>>8&255,r[i]=255&o)}return r},t.rotr32=function(e,t){return e>>>t|e<<32-t},t.rotl32=function(e,t){return e<<t|e>>>32-t},t.sum32=function(e,t){return e+t>>>0},t.sum32_3=function(e,t,r){return e+t+r>>>0},t.sum32_4=function(e,t,r,n){return e+t+r+n>>>0},t.sum32_5=function(e,t,r,n,i){return e+t+r+n+i>>>0},t.sum64=function(e,t,r,n){var i=e[t],o=n+e[t+1]>>>0,a=(o<n?1:0)+r+i;e[t]=a>>>0,e[t+1]=o},t.sum64_hi=function(e,t,r,n){return(t+n>>>0<t?1:0)+e+r>>>0},t.sum64_lo=function(e,t,r,n){return t+n>>>0},t.sum64_4_hi=function(e,t,r,n,i,o,a,f){var s=0,c=t;return s+=(c=c+n>>>0)<t?1:0,s+=(c=c+o>>>0)<o?1:0,e+r+i+a+(s+=(c=c+f>>>0)<f?1:0)>>>0},t.sum64_4_lo=function(e,t,r,n,i,o,a,f){return t+n+o+f>>>0},t.sum64_5_hi=function(e,t,r,n,i,o,a,f,s,c){var u=0,h=t;return u+=(h=h+n>>>0)<t?1:0,u+=(h=h+o>>>0)<o?1:0,u+=(h=h+f>>>0)<f?1:0,e+r+i+a+s+(u+=(h=h+c>>>0)<c?1:0)>>>0},t.sum64_5_lo=function(e,t,r,n,i,o,a,f,s,c){return t+n+o+f+c>>>0},t.rotr64_hi=function(e,t,r){return(t<<32-r|e>>>r)>>>0},t.rotr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0},t.shr64_hi=function(e,t,r){return e>>>r},t.shr64_lo=function(e,t,r){return(e<<32-r|t>>>r)>>>0}},function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function f(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var s,c=[],u=!1,h=-1;function d(){u&&s&&(u=!1,s.length?c=s.concat(c):h=-1,c.length&&l())}function l(){if(!u){var e=f(d);u=!0;for(var t=c.length;t;){for(s=c,c=[];++h<t;)s&&s[h].run();h=-1,t=c.length}s=null,u=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function b(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||u||f(l)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(0).Buffer,i=r(27).Transform,o=r(31).StringDecoder;function a(e){i.call(this),this.hashMode="string"==typeof e,this.hashMode?this[e]=this._finalOrDigest:this.final=this._finalOrDigest,this._final&&(this.__final=this._final,this._final=null),this._decoder=null,this._encoding=null}r(1)(a,i),a.prototype.update=function(e,t,r){"string"==typeof e&&(e=n.from(e,t));var i=this._update(e);return this.hashMode?this:(r&&(i=this._toString(i,r)),i)},a.prototype.setAutoPadding=function(){},a.prototype.getAuthTag=function(){throw new Error("trying to get auth tag in unsupported state")},a.prototype.setAuthTag=function(){throw new Error("trying to set auth tag in unsupported state")},a.prototype.setAAD=function(){throw new Error("trying to set aad in unsupported state")},a.prototype._transform=function(e,t,r){var n;try{this.hashMode?this._update(e):this.push(this._update(e))}catch(e){n=e}finally{r(n)}},a.prototype._flush=function(e){var t;try{this.push(this.__final())}catch(e){t=e}e(t)},a.prototype._finalOrDigest=function(e){var t=this.__final()||n.alloc(0);return e&&(t=this._toString(t,e,!0)),t},a.prototype._toString=function(e,t,r){if(this._decoder||(this._decoder=new o(t),this._encoding=t),this._encoding!==t)throw new Error("can't switch encodings");var n=this._decoder.write(e);return r&&(n+=this._decoder.end()),n},e.exports=a},function(e,t,r){"use strict";var n=r(20),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=h;var o=r(15);o.inherits=r(1);var a=r(46),f=r(30);o.inherits(h,a);for(var s=i(f.prototype),c=0;c<s.length;c++){var u=s[c];h.prototype[u]||(h.prototype[u]=f.prototype[u])}function h(e){if(!(this instanceof h))return new h(e);a.call(this,e),f.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||n.nextTick(l,this)}function l(e){e.end()}Object.defineProperty(h.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),h.prototype._destroy=function(e,t){this.push(null),this.end(),n.nextTick(t,e)}},function(e,t,r){"use strict";(function(t,n){var i=r(0).Buffer,o=t.crypto||t.msCrypto;o&&o.getRandomValues?e.exports=function(e,r){if(e>65536)throw new Error("requested too many random bytes");var a=new t.Uint8Array(e);e>0&&o.getRandomValues(a);var f=i.from(a.buffer);if("function"==typeof r)return n.nextTick(function(){r(null,f)});return f}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}}).call(this,r(9),r(8))},function(e,t,r){"use strict";var n=r(1),i=r(26),o=r(32),a=r(33),f=r(10);function s(e){f.call(this,"digest"),this._hash=e}n(s,f),s.prototype._update=function(e){this._hash.update(e)},s.prototype._final=function(){return this._hash.digest()},e.exports=function(e){return"md5"===(e=e.toLowerCase())?new i:"rmd160"===e||"ripemd160"===e?new o:new s(a(e))}},function(e,t,r){var n=r(0).Buffer;function i(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}i.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var r=this._block,i=this._blockSize,o=e.length,a=this._len,f=0;f<o;){for(var s=a%i,c=Math.min(o-f,i-s),u=0;u<c;u++)r[s+u]=e[f+u];f+=c,(a+=c)%i==0&&this._update(r)}return this._len+=o,this},i.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,i=(r-n)/4294967296;this._block.writeUInt32BE(i,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var o=this._hash();return e?o.toString(e):o},i.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=i},function(e,t,r){(function(e){function r(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===r(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===r(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===r(e)},t.isError=function(e){return"[object Error]"===r(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,r(3).Buffer)},function(e,t,r){(function(t){e.exports=function(e,r){for(var n=Math.min(e.length,r.length),i=new t(n),o=0;o<n;++o)i[o]=e[o]^r[o];return i}}).call(this,r(3).Buffer)},function(e,t,r){"use strict";var n=r(7),i=r(6);function o(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}t.BlockHash=o,o.prototype.update=function(e,t){if(e=n.toArray(e,t),this.pending?this.pending=this.pending.concat(e):this.pending=e,this.pendingTotal+=e.length,this.pending.length>=this._delta8){var r=(e=this.pending).length%this._delta8;this.pending=e.slice(e.length-r,e.length),0===this.pending.length&&(this.pending=null),e=n.join32(e,0,e.length-r,this.endian);for(var i=0;i<e.length;i+=this._delta32)this._update(e,i,i+this._delta32)}return this},o.prototype.digest=function(e){return this.update(this._pad()),i(null===this.pending),this._digest(e)},o.prototype._pad=function(){var e=this.pendingTotal,t=this._delta8,r=t-(e+this.padLength)%t,n=new Array(r+this.padLength);n[0]=128;for(var i=1;i<r;i++)n[i]=0;if(e<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)n[i++]=0;n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=e>>>24&255,n[i++]=e>>>16&255,n[i++]=e>>>8&255,n[i++]=255&e}else for(n[i++]=255&e,n[i++]=e>>>8&255,n[i++]=e>>>16&255,n[i++]=e>>>24&255,n[i++]=0,n[i++]=0,n[i++]=0,n[i++]=0,o=8;o<this.padLength;o++)n[i++]=0;return n}},function(e,t,r){var n=t;n.bignum=r(2),n.define=r(173).define,n.base=r(19),n.constants=r(72),n.decoders=r(179),n.encoders=r(181)},function(e,t,r){var n=t;n.Reporter=r(176).Reporter,n.DecoderBuffer=r(71).DecoderBuffer,n.EncoderBuffer=r(71).EncoderBuffer,n.Node=r(177)},function(e,t,r){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,r,n,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var o,a,f=arguments.length;switch(f){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,r)});case 3:return t.nextTick(function(){e.call(null,r,n)});case 4:return t.nextTick(function(){e.call(null,r,n,i)});default:for(o=new Array(f-1),a=0;a<o.length;)o[a++]=arguments[a];return t.nextTick(function(){e.apply(null,o)})}}}:e.exports=t}).call(this,r(8))},function(e,t,r){var n=r(0).Buffer;function i(e){n.isBuffer(e)||(e=n.from(e));for(var t=e.length/4|0,r=new Array(t),i=0;i<t;i++)r[i]=e.readUInt32BE(4*i);return r}function o(e){for(;0<e.length;e++)e[0]=0}function a(e,t,r,n,i){for(var o,a,f,s,c=r[0],u=r[1],h=r[2],d=r[3],l=e[0]^t[0],p=e[1]^t[1],b=e[2]^t[2],y=e[3]^t[3],v=4,g=1;g<i;g++)o=c[l>>>24]^u[p>>>16&255]^h[b>>>8&255]^d[255&y]^t[v++],a=c[p>>>24]^u[b>>>16&255]^h[y>>>8&255]^d[255&l]^t[v++],f=c[b>>>24]^u[y>>>16&255]^h[l>>>8&255]^d[255&p]^t[v++],s=c[y>>>24]^u[l>>>16&255]^h[p>>>8&255]^d[255&b]^t[v++],l=o,p=a,b=f,y=s;return o=(n[l>>>24]<<24|n[p>>>16&255]<<16|n[b>>>8&255]<<8|n[255&y])^t[v++],a=(n[p>>>24]<<24|n[b>>>16&255]<<16|n[y>>>8&255]<<8|n[255&l])^t[v++],f=(n[b>>>24]<<24|n[y>>>16&255]<<16|n[l>>>8&255]<<8|n[255&p])^t[v++],s=(n[y>>>24]<<24|n[l>>>16&255]<<16|n[p>>>8&255]<<8|n[255&b])^t[v++],[o>>>=0,a>>>=0,f>>>=0,s>>>=0]}var f=[0,1,2,4,8,16,32,64,128,27,54],s=function(){for(var e=new Array(256),t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;for(var r=[],n=[],i=[[],[],[],[]],o=[[],[],[],[]],a=0,f=0,s=0;s<256;++s){var c=f^f<<1^f<<2^f<<3^f<<4;c=c>>>8^255&c^99,r[a]=c,n[c]=a;var u=e[a],h=e[u],d=e[h],l=257*e[c]^16843008*c;i[0][a]=l<<24|l>>>8,i[1][a]=l<<16|l>>>16,i[2][a]=l<<8|l>>>24,i[3][a]=l,l=16843009*d^65537*h^257*u^16843008*a,o[0][c]=l<<24|l>>>8,o[1][c]=l<<16|l>>>16,o[2][c]=l<<8|l>>>24,o[3][c]=l,0===a?a=f=1:(a=u^e[e[e[d^u]]],f^=e[e[f]])}return{SBOX:r,INV_SBOX:n,SUB_MIX:i,INV_SUB_MIX:o}}();function c(e){this._key=i(e),this._reset()}c.blockSize=16,c.keySize=32,c.prototype.blockSize=c.blockSize,c.prototype.keySize=c.keySize,c.prototype._reset=function(){for(var e=this._key,t=e.length,r=t+6,n=4*(r+1),i=[],o=0;o<t;o++)i[o]=e[o];for(o=t;o<n;o++){var a=i[o-1];o%t==0?(a=a<<8|a>>>24,a=s.SBOX[a>>>24]<<24|s.SBOX[a>>>16&255]<<16|s.SBOX[a>>>8&255]<<8|s.SBOX[255&a],a^=f[o/t|0]<<24):t>6&&o%t==4&&(a=s.SBOX[a>>>24]<<24|s.SBOX[a>>>16&255]<<16|s.SBOX[a>>>8&255]<<8|s.SBOX[255&a]),i[o]=i[o-t]^a}for(var c=[],u=0;u<n;u++){var h=n-u,d=i[h-(u%4?0:4)];c[u]=u<4||h<=4?d:s.INV_SUB_MIX[0][s.SBOX[d>>>24]]^s.INV_SUB_MIX[1][s.SBOX[d>>>16&255]]^s.INV_SUB_MIX[2][s.SBOX[d>>>8&255]]^s.INV_SUB_MIX[3][s.SBOX[255&d]]}this._nRounds=r,this._keySchedule=i,this._invKeySchedule=c},c.prototype.encryptBlockRaw=function(e){return a(e=i(e),this._keySchedule,s.SUB_MIX,s.SBOX,this._nRounds)},c.prototype.encryptBlock=function(e){var t=this.encryptBlockRaw(e),r=n.allocUnsafe(16);return r.writeUInt32BE(t[0],0),r.writeUInt32BE(t[1],4),r.writeUInt32BE(t[2],8),r.writeUInt32BE(t[3],12),r},c.prototype.decryptBlock=function(e){var t=(e=i(e))[1];e[1]=e[3],e[3]=t;var r=a(e,this._invKeySchedule,s.INV_SUB_MIX,s.INV_SBOX,this._nRounds),o=n.allocUnsafe(16);return o.writeUInt32BE(r[0],0),o.writeUInt32BE(r[3],4),o.writeUInt32BE(r[2],8),o.writeUInt32BE(r[1],12),o},c.prototype.scrub=function(){o(this._keySchedule),o(this._invKeySchedule),o(this._key)},e.exports.AES=c},function(e,t,r){var n=r(0).Buffer,i=r(26);e.exports=function(e,t,r,o){if(n.isBuffer(e)||(e=n.from(e,"binary")),t&&(n.isBuffer(t)||(t=n.from(t,"binary")),8!==t.length))throw new RangeError("salt should be Buffer with 8 byte length");for(var a=r/8,f=n.alloc(a),s=n.alloc(o||0),c=n.alloc(0);a>0||o>0;){var u=new i;u.update(c),u.update(e),t&&u.update(t),c=u.digest();var h=0;if(a>0){var d=f.length-a;h=Math.min(a,c.length),c.copy(f,d,0,h),a-=h}if(h<c.length&&o>0){var l=s.length-o,p=Math.min(o,c.length-h);c.copy(s,l,h,h+p),o-=p}}return c.fill(0),{key:f,iv:s}}},function(e,t,r){"use strict";var n=t;n.base=r(153),n.short=r(154),n.mont=r(155),n.edwards=r(156)},function(e,t,r){(function(t){var n=r(172),i=r(184),o=r(185),a=r(35),f=r(55);function s(e){var r;"object"!=typeof e||t.isBuffer(e)||(r=e.passphrase,e=e.key),"string"==typeof e&&(e=new t(e));var s,c,u=o(e,r),h=u.tag,d=u.data;switch(h){case"CERTIFICATE":c=n.certificate.decode(d,"der").tbsCertificate.subjectPublicKeyInfo;case"PUBLIC KEY":switch(c||(c=n.PublicKey.decode(d,"der")),s=c.algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPublicKey.decode(c.subjectPublicKey.data,"der");case"1.2.840.10045.2.1":return c.subjectPrivateKey=c.subjectPublicKey,{type:"ec",data:c};case"1.2.840.10040.4.1":return c.algorithm.params.pub_key=n.DSAparam.decode(c.subjectPublicKey.data,"der"),{type:"dsa",data:c.algorithm.params};default:throw new Error("unknown key id "+s)}throw new Error("unknown key type "+h);case"ENCRYPTED PRIVATE KEY":d=function(e,r){var n=e.algorithm.decrypt.kde.kdeparams.salt,o=parseInt(e.algorithm.decrypt.kde.kdeparams.iters.toString(),10),s=i[e.algorithm.decrypt.cipher.algo.join(".")],c=e.algorithm.decrypt.cipher.iv,u=e.subjectPrivateKey,h=parseInt(s.split("-")[1],10)/8,d=f.pbkdf2Sync(r,n,o,h),l=a.createDecipheriv(s,d,c),p=[];return p.push(l.update(u)),p.push(l.final()),t.concat(p)}(d=n.EncryptedPrivateKey.decode(d,"der"),r);case"PRIVATE KEY":switch(s=(c=n.PrivateKey.decode(d,"der")).algorithm.algorithm.join(".")){case"1.2.840.113549.1.1.1":return n.RSAPrivateKey.decode(c.subjectPrivateKey,"der");case"1.2.840.10045.2.1":return{curve:c.algorithm.curve,privateKey:n.ECPrivateKey.decode(c.subjectPrivateKey,"der").privateKey};case"1.2.840.10040.4.1":return c.algorithm.params.priv_key=n.DSAparam.decode(c.subjectPrivateKey,"der"),{type:"dsa",params:c.algorithm.params};default:throw new Error("unknown key id "+s)}throw new Error("unknown key type "+h);case"RSA PUBLIC KEY":return n.RSAPublicKey.decode(d,"der");case"RSA PRIVATE KEY":return n.RSAPrivateKey.decode(d,"der");case"DSA PRIVATE KEY":return{type:"dsa",params:n.DSAPrivateKey.decode(d,"der")};case"EC PRIVATE KEY":return{curve:(d=n.ECPrivateKey.decode(d,"der")).parameters.value,privateKey:d.privateKey};default:throw new Error("unknown key type "+h)}}e.exports=s,s.signature=n.signature}).call(this,r(3).Buffer)},function(e,t,r){"use strict";(function(t){var n=r(5),i=r(88),o={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var f,s={adapter:("undefined"!=typeof XMLHttpRequest?f=r(40):void 0!==t&&(f=r(40)),f),transformRequest:[function(e,t){return i(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],function(e){s.headers[e]={}}),n.forEach(["post","put","patch"],function(e){s.headers[e]=n.merge(o)}),e.exports=s}).call(this,r(8))},function(e,t,r){"use strict";var n=r(1),i=r(45),o=r(0).Buffer,a=new Array(16);function f(){i.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878}function s(e,t){return e<<t|e>>>32-t}function c(e,t,r,n,i,o,a){return s(e+(t&r|~t&n)+i+o|0,a)+t|0}function u(e,t,r,n,i,o,a){return s(e+(t&n|r&~n)+i+o|0,a)+t|0}function h(e,t,r,n,i,o,a){return s(e+(t^r^n)+i+o|0,a)+t|0}function d(e,t,r,n,i,o,a){return s(e+(r^(t|~n))+i+o|0,a)+t|0}n(f,i),f.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);var r=this._a,n=this._b,i=this._c,o=this._d;r=c(r,n,i,o,e[0],3614090360,7),o=c(o,r,n,i,e[1],3905402710,12),i=c(i,o,r,n,e[2],606105819,17),n=c(n,i,o,r,e[3],3250441966,22),r=c(r,n,i,o,e[4],4118548399,7),o=c(o,r,n,i,e[5],1200080426,12),i=c(i,o,r,n,e[6],2821735955,17),n=c(n,i,o,r,e[7],4249261313,22),r=c(r,n,i,o,e[8],1770035416,7),o=c(o,r,n,i,e[9],2336552879,12),i=c(i,o,r,n,e[10],4294925233,17),n=c(n,i,o,r,e[11],2304563134,22),r=c(r,n,i,o,e[12],1804603682,7),o=c(o,r,n,i,e[13],4254626195,12),i=c(i,o,r,n,e[14],2792965006,17),r=u(r,n=c(n,i,o,r,e[15],1236535329,22),i,o,e[1],4129170786,5),o=u(o,r,n,i,e[6],3225465664,9),i=u(i,o,r,n,e[11],643717713,14),n=u(n,i,o,r,e[0],3921069994,20),r=u(r,n,i,o,e[5],3593408605,5),o=u(o,r,n,i,e[10],38016083,9),i=u(i,o,r,n,e[15],3634488961,14),n=u(n,i,o,r,e[4],3889429448,20),r=u(r,n,i,o,e[9],568446438,5),o=u(o,r,n,i,e[14],3275163606,9),i=u(i,o,r,n,e[3],4107603335,14),n=u(n,i,o,r,e[8],1163531501,20),r=u(r,n,i,o,e[13],2850285829,5),o=u(o,r,n,i,e[2],4243563512,9),i=u(i,o,r,n,e[7],1735328473,14),r=h(r,n=u(n,i,o,r,e[12],2368359562,20),i,o,e[5],4294588738,4),o=h(o,r,n,i,e[8],2272392833,11),i=h(i,o,r,n,e[11],1839030562,16),n=h(n,i,o,r,e[14],4259657740,23),r=h(r,n,i,o,e[1],2763975236,4),o=h(o,r,n,i,e[4],1272893353,11),i=h(i,o,r,n,e[7],4139469664,16),n=h(n,i,o,r,e[10],3200236656,23),r=h(r,n,i,o,e[13],681279174,4),o=h(o,r,n,i,e[0],3936430074,11),i=h(i,o,r,n,e[3],3572445317,16),n=h(n,i,o,r,e[6],76029189,23),r=h(r,n,i,o,e[9],3654602809,4),o=h(o,r,n,i,e[12],3873151461,11),i=h(i,o,r,n,e[15],530742520,16),r=d(r,n=h(n,i,o,r,e[2],3299628645,23),i,o,e[0],4096336452,6),o=d(o,r,n,i,e[7],1126891415,10),i=d(i,o,r,n,e[14],2878612391,15),n=d(n,i,o,r,e[5],4237533241,21),r=d(r,n,i,o,e[12],1700485571,6),o=d(o,r,n,i,e[3],2399980690,10),i=d(i,o,r,n,e[10],4293915773,15),n=d(n,i,o,r,e[1],2240044497,21),r=d(r,n,i,o,e[8],1873313359,6),o=d(o,r,n,i,e[15],4264355552,10),i=d(i,o,r,n,e[6],2734768916,15),n=d(n,i,o,r,e[13],1309151649,21),r=d(r,n,i,o,e[4],4149444226,6),o=d(o,r,n,i,e[11],3174756917,10),i=d(i,o,r,n,e[2],718787259,15),n=d(n,i,o,r,e[9],3951481745,21),this._a=this._a+r|0,this._b=this._b+n|0,this._c=this._c+i|0,this._d=this._d+o|0},f.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=o.allocUnsafe(16);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e},e.exports=f},function(e,t,r){e.exports=i;var n=r(28).EventEmitter;function i(){n.call(this)}r(1)(i,n),i.Readable=r(29),i.Writable=r(115),i.Duplex=r(116),i.Transform=r(117),i.PassThrough=r(118),i.Stream=i,i.prototype.pipe=function(e,t){var r=this;function i(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",i),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",f),r.on("close",s));var a=!1;function f(){a||(a=!0,e.end())}function s(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===n.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",i),e.removeListener("drain",o),r.removeListener("end",f),r.removeListener("close",s),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e}},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function i(e){return"object"==typeof e&&null!==e}function o(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,a,f,s,c;if(this._events||(this._events={}),"error"===e&&(!this._events.error||i(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var u=new Error('Uncaught, unspecified "error" event. ('+t+")");throw u.context=t,u}if(o(r=this._events[e]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:f=Array.prototype.slice.call(arguments,1),r.apply(this,f)}else if(i(r))for(f=Array.prototype.slice.call(arguments,1),a=(c=r.slice()).length,s=0;s<a;s++)c[s].apply(this,f);return!0},r.prototype.addListener=function(e,t){var a;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?i(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,i(this._events[e])&&!this._events[e].warned&&(a=o(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&a>0&&this._events[e].length>a&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!n(t))throw TypeError("listener must be a function");var r=!1;function i(){this.removeListener(e,i),r||(r=!0,t.apply(this,arguments))}return i.listener=t,this.on(e,i),this},r.prototype.removeListener=function(e,t){var r,o,a,f;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(a=(r=this._events[e]).length,o=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(i(r)){for(f=a;f-- >0;)if(r[f]===t||r[f].listener&&r[f].listener===t){o=f;break}if(o<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(o,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[e]))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){(t=e.exports=r(46)).Stream=t,t.Readable=t,t.Writable=r(30),t.Duplex=r(11),t.Transform=r(49),t.PassThrough=r(114)},function(e,t,r){"use strict";(function(t,n,i){var o=r(20);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;e.entry=null;for(;n;){var i=n.callback;t.pendingcb--,i(r),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var f,s=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?n:o.nextTick;g.WritableState=v;var c=r(15);c.inherits=r(1);var u={deprecate:r(113)},h=r(47),d=r(0).Buffer,l=i.Uint8Array||function(){};var p,b=r(48);function y(){}function v(e,t){f=f||r(11),e=e||{};var n=t instanceof f;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var h=!1===e.decodeStrings;this.decodeStrings=!h,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(o.nextTick(i,n),o.nextTick(A,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),A(e,t))}(e,r,n,t,i);else{var a=E(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||w(e,r),n?s(_,e,r,a,i):_(e,r,a,i)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function g(e){if(f=f||r(11),!(p.call(g,this)||this instanceof f))return new g(e);this._writableState=new v(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),h.call(this)}function m(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function _(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),A(e,t)}function w(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),o=t.corkedRequestsFree;o.entry=r;for(var f=0,s=!0;r;)i[f]=r,r.isBuf||(s=!1),r=r.next,f+=1;i.allBuffers=s,m(e,t,!0,t.length,i,"",o.finish),t.pendingcb++,t.lastBufferedRequest=null,o.next?(t.corkedRequestsFree=o.next,o.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;r;){var c=r.chunk,u=r.encoding,h=r.callback;if(m(e,t,!1,t.objectMode?1:c.length,c,u,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function S(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),A(e,t)})}function A(e,t){var r=E(t);return r&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,o.nextTick(S,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(g,h),v.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(v.prototype,"buffer",{get:u.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(p=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!p.call(this,e)||this===g&&(e&&e._writableState instanceof v)}})):p=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,r){var n,i=this._writableState,a=!1,f=!i.objectMode&&(n=e,d.isBuffer(n)||n instanceof l);return f&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(r=t,t=null),f?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=y),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),o.nextTick(t,r)}(this,r):(f||function(e,t,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),o.nextTick(n,a),i=!1),i}(this,i,e,r))&&(i.pendingcb++,a=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,r));return t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var f=t.objectMode?1:n.length;t.length+=f;var s=t.length<t.highWaterMark;s||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else m(e,t,!1,f,n,i,o);return s}(this,i,f,e,t,r)),a},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,A(e,t),r&&(t.finished?o.nextTick(r):e.once("finish",r));t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=b.destroy,g.prototype._undestroy=b.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,r(8),r(111).setImmediate,r(9))},function(e,t,r){"use strict";var n=r(0).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=s,this.end=c,t=4;break;case"utf8":this.fillLast=f,t=4;break;case"base64":this.text=u,this.end=h,t=3;break;default:return this.write=d,void(this.end=l)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function f(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function s(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function l(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){"use strict";var n=r(3).Buffer,i=r(1),o=r(45),a=new Array(16),f=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],s=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],c=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],u=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],h=[0,1518500249,1859775393,2400959708,2840853838],d=[1352829926,1548603684,1836072691,2053994217,0];function l(){o.call(this,64),this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520}function p(e,t){return e<<t|e>>>32-t}function b(e,t,r,n,i,o,a,f){return p(e+(t^r^n)+o+a|0,f)+i|0}function y(e,t,r,n,i,o,a,f){return p(e+(t&r|~t&n)+o+a|0,f)+i|0}function v(e,t,r,n,i,o,a,f){return p(e+((t|~r)^n)+o+a|0,f)+i|0}function g(e,t,r,n,i,o,a,f){return p(e+(t&n|r&~n)+o+a|0,f)+i|0}function m(e,t,r,n,i,o,a,f){return p(e+(t^(r|~n))+o+a|0,f)+i|0}i(l,o),l.prototype._update=function(){for(var e=a,t=0;t<16;++t)e[t]=this._block.readInt32LE(4*t);for(var r=0|this._a,n=0|this._b,i=0|this._c,o=0|this._d,l=0|this._e,_=0|this._a,w=0|this._b,E=0|this._c,S=0|this._d,A=0|this._e,I=0;I<80;I+=1){var M,k;I<16?(M=b(r,n,i,o,l,e[f[I]],h[0],c[I]),k=m(_,w,E,S,A,e[s[I]],d[0],u[I])):I<32?(M=y(r,n,i,o,l,e[f[I]],h[1],c[I]),k=g(_,w,E,S,A,e[s[I]],d[1],u[I])):I<48?(M=v(r,n,i,o,l,e[f[I]],h[2],c[I]),k=v(_,w,E,S,A,e[s[I]],d[2],u[I])):I<64?(M=g(r,n,i,o,l,e[f[I]],h[3],c[I]),k=y(_,w,E,S,A,e[s[I]],d[3],u[I])):(M=m(r,n,i,o,l,e[f[I]],h[4],c[I]),k=b(_,w,E,S,A,e[s[I]],d[4],u[I])),r=l,l=o,o=p(i,10),i=n,n=M,_=A,A=S,S=p(E,10),E=w,w=k}var x=this._b+i+S|0;this._b=this._c+o+A|0,this._c=this._d+l+_|0,this._d=this._e+r+w|0,this._e=this._a+n+E|0,this._a=x},l.prototype._digest=function(){this._block[this._blockOffset++]=128,this._blockOffset>56&&(this._block.fill(0,this._blockOffset,64),this._update(),this._blockOffset=0),this._block.fill(0,this._blockOffset,56),this._block.writeUInt32LE(this._length[0],56),this._block.writeUInt32LE(this._length[1],60),this._update();var e=n.alloc?n.alloc(20):new n(20);return e.writeInt32LE(this._a,0),e.writeInt32LE(this._b,4),e.writeInt32LE(this._c,8),e.writeInt32LE(this._d,12),e.writeInt32LE(this._e,16),e},e.exports=l},function(e,t,r){(t=e.exports=function(e){e=e.toLowerCase();var r=t[e];if(!r)throw new Error(e+" is not supported (we accept pull requests)");return new r}).sha=r(119),t.sha1=r(120),t.sha224=r(121),t.sha256=r(50),t.sha384=r(122),t.sha512=r(51)},function(e,t,r){"use strict";t.utils=r(128),t.Cipher=r(129),t.DES=r(130),t.CBC=r(131),t.EDE=r(132)},function(e,t,r){var n=r(133),i=r(141),o=r(61);t.createCipher=t.Cipher=n.createCipher,t.createCipheriv=t.Cipheriv=n.createCipheriv,t.createDecipher=t.Decipher=i.createDecipher,t.createDecipheriv=t.Decipheriv=i.createDecipheriv,t.listCiphers=t.getCiphers=function(){return Object.keys(o)}},function(e,t,r){var n={ECB:r(134),CBC:r(135),CFB:r(136),CFB8:r(137),CFB1:r(138),OFB:r(139),CTR:r(59),GCM:r(59)},i=r(61);for(var o in i)i[o].module=n[i[o].mode];e.exports=i},function(e,t,r){(function(t){var n=r(2),i=r(12);function o(e,r){var i=function(e){var t=a(e);return{blinder:t.toRed(n.mont(e.modulus)).redPow(new n(e.publicExponent)).fromRed(),unblinder:t.invm(e.modulus)}}(r),o=r.modulus.byteLength(),f=(n.mont(r.modulus),new n(e).mul(i.blinder).umod(r.modulus)),s=f.toRed(n.mont(r.prime1)),c=f.toRed(n.mont(r.prime2)),u=r.coefficient,h=r.prime1,d=r.prime2,l=s.redPow(r.exponent1),p=c.redPow(r.exponent2);l=l.fromRed(),p=p.fromRed();var b=l.isub(p).imul(u).umod(h);return b.imul(d),p.iadd(b),new t(p.imul(i.unblinder).umod(r.modulus).toArray(!1,o))}function a(e){for(var t=e.modulus.byteLength(),r=new n(i(t));r.cmp(e.modulus)>=0||!r.umod(e.prime1)||!r.umod(e.prime2);)r=new n(i(t));return r}e.exports=o,o.getr=a}).call(this,r(3).Buffer)},function(e,t,r){var n=t;n.utils=r(7),n.common=r(17),n.sha=r(158),n.ripemd=r(162),n.hmac=r(163),n.sha1=n.sha.sha1,n.sha256=n.sha.sha256,n.sha224=n.sha.sha224,n.sha384=n.sha.sha384,n.sha512=n.sha.sha512,n.ripemd160=n.ripemd.ripemd160},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(5),i=r(89),o=r(91),a=r(92),f=r(93),s=r(41),c="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||r(94);e.exports=function(e){return new Promise(function(t,u){var h=e.data,d=e.headers;n.isFormData(h)&&delete d["Content-Type"];var l=new XMLHttpRequest,p="onreadystatechange",b=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in l||f(e.url)||(l=new window.XDomainRequest,p="onload",b=!0,l.onprogress=function(){},l.ontimeout=function(){}),e.auth){var y=e.auth.username||"",v=e.auth.password||"";d.Authorization="Basic "+c(y+":"+v)}if(l.open(e.method.toUpperCase(),o(e.url,e.params,e.paramsSerializer),!0),l.timeout=e.timeout,l[p]=function(){if(l&&(4===l.readyState||b)&&(0!==l.status||l.responseURL&&0===l.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in l?a(l.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?l.response:l.responseText,status:1223===l.status?204:l.status,statusText:1223===l.status?"No Content":l.statusText,headers:r,config:e,request:l};i(t,u,n),l=null}},l.onerror=function(){u(s("Network Error",e,null,l)),l=null},l.ontimeout=function(){u(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",l)),l=null},n.isStandardBrowserEnv()){var g=r(95),m=(e.withCredentials||f(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;m&&(d[e.xsrfHeaderName]=m)}if("setRequestHeader"in l&&n.forEach(d,function(e,t){void 0===h&&"content-type"===t.toLowerCase()?delete d[t]:l.setRequestHeader(t,e)}),e.withCredentials&&(l.withCredentials=!0),e.responseType)try{l.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&l.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&l.upload&&l.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){l&&(l.abort(),u(e),l=null)}),void 0===h&&(h=null),l.send(h)})}},function(e,t,r){"use strict";var n=r(90);e.exports=function(e,t,r,i,o){var a=new Error(e);return n(a,t,r,i,o)}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(27).Transform;function o(e){i.call(this),this._block=n.allocUnsafe(e),this._blockSize=e,this._blockOffset=0,this._length=[0,0,0,0],this._finalized=!1}r(1)(o,i),o.prototype._transform=function(e,t,r){var n=null;try{this.update(e,t)}catch(e){n=e}r(n)},o.prototype._flush=function(e){var t=null;try{this.push(this.digest())}catch(e){t=e}e(t)},o.prototype.update=function(e,t){if(function(e,t){if(!n.isBuffer(e)&&"string"!=typeof e)throw new TypeError(t+" must be a string or a buffer")}(e,"Data"),this._finalized)throw new Error("Digest already called");n.isBuffer(e)||(e=n.from(e,t));for(var r=this._block,i=0;this._blockOffset+e.length-i>=this._blockSize;){for(var o=this._blockOffset;o<this._blockSize;)r[o++]=e[i++];this._update(),this._blockOffset=0}for(;i<e.length;)r[this._blockOffset++]=e[i++];for(var a=0,f=8*e.length;f>0;++a)this._length[a]+=f,(f=this._length[a]/4294967296|0)>0&&(this._length[a]-=4294967296*f);return this},o.prototype._update=function(){throw new Error("_update is not implemented")},o.prototype.digest=function(e){if(this._finalized)throw new Error("Digest already called");this._finalized=!0;var t=this._digest();void 0!==e&&(t=t.toString(e)),this._block.fill(0),this._blockOffset=0;for(var r=0;r<4;++r)this._length[r]=0;return t},o.prototype._digest=function(){throw new Error("_digest is not implemented")},e.exports=o},function(e,t,r){"use strict";(function(t,n){var i=r(20);e.exports=m;var o,a=r(44);m.ReadableState=g;r(28).EventEmitter;var f=function(e,t){return e.listeners(t).length},s=r(47),c=r(0).Buffer,u=t.Uint8Array||function(){};var h=r(15);h.inherits=r(1);var d=r(108),l=void 0;l=d&&d.debuglog?d.debuglog("stream"):function(){};var p,b=r(109),y=r(48);h.inherits(m,s);var v=["error","close","destroy","pause","resume"];function g(e,t){e=e||{};var n=t instanceof(o=o||r(11));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var i=e.highWaterMark,a=e.readableHighWaterMark,f=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(a||0===a)?a:f,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new b,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(p||(p=r(31).StringDecoder),this.decoder=new p(e.encoding),this.encoding=e.encoding)}function m(e){if(o=o||r(11),!(this instanceof m))return new m(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function _(e,t,r,n,i){var o,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,A(e)}(e,a)):(i||(o=function(e,t){var r;n=t,c.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk"));var n;return r}(a,t)),o?e.emit("error",o):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):w(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?w(e,a,t,!1):M(e,a)):w(e,a,t,!1))):n||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function w(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&A(e)),M(e,t)}Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),m.prototype.destroy=y.destroy,m.prototype._undestroy=y.undestroy,m.prototype._destroy=function(e,t){this.push(null),t(e)},m.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),_(this,e,t,!1,r)},m.prototype.unshift=function(e){return _(this,e,null,!0,!1)},m.prototype.isPaused=function(){return!1===this._readableState.flowing},m.prototype.setEncoding=function(e){return p||(p=r(31).StringDecoder),this._readableState.decoder=new p(e),this._readableState.encoding=e,this};var E=8388608;function S(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=E?e=E:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function A(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(l("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?i.nextTick(I,e):I(e))}function I(e){l("emit readable"),e.emit("readable"),T(e)}function M(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(k,e,t))}function k(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(l("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function x(e){l("readable nexttick read 0"),e.read(0)}function B(e,t){t.reading||(l("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),T(e),t.flowing&&!t.reading&&e.read(0)}function T(e){var t=e._readableState;for(l("flow",t.flowing);t.flowing&&null!==e.read(););}function R(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;e-=i.length;for(;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0===(e-=a)){a===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=c.allocUnsafe(e),n=t.head,i=1;n.data.copy(r),e-=n.data.length;for(;n=n.next;){var o=n.data,a=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,a),0===(e-=a)){a===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(a));break}++i}return t.length-=i,r}(e,t);return n}(e,t.buffer,t.decoder),r);var r}function L(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,i.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function C(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}m.prototype.read=function(e){l("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return l("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?L(this):A(this),null;if(0===(e=S(e,t))&&t.ended)return 0===t.length&&L(this),null;var n,i=t.needReadable;return l("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&l("length less than watermark",i=!0),t.ended||t.reading?l("reading or ended",i=!1):i&&(l("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=S(r,t))),null===(n=e>0?R(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&L(this)),null!==n&&this.emit("data",n),n},m.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},m.prototype.pipe=function(e,t){var r=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,l("pipe count=%d opts=%j",o.pipesCount,t);var s=(!t||!1!==t.end)&&e!==n.stdout&&e!==n.stderr?u:m;function c(t,n){l("onunpipe"),t===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,l("cleanup"),e.removeListener("close",v),e.removeListener("finish",g),e.removeListener("drain",h),e.removeListener("error",y),e.removeListener("unpipe",c),r.removeListener("end",u),r.removeListener("end",m),r.removeListener("data",b),d=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||h())}function u(){l("onend"),e.end()}o.endEmitted?i.nextTick(s):r.once("end",s),e.on("unpipe",c);var h=function(e){return function(){var t=e._readableState;l("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&f(e,"data")&&(t.flowing=!0,T(e))}}(r);e.on("drain",h);var d=!1;var p=!1;function b(t){l("ondata"),p=!1,!1!==e.write(t)||p||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==C(o.pipes,e))&&!d&&(l("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,p=!0),r.pause())}function y(t){l("onerror",t),m(),e.removeListener("error",y),0===f(e,"error")&&e.emit("error",t)}function v(){e.removeListener("finish",g),m()}function g(){l("onfinish"),e.removeListener("close",v),m()}function m(){l("unpipe"),r.unpipe(e)}return r.on("data",b),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",y),e.once("close",v),e.once("finish",g),e.emit("pipe",r),o.flowing||(l("pipe resume"),r.resume()),e},m.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=C(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},m.prototype.on=function(e,t){var r=s.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&A(this):i.nextTick(x,this))}return r},m.prototype.addListener=m.prototype.on,m.prototype.resume=function(){var e=this._readableState;return e.flowing||(l("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(B,e,t))}(this,e)),this},m.prototype.pause=function(){return l("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(l("pause"),this._readableState.flowing=!1,this.emit("pause")),this},m.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(l("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){(l("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i)||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<v.length;o++)e.on(v[o],this.emit.bind(this,v[o]));return this._read=function(t){l("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(m.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),m._fromList=R}).call(this,r(9),r(8))},function(e,t,r){e.exports=r(28).EventEmitter},function(e,t,r){"use strict";var n=r(20);function i(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,o=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return o||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||n.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(n.nextTick(i,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,r){"use strict";e.exports=o;var n=r(11),i=r(15);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e),this._transformState={afterTransform:function(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){f(e,t,r)}):f(this,null,null)}function f(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=r(1),i.inherits(o,n),o.prototype.push=function(e,t){return this._transformState.needTransform=!1,n.prototype.push.call(this,e,t)},o.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},o.prototype._destroy=function(e,t){var r=this;n.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})}},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],f=new Array(64);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function d(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function l(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}n(s,i),s.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,f=0|this._d,s=0|this._e,p=0|this._f,b=0|this._g,y=0|this._h,v=0;v<16;++v)r[v]=e.readInt32BE(4*v);for(;v<64;++v)r[v]=0|(((t=r[v-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+r[v-7]+l(r[v-15])+r[v-16];for(var g=0;g<64;++g){var m=y+d(s)+c(s,p,b)+a[g]+r[g]|0,_=h(n)+u(n,i,o)|0;y=b,b=p,p=s,s=f+m|0,f=o,o=i,i=n,n=m+_|0}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0,this._f=p+this._f|0,this._g=b+this._g|0,this._h=y+this._h|0},s.prototype._hash=function(){var e=o.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=s},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],f=new Array(160);function s(){this.init(),this._w=f,i.call(this,128,112)}function c(e,t,r){return r^e&(t^r)}function u(e,t,r){return e&t|r&(e|t)}function h(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function d(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function l(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function p(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function b(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function v(e,t){return e>>>0<t>>>0?1:0}n(s,i),s.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},s.prototype._update=function(e){for(var t=this._w,r=0|this._ah,n=0|this._bh,i=0|this._ch,o=0|this._dh,f=0|this._eh,s=0|this._fh,g=0|this._gh,m=0|this._hh,_=0|this._al,w=0|this._bl,E=0|this._cl,S=0|this._dl,A=0|this._el,I=0|this._fl,M=0|this._gl,k=0|this._hl,x=0;x<32;x+=2)t[x]=e.readInt32BE(4*x),t[x+1]=e.readInt32BE(4*x+4);for(;x<160;x+=2){var B=t[x-30],T=t[x-30+1],R=l(B,T),L=p(T,B),P=b(B=t[x-4],T=t[x-4+1]),C=y(T,B),N=t[x-14],D=t[x-14+1],j=t[x-32],U=t[x-32+1],O=L+D|0,q=R+N+v(O,L)|0;q=(q=q+P+v(O=O+C|0,C)|0)+j+v(O=O+U|0,U)|0,t[x]=q,t[x+1]=O}for(var K=0;K<160;K+=2){q=t[K],O=t[K+1];var z=u(r,n,i),V=u(_,w,E),Y=h(r,_),F=h(_,r),H=d(f,A),G=d(A,f),W=a[K],X=a[K+1],Z=c(f,s,g),J=c(A,I,M),$=k+G|0,Q=m+H+v($,k)|0;Q=(Q=(Q=Q+Z+v($=$+J|0,J)|0)+W+v($=$+X|0,X)|0)+q+v($=$+O|0,O)|0;var ee=F+V|0,te=Y+z+v(ee,F)|0;m=g,k=M,g=s,M=I,s=f,I=A,f=o+Q+v(A=S+$|0,S)|0,o=i,S=E,i=n,E=w,n=r,w=_,r=Q+te+v(_=$+ee|0,$)|0}this._al=this._al+_|0,this._bl=this._bl+w|0,this._cl=this._cl+E|0,this._dl=this._dl+S|0,this._el=this._el+A|0,this._fl=this._fl+I|0,this._gl=this._gl+M|0,this._hl=this._hl+k|0,this._ah=this._ah+r+v(this._al,_)|0,this._bh=this._bh+n+v(this._bl,w)|0,this._ch=this._ch+i+v(this._cl,E)|0,this._dh=this._dh+o+v(this._dl,S)|0,this._eh=this._eh+f+v(this._el,A)|0,this._fh=this._fh+s+v(this._fl,I)|0,this._gh=this._gh+g+v(this._gl,M)|0,this._hh=this._hh+m+v(this._hl,k)|0},s.prototype._hash=function(){var e=o.allocUnsafe(64);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=s},function(e,t,r){"use strict";var n=r(1),i=r(123),o=r(10),a=r(0).Buffer,f=r(53),s=r(32),c=r(33),u=a.alloc(128);function h(e,t){o.call(this,"digest"),"string"==typeof t&&(t=a.from(t));var r="sha512"===e||"sha384"===e?128:64;(this._alg=e,this._key=t,t.length>r)?t=("rmd160"===e?new s:c(e)).update(t).digest():t.length<r&&(t=a.concat([t,u],r));for(var n=this._ipad=a.allocUnsafe(r),i=this._opad=a.allocUnsafe(r),f=0;f<r;f++)n[f]=54^t[f],i[f]=92^t[f];this._hash="rmd160"===e?new s:c(e),this._hash.update(n)}n(h,o),h.prototype._update=function(e){this._hash.update(e)},h.prototype._final=function(){var e=this._hash.digest();return("rmd160"===this._alg?new s:c(this._alg)).update(this._opad).update(e).digest()},e.exports=function(e,t){return"rmd160"===(e=e.toLowerCase())||"ripemd160"===e?new h("rmd160",t):"md5"===e?new i(f,t):new h(e,t)}},function(e,t,r){var n=r(26);e.exports=function(e){return(new n).update(e).digest()}},function(e){e.exports={sha224WithRSAEncryption:{sign:"rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},"RSA-SHA224":{sign:"ecdsa/rsa",hash:"sha224",id:"302d300d06096086480165030402040500041c"},sha256WithRSAEncryption:{sign:"rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},"RSA-SHA256":{sign:"ecdsa/rsa",hash:"sha256",id:"3031300d060960864801650304020105000420"},sha384WithRSAEncryption:{sign:"rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},"RSA-SHA384":{sign:"ecdsa/rsa",hash:"sha384",id:"3041300d060960864801650304020205000430"},sha512WithRSAEncryption:{sign:"rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA512":{sign:"ecdsa/rsa",hash:"sha512",id:"3051300d060960864801650304020305000440"},"RSA-SHA1":{sign:"rsa",hash:"sha1",id:"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{sign:"ecdsa",hash:"sha1",id:""},sha256:{sign:"ecdsa",hash:"sha256",id:""},sha224:{sign:"ecdsa",hash:"sha224",id:""},sha384:{sign:"ecdsa",hash:"sha384",id:""},sha512:{sign:"ecdsa",hash:"sha512",id:""},"DSA-SHA":{sign:"dsa",hash:"sha1",id:""},"DSA-SHA1":{sign:"dsa",hash:"sha1",id:""},DSA:{sign:"dsa",hash:"sha1",id:""},"DSA-WITH-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-SHA224":{sign:"dsa",hash:"sha224",id:""},"DSA-WITH-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-SHA256":{sign:"dsa",hash:"sha256",id:""},"DSA-WITH-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-SHA384":{sign:"dsa",hash:"sha384",id:""},"DSA-WITH-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-SHA512":{sign:"dsa",hash:"sha512",id:""},"DSA-RIPEMD160":{sign:"dsa",hash:"rmd160",id:""},ripemd160WithRSA:{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},"RSA-RIPEMD160":{sign:"rsa",hash:"rmd160",id:"3021300906052b2403020105000414"},md5WithRSAEncryption:{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"},"RSA-MD5":{sign:"rsa",hash:"md5",id:"3020300c06082a864886f70d020505000410"}}},function(e,t,r){t.pbkdf2=r(125),t.pbkdf2Sync=r(58)},function(e,t,r){(function(t){var r=Math.pow(2,30)-1;function n(e,r){if("string"!=typeof e&&!t.isBuffer(e))throw new TypeError(r+" must be a buffer or string")}e.exports=function(e,t,i,o){if(n(e,"Password"),n(t,"Salt"),"number"!=typeof i)throw new TypeError("Iterations not a number");if(i<0)throw new TypeError("Bad iterations");if("number"!=typeof o)throw new TypeError("Key length not a number");if(o<0||o>r||o!=o)throw new TypeError("Bad key length")}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var r;t.browser?r="utf-8":r=parseInt(t.version.split(".")[0].slice(1),10)>=6?"utf-8":"binary";e.exports=r}).call(this,r(8))},function(e,t,r){var n=r(53),i=r(32),o=r(33),a=r(56),f=r(57),s=r(0).Buffer,c=s.alloc(128),u={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};function h(e,t,r){var a=function(e){return"rmd160"===e||"ripemd160"===e?function(e){return(new i).update(e).digest()}:"md5"===e?n:function(t){return o(e).update(t).digest()}}(e),f="sha512"===e||"sha384"===e?128:64;t.length>f?t=a(t):t.length<f&&(t=s.concat([t,c],f));for(var h=s.allocUnsafe(f+u[e]),d=s.allocUnsafe(f+u[e]),l=0;l<f;l++)h[l]=54^t[l],d[l]=92^t[l];var p=s.allocUnsafe(f+r+4);h.copy(p,0,0,f),this.ipad1=p,this.ipad2=h,this.opad=d,this.alg=e,this.blocksize=f,this.hash=a,this.size=u[e]}h.prototype.run=function(e,t){return e.copy(t,this.blocksize),this.hash(t).copy(this.opad,this.blocksize),this.hash(this.opad)},e.exports=function(e,t,r,n,i){a(e,t,r,n),s.isBuffer(e)||(e=s.from(e,f)),s.isBuffer(t)||(t=s.from(t,f));var o=new h(i=i||"sha1",e,t.length),c=s.allocUnsafe(n),d=s.allocUnsafe(t.length+4);t.copy(d,0,0,t.length);for(var l=0,p=u[i],b=Math.ceil(n/p),y=1;y<=b;y++){d.writeUInt32BE(y,t.length);for(var v=o.run(d,o.ipad1),g=v,m=1;m<r;m++){g=o.run(g,o.ipad2);for(var _=0;_<p;_++)v[_]^=g[_]}v.copy(c,l),l+=p}return c}},function(e,t,r){var n=r(16),i=r(0).Buffer,o=r(60);function a(e){var t=e._cipher.encryptBlockRaw(e._prev);return o(e._prev),t}t.encrypt=function(e,t){var r=Math.ceil(t.length/16),o=e._cache.length;e._cache=i.concat([e._cache,i.allocUnsafe(16*r)]);for(var f=0;f<r;f++){var s=a(e),c=o+16*f;e._cache.writeUInt32BE(s[0],c+0),e._cache.writeUInt32BE(s[1],c+4),e._cache.writeUInt32BE(s[2],c+8),e._cache.writeUInt32BE(s[3],c+12)}var u=e._cache.slice(0,t.length);return e._cache=e._cache.slice(t.length),n(t,u)}},function(e,t){e.exports=function(e){for(var t,r=e.length;r--;){if(255!==(t=e.readUInt8(r))){t++,e.writeUInt8(t,r);break}e.writeUInt8(0,r)}}},function(e){e.exports={"aes-128-ecb":{cipher:"AES",key:128,iv:0,mode:"ECB",type:"block"},"aes-192-ecb":{cipher:"AES",key:192,iv:0,mode:"ECB",type:"block"},"aes-256-ecb":{cipher:"AES",key:256,iv:0,mode:"ECB",type:"block"},"aes-128-cbc":{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},"aes-192-cbc":{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},"aes-256-cbc":{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},aes128:{cipher:"AES",key:128,iv:16,mode:"CBC",type:"block"},aes192:{cipher:"AES",key:192,iv:16,mode:"CBC",type:"block"},aes256:{cipher:"AES",key:256,iv:16,mode:"CBC",type:"block"},"aes-128-cfb":{cipher:"AES",key:128,iv:16,mode:"CFB",type:"stream"},"aes-192-cfb":{cipher:"AES",key:192,iv:16,mode:"CFB",type:"stream"},"aes-256-cfb":{cipher:"AES",key:256,iv:16,mode:"CFB",type:"stream"},"aes-128-cfb8":{cipher:"AES",key:128,iv:16,mode:"CFB8",type:"stream"},"aes-192-cfb8":{cipher:"AES",key:192,iv:16,mode:"CFB8",type:"stream"},"aes-256-cfb8":{cipher:"AES",key:256,iv:16,mode:"CFB8",type:"stream"},"aes-128-cfb1":{cipher:"AES",key:128,iv:16,mode:"CFB1",type:"stream"},"aes-192-cfb1":{cipher:"AES",key:192,iv:16,mode:"CFB1",type:"stream"},"aes-256-cfb1":{cipher:"AES",key:256,iv:16,mode:"CFB1",type:"stream"},"aes-128-ofb":{cipher:"AES",key:128,iv:16,mode:"OFB",type:"stream"},"aes-192-ofb":{cipher:"AES",key:192,iv:16,mode:"OFB",type:"stream"},"aes-256-ofb":{cipher:"AES",key:256,iv:16,mode:"OFB",type:"stream"},"aes-128-ctr":{cipher:"AES",key:128,iv:16,mode:"CTR",type:"stream"},"aes-192-ctr":{cipher:"AES",key:192,iv:16,mode:"CTR",type:"stream"},"aes-256-ctr":{cipher:"AES",key:256,iv:16,mode:"CTR",type:"stream"},"aes-128-gcm":{cipher:"AES",key:128,iv:12,mode:"GCM",type:"auth"},"aes-192-gcm":{cipher:"AES",key:192,iv:12,mode:"GCM",type:"auth"},"aes-256-gcm":{cipher:"AES",key:256,iv:12,mode:"GCM",type:"auth"}}},function(e,t,r){var n=r(21),i=r(0).Buffer,o=r(10),a=r(1),f=r(140),s=r(16),c=r(60);function u(e,t,r,a){o.call(this);var s=i.alloc(4,0);this._cipher=new n.AES(t);var u=this._cipher.encryptBlock(s);this._ghash=new f(u),r=function(e,t,r){if(12===t.length)return e._finID=i.concat([t,i.from([0,0,0,1])]),i.concat([t,i.from([0,0,0,2])]);var n=new f(r),o=t.length,a=o%16;n.update(t),a&&(a=16-a,n.update(i.alloc(a,0))),n.update(i.alloc(8,0));var s=8*o,u=i.alloc(8);u.writeUIntBE(s,0,8),n.update(u),e._finID=n.state;var h=i.from(e._finID);return c(h),h}(this,r,u),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=a,this._alen=0,this._len=0,this._mode=e,this._authTag=null,this._called=!1}a(u,o),u.prototype._update=function(e){if(!this._called&&this._alen){var t=16-this._alen%16;t<16&&(t=i.alloc(t,0),this._ghash.update(t))}this._called=!0;var r=this._mode.encrypt(this,e);return this._decrypt?this._ghash.update(e):this._ghash.update(r),this._len+=e.length,r},u.prototype._final=function(){if(this._decrypt&&!this._authTag)throw new Error("Unsupported state or unable to authenticate data");var e=s(this._ghash.final(8*this._alen,8*this._len),this._cipher.encryptBlock(this._finID));if(this._decrypt&&function(e,t){var r=0;e.length!==t.length&&r++;for(var n=Math.min(e.length,t.length),i=0;i<n;++i)r+=e[i]^t[i];return r}(e,this._authTag))throw new Error("Unsupported state or unable to authenticate data");this._authTag=e,this._cipher.scrub()},u.prototype.getAuthTag=function(){if(this._decrypt||!i.isBuffer(this._authTag))throw new Error("Attempting to get auth tag in unsupported state");return this._authTag},u.prototype.setAuthTag=function(e){if(!this._decrypt)throw new Error("Attempting to set auth tag in unsupported state");this._authTag=e},u.prototype.setAAD=function(e){if(this._called)throw new Error("Attempting to set AAD in unsupported state");this._ghash.update(e),this._alen+=e.length},e.exports=u},function(e,t,r){var n=r(21),i=r(0).Buffer,o=r(10);function a(e,t,r,a){o.call(this),this._cipher=new n.AES(t),this._prev=i.from(r),this._cache=i.allocUnsafe(0),this._secCache=i.allocUnsafe(0),this._decrypt=a,this._mode=e}r(1)(a,o),a.prototype._update=function(e){return this._mode.encrypt(this,e,this._decrypt)},a.prototype._final=function(){this._cipher.scrub()},e.exports=a},function(e,t,r){var n=r(12);e.exports=g,g.simpleSieve=y,g.fermatTest=v;var i=r(2),o=new i(24),a=new(r(65)),f=new i(1),s=new i(2),c=new i(5),u=(new i(16),new i(8),new i(10)),h=new i(3),d=(new i(7),new i(11)),l=new i(4),p=(new i(12),null);function b(){if(null!==p)return p;var e=[];e[0]=2;for(var t=1,r=3;r<1048576;r+=2){for(var n=Math.ceil(Math.sqrt(r)),i=0;i<t&&e[i]<=n&&r%e[i]!=0;i++);t!==i&&e[i]<=n||(e[t++]=r)}return p=e,e}function y(e){for(var t=b(),r=0;r<t.length;r++)if(0===e.modn(t[r]))return 0===e.cmpn(t[r]);return!0}function v(e){var t=i.mont(e);return 0===s.toRed(t).redPow(e.subn(1)).fromRed().cmpn(1)}function g(e,t){if(e<16)return new i(2===t||5===t?[140,123]:[140,39]);var r,p;for(t=new i(t);;){for(r=new i(n(Math.ceil(e/8)));r.bitLength()>e;)r.ishrn(1);if(r.isEven()&&r.iadd(f),r.testn(1)||r.iadd(s),t.cmp(s)){if(!t.cmp(c))for(;r.mod(u).cmp(h);)r.iadd(l)}else for(;r.mod(o).cmp(d);)r.iadd(l);if(y(p=r.shrn(1))&&y(r)&&v(p)&&v(r)&&a.test(p)&&a.test(r))return r}}},function(e,t,r){var n=r(2),i=r(66);function o(e){this.rand=e||new i.Rand}e.exports=o,o.create=function(e){return new o(e)},o.prototype._randbelow=function(e){var t=e.bitLength(),r=Math.ceil(t/8);do{var i=new n(this.rand.generate(r))}while(i.cmp(e)>=0);return i},o.prototype._randrange=function(e,t){var r=t.sub(e);return e.add(this._randbelow(r))},o.prototype.test=function(e,t,r){var i=e.bitLength(),o=n.mont(e),a=new n(1).toRed(o);t||(t=Math.max(1,i/48|0));for(var f=e.subn(1),s=0;!f.testn(s);s++);for(var c=e.shrn(s),u=f.toRed(o);t>0;t--){var h=this._randrange(new n(2),f);r&&r(h);var d=h.toRed(o).redPow(c);if(0!==d.cmp(a)&&0!==d.cmp(u)){for(var l=1;l<s;l++){if(0===(d=d.redSqr()).cmp(a))return!1;if(0===d.cmp(u))break}if(l===s)return!1}}return!0},o.prototype.getDivisor=function(e,t){var r=e.bitLength(),i=n.mont(e),o=new n(1).toRed(i);t||(t=Math.max(1,r/48|0));for(var a=e.subn(1),f=0;!a.testn(f);f++);for(var s=e.shrn(f),c=a.toRed(i);t>0;t--){var u=this._randrange(new n(2),a),h=e.gcd(u);if(0!==h.cmpn(1))return h;var d=u.toRed(i).redPow(s);if(0!==d.cmp(o)&&0!==d.cmp(c)){for(var l=1;l<f;l++){if(0===(d=d.redSqr()).cmp(o))return d.fromRed().subn(1).gcd(e);if(0===d.cmp(c))break}if(l===f)return(d=d.redSqr()).fromRed().subn(1).gcd(e)}}return!1}},function(e,t,r){var n;function i(e){this.rand=e}if(e.exports=function(e){return n||(n=new i(null)),n.generate(e)},e.exports.Rand=i,i.prototype.generate=function(e){return this._rand(e)},i.prototype._rand=function(e){if(this.rand.getBytes)return this.rand.getBytes(e);for(var t=new Uint8Array(e),r=0;r<t.length;r++)t[r]=this.rand.getByte();return t},"object"==typeof self)self.crypto&&self.crypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.crypto.getRandomValues(t),t}:self.msCrypto&&self.msCrypto.getRandomValues?i.prototype._rand=function(e){var t=new Uint8Array(e);return self.msCrypto.getRandomValues(t),t}:"object"==typeof window&&(i.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var o=r(146);if("function"!=typeof o.randomBytes)throw new Error("Not supported");i.prototype._rand=function(e){return o.randomBytes(e)}}catch(e){}},function(e,t,r){"use strict";var n=t;function i(e){return 1===e.length?"0"+e:e}function o(e){for(var t="",r=0;r<e.length;r++)t+=i(e[r].toString(16));return t}n.toArray=function(e,t){if(Array.isArray(e))return e.slice();if(!e)return[];var r=[];if("string"!=typeof e){for(var n=0;n<e.length;n++)r[n]=0|e[n];return r}if("hex"===t)for((e=e.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(e="0"+e),n=0;n<e.length;n+=2)r.push(parseInt(e[n]+e[n+1],16));else for(n=0;n<e.length;n++){var i=e.charCodeAt(n),o=i>>8,a=255&i;o?r.push(o,a):r.push(a)}return r},n.zero2=i,n.toHex=o,n.encode=function(e,t){return"hex"===t?o(e):e}},function(e,t,r){"use strict";var n=r(7).rotr32;function i(e,t,r){return e&t^~e&r}function o(e,t,r){return e&t^e&r^t&r}function a(e,t,r){return e^t^r}t.ft_1=function(e,t,r,n){return 0===e?i(t,r,n):1===e||3===e?a(t,r,n):2===e?o(t,r,n):void 0},t.ch32=i,t.maj32=o,t.p32=a,t.s0_256=function(e){return n(e,2)^n(e,13)^n(e,22)},t.s1_256=function(e){return n(e,6)^n(e,11)^n(e,25)},t.g0_256=function(e){return n(e,7)^n(e,18)^e>>>3},t.g1_256=function(e){return n(e,17)^n(e,19)^e>>>10}},function(e,t,r){"use strict";var n=r(7),i=r(17),o=r(68),a=r(6),f=n.sum32,s=n.sum32_4,c=n.sum32_5,u=o.ch32,h=o.maj32,d=o.s0_256,l=o.s1_256,p=o.g0_256,b=o.g1_256,y=i.BlockHash,v=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function g(){if(!(this instanceof g))return new g;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=v,this.W=new Array(64)}n.inherits(g,y),e.exports=g,g.blockSize=512,g.outSize=256,g.hmacStrength=192,g.padLength=64,g.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=s(b(r[n-2]),r[n-7],p(r[n-15]),r[n-16]);var i=this.h[0],o=this.h[1],y=this.h[2],v=this.h[3],g=this.h[4],m=this.h[5],_=this.h[6],w=this.h[7];for(a(this.k.length===r.length),n=0;n<r.length;n++){var E=c(w,l(g),u(g,m,_),this.k[n],r[n]),S=f(d(i),h(i,o,y));w=_,_=m,m=g,g=f(v,E),v=y,y=o,o=i,i=f(E,S)}this.h[0]=f(this.h[0],i),this.h[1]=f(this.h[1],o),this.h[2]=f(this.h[2],y),this.h[3]=f(this.h[3],v),this.h[4]=f(this.h[4],g),this.h[5]=f(this.h[5],m),this.h[6]=f(this.h[6],_),this.h[7]=f(this.h[7],w)},g.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(7),i=r(17),o=r(6),a=n.rotr64_hi,f=n.rotr64_lo,s=n.shr64_hi,c=n.shr64_lo,u=n.sum64,h=n.sum64_hi,d=n.sum64_lo,l=n.sum64_4_hi,p=n.sum64_4_lo,b=n.sum64_5_hi,y=n.sum64_5_lo,v=i.BlockHash,g=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function m(){if(!(this instanceof m))return new m;v.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=g,this.W=new Array(160)}function _(e,t,r,n,i){var o=e&r^~e&i;return o<0&&(o+=4294967296),o}function w(e,t,r,n,i,o){var a=t&n^~t&o;return a<0&&(a+=4294967296),a}function E(e,t,r,n,i){var o=e&r^e&i^r&i;return o<0&&(o+=4294967296),o}function S(e,t,r,n,i,o){var a=t&n^t&o^n&o;return a<0&&(a+=4294967296),a}function A(e,t){var r=a(e,t,28)^a(t,e,2)^a(t,e,7);return r<0&&(r+=4294967296),r}function I(e,t){var r=f(e,t,28)^f(t,e,2)^f(t,e,7);return r<0&&(r+=4294967296),r}function M(e,t){var r=a(e,t,14)^a(e,t,18)^a(t,e,9);return r<0&&(r+=4294967296),r}function k(e,t){var r=f(e,t,14)^f(e,t,18)^f(t,e,9);return r<0&&(r+=4294967296),r}function x(e,t){var r=a(e,t,1)^a(e,t,8)^s(e,t,7);return r<0&&(r+=4294967296),r}function B(e,t){var r=f(e,t,1)^f(e,t,8)^c(e,t,7);return r<0&&(r+=4294967296),r}function T(e,t){var r=a(e,t,19)^a(t,e,29)^s(e,t,6);return r<0&&(r+=4294967296),r}function R(e,t){var r=f(e,t,19)^f(t,e,29)^c(e,t,6);return r<0&&(r+=4294967296),r}n.inherits(m,v),e.exports=m,m.blockSize=1024,m.outSize=512,m.hmacStrength=192,m.padLength=128,m.prototype._prepareBlock=function(e,t){for(var r=this.W,n=0;n<32;n++)r[n]=e[t+n];for(;n<r.length;n+=2){var i=T(r[n-4],r[n-3]),o=R(r[n-4],r[n-3]),a=r[n-14],f=r[n-13],s=x(r[n-30],r[n-29]),c=B(r[n-30],r[n-29]),u=r[n-32],h=r[n-31];r[n]=l(i,o,a,f,s,c,u,h),r[n+1]=p(i,o,a,f,s,c,u,h)}},m.prototype._update=function(e,t){this._prepareBlock(e,t);var r=this.W,n=this.h[0],i=this.h[1],a=this.h[2],f=this.h[3],s=this.h[4],c=this.h[5],l=this.h[6],p=this.h[7],v=this.h[8],g=this.h[9],m=this.h[10],x=this.h[11],B=this.h[12],T=this.h[13],R=this.h[14],L=this.h[15];o(this.k.length===r.length);for(var P=0;P<r.length;P+=2){var C=R,N=L,D=M(v,g),j=k(v,g),U=_(v,g,m,x,B),O=w(v,g,m,x,B,T),q=this.k[P],K=this.k[P+1],z=r[P],V=r[P+1],Y=b(C,N,D,j,U,O,q,K,z,V),F=y(C,N,D,j,U,O,q,K,z,V);C=A(n,i),N=I(n,i),D=E(n,i,a,f,s),j=S(n,i,a,f,s,c);var H=h(C,N,D,j),G=d(C,N,D,j);R=B,L=T,B=m,T=x,m=v,x=g,v=h(l,p,Y,F),g=d(p,p,Y,F),l=s,p=c,s=a,c=f,a=n,f=i,n=h(Y,F,H,G),i=d(Y,F,H,G)}u(this.h,0,n,i),u(this.h,2,a,f),u(this.h,4,s,c),u(this.h,6,l,p),u(this.h,8,v,g),u(this.h,10,m,x),u(this.h,12,B,T),u(this.h,14,R,L)},m.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){var n=r(1),i=r(19).Reporter,o=r(3).Buffer;function a(e,t){i.call(this,t),o.isBuffer(e)?(this.base=e,this.offset=0,this.length=e.length):this.error("Input not Buffer")}function f(e,t){if(Array.isArray(e))this.length=0,this.value=e.map(function(e){return e instanceof f||(e=new f(e,t)),this.length+=e.length,e},this);else if("number"==typeof e){if(!(0<=e&&e<=255))return t.error("non-byte EncoderBuffer value");this.value=e,this.length=1}else if("string"==typeof e)this.value=e,this.length=o.byteLength(e);else{if(!o.isBuffer(e))return t.error("Unsupported type: "+typeof e);this.value=e,this.length=e.length}}n(a,i),t.DecoderBuffer=a,a.prototype.save=function(){return{offset:this.offset,reporter:i.prototype.save.call(this)}},a.prototype.restore=function(e){var t=new a(this.base);return t.offset=e.offset,t.length=this.offset,this.offset=e.offset,i.prototype.restore.call(this,e.reporter),t},a.prototype.isEmpty=function(){return this.offset===this.length},a.prototype.readUInt8=function(e){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(e||"DecoderBuffer overrun")},a.prototype.skip=function(e,t){if(!(this.offset+e<=this.length))return this.error(t||"DecoderBuffer overrun");var r=new a(this.base);return r._reporterState=this._reporterState,r.offset=this.offset,r.length=this.offset+e,this.offset+=e,r},a.prototype.raw=function(e){return this.base.slice(e?e.offset:this.offset,this.length)},t.EncoderBuffer=f,f.prototype.join=function(e,t){return e||(e=new o(this.length)),t||(t=0),0===this.length?e:(Array.isArray(this.value)?this.value.forEach(function(r){r.join(e,t),t+=r.length}):("number"==typeof this.value?e[t]=this.value:"string"==typeof this.value?e.write(this.value,t):o.isBuffer(this.value)&&this.value.copy(e,t),t+=this.length),e)}},function(e,t,r){var n=t;n._reverse=function(e){var t={};return Object.keys(e).forEach(function(r){(0|r)==r&&(r|=0);var n=e[r];t[n]=r}),t},n.der=r(178)},function(e,t,r){var n=r(1),i=r(18),o=i.base,a=i.bignum,f=i.constants.der;function s(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){o.Node.call(this,"der",e)}function u(e,t){var r=e.readUInt8(t);if(e.isError(r))return r;var n=f.tagClass[r>>6],i=0==(32&r);if(31==(31&r)){var o=r;for(r=0;128==(128&o);){if(o=e.readUInt8(t),e.isError(o))return o;r<<=7,r|=127&o}}else r&=31;return{cls:n,primitive:i,tag:r,tagStr:f.tag[r]}}function h(e,t,r){var n=e.readUInt8(r);if(e.isError(n))return n;if(!t&&128===n)return null;if(0==(128&n))return n;var i=127&n;if(i>4)return e.error("length octect is too long");n=0;for(var o=0;o<i;o++){n<<=8;var a=e.readUInt8(r);if(e.isError(a))return a;n|=a}return n}e.exports=s,s.prototype.decode=function(e,t){return e instanceof o.DecoderBuffer||(e=new o.DecoderBuffer(e,t)),this.tree._decode(e,t)},n(c,o.Node),c.prototype._peekTag=function(e,t,r){if(e.isEmpty())return!1;var n=e.save(),i=u(e,'Failed to peek tag: "'+t+'"');return e.isError(i)?i:(e.restore(n),i.tag===t||i.tagStr===t||i.tagStr+"of"===t||r)},c.prototype._decodeTag=function(e,t,r){var n=u(e,'Failed to decode tag of "'+t+'"');if(e.isError(n))return n;var i=h(e,n.primitive,'Failed to get length of "'+t+'"');if(e.isError(i))return i;if(!r&&n.tag!==t&&n.tagStr!==t&&n.tagStr+"of"!==t)return e.error('Failed to match tag: "'+t+'"');if(n.primitive||null!==i)return e.skip(i,'Failed to match body of: "'+t+'"');var o=e.save(),a=this._skipUntilEnd(e,'Failed to skip indefinite length body: "'+this.tag+'"');return e.isError(a)?a:(i=e.offset-o.offset,e.restore(o),e.skip(i,'Failed to match body of: "'+t+'"'))},c.prototype._skipUntilEnd=function(e,t){for(;;){var r=u(e,t);if(e.isError(r))return r;var n,i=h(e,r.primitive,t);if(e.isError(i))return i;if(n=r.primitive||null!==i?e.skip(i):this._skipUntilEnd(e,t),e.isError(n))return n;if("end"===r.tagStr)break}},c.prototype._decodeList=function(e,t,r,n){for(var i=[];!e.isEmpty();){var o=this._peekTag(e,"end");if(e.isError(o))return o;var a=r.decode(e,"der",n);if(e.isError(a)&&o)break;i.push(a)}return i},c.prototype._decodeStr=function(e,t){if("bitstr"===t){var r=e.readUInt8();return e.isError(r)?r:{unused:r,data:e.raw()}}if("bmpstr"===t){var n=e.raw();if(n.length%2==1)return e.error("Decoding of string type: bmpstr length mismatch");for(var i="",o=0;o<n.length/2;o++)i+=String.fromCharCode(n.readUInt16BE(2*o));return i}if("numstr"===t){var a=e.raw().toString("ascii");return this._isNumstr(a)?a:e.error("Decoding of string type: numstr unsupported characters")}if("octstr"===t)return e.raw();if("objDesc"===t)return e.raw();if("printstr"===t){var f=e.raw().toString("ascii");return this._isPrintstr(f)?f:e.error("Decoding of string type: printstr unsupported characters")}return/str$/.test(t)?e.raw().toString():e.error("Decoding of string type: "+t+" unsupported")},c.prototype._decodeObjid=function(e,t,r){for(var n,i=[],o=0;!e.isEmpty();){var a=e.readUInt8();o<<=7,o|=127&a,0==(128&a)&&(i.push(o),o=0)}128&a&&i.push(o);var f=i[0]/40|0,s=i[0]%40;if(n=r?i:[f,s].concat(i.slice(1)),t){var c=t[n.join(" ")];void 0===c&&(c=t[n.join(".")]),void 0!==c&&(n=c)}return n},c.prototype._decodeTime=function(e,t){var r=e.raw().toString();if("gentime"===t)var n=0|r.slice(0,4),i=0|r.slice(4,6),o=0|r.slice(6,8),a=0|r.slice(8,10),f=0|r.slice(10,12),s=0|r.slice(12,14);else{if("utctime"!==t)return e.error("Decoding "+t+" time is not supported yet");n=0|r.slice(0,2),i=0|r.slice(2,4),o=0|r.slice(4,6),a=0|r.slice(6,8),f=0|r.slice(8,10),s=0|r.slice(10,12);n=n<70?2e3+n:1900+n}return Date.UTC(n,i-1,o,a,f,s,0)},c.prototype._decodeNull=function(e){return null},c.prototype._decodeBool=function(e){var t=e.readUInt8();return e.isError(t)?t:0!==t},c.prototype._decodeInt=function(e,t){var r=e.raw(),n=new a(r);return t&&(n=t[n.toString(10)]||n),n},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getDecoder("der").tree}},function(e,t,r){var n=r(1),i=r(3).Buffer,o=r(18),a=o.base,f=o.constants.der;function s(e){this.enc="der",this.name=e.name,this.entity=e,this.tree=new c,this.tree._init(e.body)}function c(e){a.Node.call(this,"der",e)}function u(e){return e<10?"0"+e:e}e.exports=s,s.prototype.encode=function(e,t){return this.tree._encode(e,t).join()},n(c,a.Node),c.prototype._encodeComposite=function(e,t,r,n){var o,a=function(e,t,r,n){var i;"seqof"===e?e="seq":"setof"===e&&(e="set");if(f.tagByName.hasOwnProperty(e))i=f.tagByName[e];else{if("number"!=typeof e||(0|e)!==e)return n.error("Unknown tag: "+e);i=e}if(i>=31)return n.error("Multi-octet tag encoding unsupported");t||(i|=32);return i|=f.tagClassByName[r||"universal"]<<6}(e,t,r,this.reporter);if(n.length<128)return(o=new i(2))[0]=a,o[1]=n.length,this._createEncoderBuffer([o,n]);for(var s=1,c=n.length;c>=256;c>>=8)s++;(o=new i(2+s))[0]=a,o[1]=128|s;c=1+s;for(var u=n.length;u>0;c--,u>>=8)o[c]=255&u;return this._createEncoderBuffer([o,n])},c.prototype._encodeStr=function(e,t){if("bitstr"===t)return this._createEncoderBuffer([0|e.unused,e.data]);if("bmpstr"===t){for(var r=new i(2*e.length),n=0;n<e.length;n++)r.writeUInt16BE(e.charCodeAt(n),2*n);return this._createEncoderBuffer(r)}return"numstr"===t?this._isNumstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: numstr supports only digits and space"):"printstr"===t?this._isPrintstr(e)?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark"):/str$/.test(t)?this._createEncoderBuffer(e):"objDesc"===t?this._createEncoderBuffer(e):this.reporter.error("Encoding of string type: "+t+" unsupported")},c.prototype._encodeObjid=function(e,t,r){if("string"==typeof e){if(!t)return this.reporter.error("string objid given, but no values map found");if(!t.hasOwnProperty(e))return this.reporter.error("objid not found in values map");e=t[e].split(/[\s\.]+/g);for(var n=0;n<e.length;n++)e[n]|=0}else if(Array.isArray(e)){e=e.slice();for(n=0;n<e.length;n++)e[n]|=0}if(!Array.isArray(e))return this.reporter.error("objid() should be either array or string, got: "+JSON.stringify(e));if(!r){if(e[1]>=40)return this.reporter.error("Second objid identifier OOB");e.splice(0,2,40*e[0]+e[1])}var o=0;for(n=0;n<e.length;n++){var a=e[n];for(o++;a>=128;a>>=7)o++}var f=new i(o),s=f.length-1;for(n=e.length-1;n>=0;n--){a=e[n];for(f[s--]=127&a;(a>>=7)>0;)f[s--]=128|127&a}return this._createEncoderBuffer(f)},c.prototype._encodeTime=function(e,t){var r,n=new Date(e);return"gentime"===t?r=[u(n.getFullYear()),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):"utctime"===t?r=[u(n.getFullYear()%100),u(n.getUTCMonth()+1),u(n.getUTCDate()),u(n.getUTCHours()),u(n.getUTCMinutes()),u(n.getUTCSeconds()),"Z"].join(""):this.reporter.error("Encoding "+t+" time is not supported yet"),this._encodeStr(r,"octstr")},c.prototype._encodeNull=function(){return this._createEncoderBuffer("")},c.prototype._encodeInt=function(e,t){if("string"==typeof e){if(!t)return this.reporter.error("String int or enum given, but no values map");if(!t.hasOwnProperty(e))return this.reporter.error("Values map doesn't contain: "+JSON.stringify(e));e=t[e]}if("number"!=typeof e&&!i.isBuffer(e)){var r=e.toArray();!e.sign&&128&r[0]&&r.unshift(0),e=new i(r)}if(i.isBuffer(e)){var n=e.length;0===e.length&&n++;var o=new i(n);return e.copy(o),0===e.length&&(o[0]=0),this._createEncoderBuffer(o)}if(e<128)return this._createEncoderBuffer(e);if(e<256)return this._createEncoderBuffer([0,e]);n=1;for(var a=e;a>=256;a>>=8)n++;for(a=(o=new Array(n)).length-1;a>=0;a--)o[a]=255&e,e>>=8;return 128&o[0]&&o.unshift(0),this._createEncoderBuffer(new i(o))},c.prototype._encodeBool=function(e){return this._createEncoderBuffer(e?255:0)},c.prototype._use=function(e,t){return"function"==typeof e&&(e=e(t)),e._getEncoder("der").tree},c.prototype._skipDefault=function(e,t,r){var n,i=this._baseState;if(null===i.default)return!1;var o=e.join();if(void 0===i.defaultBuffer&&(i.defaultBuffer=this._encodeValue(i.default,t,r).join()),o.length!==i.defaultBuffer.length)return!1;for(n=0;n<o.length;n++)if(o[n]!==i.defaultBuffer[n])return!1;return!0}},function(e){e.exports={"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}},function(e,t,r){var n=r(13),i=r(0).Buffer;function o(e){var t=i.allocUnsafe(4);return t.writeUInt32BE(e,0),t}e.exports=function(e,t){for(var r,a=i.alloc(0),f=0;a.length<t;)r=o(f++),a=i.concat([a,n("sha1").update(e).update(r).digest()]);return a.slice(0,t)}},function(e,t){e.exports=function(e,t){for(var r=e.length,n=-1;++n<r;)e[n]^=t[n];return e}},function(e,t,r){var n=r(2),i=r(0).Buffer;e.exports=function(e,t){return i.from(e.toRed(n.mont(t.modulus)).redPow(new n(t.publicExponent)).fromRed().toArray())}},function(e){e.exports={COMPRESSED_TYPE_INVALID:"compressed should be a boolean",EC_PRIVATE_KEY_TYPE_INVALID:"private key should be a Buffer",EC_PRIVATE_KEY_LENGTH_INVALID:"private key length is invalid",EC_PRIVATE_KEY_RANGE_INVALID:"private key range is invalid",EC_PRIVATE_KEY_TWEAK_ADD_FAIL:"tweak out of range or resulting private key is invalid",EC_PRIVATE_KEY_TWEAK_MUL_FAIL:"tweak out of range",EC_PRIVATE_KEY_EXPORT_DER_FAIL:"couldn't export to DER format",EC_PRIVATE_KEY_IMPORT_DER_FAIL:"couldn't import from DER format",EC_PUBLIC_KEYS_TYPE_INVALID:"public keys should be an Array",EC_PUBLIC_KEYS_LENGTH_INVALID:"public keys Array should have at least 1 element",EC_PUBLIC_KEY_TYPE_INVALID:"public key should be a Buffer",EC_PUBLIC_KEY_LENGTH_INVALID:"public key length is invalid",EC_PUBLIC_KEY_PARSE_FAIL:"the public key could not be parsed or is invalid",EC_PUBLIC_KEY_CREATE_FAIL:"private was invalid, try again",EC_PUBLIC_KEY_TWEAK_ADD_FAIL:"tweak out of range or resulting public key is invalid",EC_PUBLIC_KEY_TWEAK_MUL_FAIL:"tweak out of range",EC_PUBLIC_KEY_COMBINE_FAIL:"the sum of the public keys is not valid",ECDH_FAIL:"scalar was invalid (zero or overflow)",ECDSA_SIGNATURE_TYPE_INVALID:"signature should be a Buffer",ECDSA_SIGNATURE_LENGTH_INVALID:"signature length is invalid",ECDSA_SIGNATURE_PARSE_FAIL:"couldn't parse signature",ECDSA_SIGNATURE_PARSE_DER_FAIL:"couldn't parse DER signature",ECDSA_SIGNATURE_SERIALIZE_DER_FAIL:"couldn't serialize signature to DER format",ECDSA_SIGN_FAIL:"nonce generation function failed or private key is invalid",ECDSA_RECOVER_FAIL:"couldn't recover public key from signature",MSG32_TYPE_INVALID:"message should be a Buffer",MSG32_LENGTH_INVALID:"message length is invalid",OPTIONS_TYPE_INVALID:"options should be an Object",OPTIONS_DATA_TYPE_INVALID:"options.data should be a Buffer",OPTIONS_DATA_LENGTH_INVALID:"options.data length is invalid",OPTIONS_NONCEFN_TYPE_INVALID:"options.noncefn should be a Function",RECOVERY_ID_TYPE_INVALID:"recovery should be a Number",RECOVERY_ID_VALUE_INVALID:"recovery should have value between -1 and 4",TWEAK_TYPE_INVALID:"tweak should be a Buffer",TWEAK_LENGTH_INVALID:"tweak length is invalid"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Rpc=t.PrivateKey=t.Auth=void 0;var n=c(r(81)),i=c(r(84)),o=c(r(103)),a=r(3),f=c(r(107)),s=c(r(192));function c(e){return e&&e.__esModule?e:{default:e}}function u(e,t,r,n,i,o,a){try{var f=e[o](a),s=f.value}catch(e){return void r(e)}f.done?t(s):Promise.resolve(s).then(n,i)}function h(e){return function(){var t=this,r=arguments;return new Promise(function(n,i){var o=e.apply(t,r);function a(e){u(o,n,i,a,f,"next",e)}function f(e){u(o,n,i,a,f,"throw",e)}a(void 0)})}}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function p(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),e}function b(e){return f.default.createHash("sha256").update(e).digest()}var y=function(){function e(t){d(this,e),this.key=t}return p(e,[{key:"sign",value:function(e){var t,r=0;do{var n={data:b(a.Buffer.concat([e,a.Buffer.alloc(1,++r)]))};t=s.default.sign(e,this.key,n)}while(!this.isCanonicalSignature(t.signature));var i=a.Buffer.alloc(65);return i.writeUInt8(t.recovery+31,0),t.signature.copy(i,1),i.toString("hex")}},{key:"isCanonicalSignature",value:function(e){return!(128&e[0]||0===e[0]&&!(128&e[1])||128&e[32]||0===e[32]&&!(128&e[33]))}}],[{key:"fromWif",value:function(t){var r=new a.Buffer(o.default.decode(t)),n=r.readUInt8(0);if(128!==n)throw new Error("Expected version 128, instead got "+n);var i=r.slice(0,-4),f=r.slice(-4),s=b(i);if(s=(s=b(s)).slice(0,4),f.toString()!==s.toString())throw new Error("Invalid WIF key (checksum miss-match)");return new e(i=i.slice(1))}}]),e}();t.PrivateKey=y;var v=function(){function e(){d(this,e)}var t,r;return p(e,null,[{key:"transactionDigest",value:(r=h(n.default.mark(function e(t,r,i,o,f){var s,c,u;return n.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.send("condenser_api.get_transaction_hex",[r]);case 2:return s=e.sent,console.log("body",s),c=s.result.substring(0,s.result.length-2),u=b(a.Buffer.concat([a.Buffer.from(f,"hex"),a.Buffer.from(c,"hex")])),e.abrupt("return",u);case 7:case"end":return e.stop()}},e,this)})),function(e,t,n,i,o){return r.apply(this,arguments)})},{key:"signTransaction",value:(t=h(n.default.mark(function e(t,r,i,o,a){var f,s,c;return n.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("signTransaction",t,r,i,o,a),e.next=3,this.transactionDigest(t,r,i,o,a);case 3:for(s in f=e.sent,Array.isArray(r.signatures)||(r.signatures=[]),i)c=i[s].sign(f),r.signatures.push(c);return e.abrupt("return",r);case 7:case"end":return e.stop()}},e,this)})),function(e,r,n,i,o){return t.apply(this,arguments)})}]),e}();t.Auth=v;var g=function(){function e(t){d(this,e),this.host=t}var t;return p(e,[{key:"send",value:(t=h(n.default.mark(function e(t,r){var o,a,f;return n.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=Math.floor(Math.random()*Math.pow(16,6)),a={jsonrpc:"2.0",method:t,params:r,id:o},e.next=4,(0,i.default)({method:"post",url:this.host,responseType:"json",data:a});case 4:return f=e.sent,e.abrupt("return",f.data);case 6:case"end":return e.stop()}},e,this)})),function(e,r){return t.apply(this,arguments)})}]),e}();t.Rpc=g},function(e,t,r){e.exports=r(82)},function(e,t,r){var n=function(){return this}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,o=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,e.exports=r(83),i)n.regeneratorRuntime=o;else try{delete n.regeneratorRuntime}catch(e){n.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",f=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag",c="object"==typeof e,u=t.regeneratorRuntime;if(u)c&&(e.exports=u);else{(u=t.regeneratorRuntime=c?e.exports:{}).wrap=_;var h="suspendedStart",d="suspendedYield",l="executing",p="completed",b={},y={};y[a]=function(){return this};var v=Object.getPrototypeOf,g=v&&v(v(R([])));g&&g!==n&&i.call(g,a)&&(y=g);var m=A.prototype=E.prototype=Object.create(y);S.prototype=m.constructor=A,A.constructor=S,A[s]=S.displayName="GeneratorFunction",u.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===S||"GeneratorFunction"===(t.displayName||t.name))},u.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,A):(e.__proto__=A,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(m),e},u.awrap=function(e){return{__await:e}},I(M.prototype),M.prototype[f]=function(){return this},u.AsyncIterator=M,u.async=function(e,t,r,n){var i=new M(_(e,t,r,n));return u.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},I(m),m[s]="Generator",m[a]=function(){return this},m.toString=function(){return"[object Generator]"},u.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},u.values=R,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(B),!e)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=r)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,i){return f.type="throw",f.arg=e,t.next=n,i&&(t.method="next",t.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],f=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var s=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,b):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),b},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),B(r),b}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var i=n.arg;B(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:R(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=r),b}}}function _(e,t,r,n){var i=t&&t.prototype instanceof E?t:E,o=Object.create(i.prototype),a=new T(n||[]);return o._invoke=function(e,t,r){var n=h;return function(i,o){if(n===l)throw new Error("Generator is already running");if(n===p){if("throw"===i)throw o;return L()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var f=k(a,r);if(f){if(f===b)continue;return f}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===h)throw n=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=l;var s=w(e,t,r);if("normal"===s.type){if(n=r.done?p:d,s.arg===b)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n=p,r.method="throw",r.arg=s.arg)}}}(e,r,a),o}function w(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}function E(){}function S(){}function A(){}function I(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function M(e){var t;this._invoke=function(r,n){function o(){return new Promise(function(t,o){!function t(r,n,o,a){var f=w(e[r],e,n);if("throw"!==f.type){var s=f.arg,c=s.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(e){t("next",e,o,a)},function(e){t("throw",e,o,a)}):Promise.resolve(c).then(function(e){s.value=e,o(s)},a)}a(f.arg)}(r,n,t,o)})}return t=t?t.then(o,o):o()}}function k(e,t){var n=e.iterator[t.method];if(n===r){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=r,k(e,t),"throw"===t.method))return b;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return b}var i=w(n,e.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,b;var o=i.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=r),t.delegate=null,b):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,b)}function x(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function B(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function R(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(i.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=r,t.done=!0,t};return o.next=o}}return{next:L}}function L(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,r){e.exports=r(85)},function(e,t,r){"use strict";var n=r(5),i=r(39),o=r(87),a=r(25);function f(e){var t=new o(e),r=i(o.prototype.request,t);return n.extend(r,o.prototype,t),n.extend(r,t),r}var s=f(a);s.Axios=o,s.create=function(e){return f(n.merge(a,e))},s.Cancel=r(43),s.CancelToken=r(101),s.isCancel=r(42),s.all=function(e){return Promise.all(e)},s.spread=r(102),e.exports=s,e.exports.default=s},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";var n=r(25),i=r(5),o=r(96),a=r(97);function f(e){this.defaults=e,this.interceptors={request:new o,response:new o}}f.prototype.request=function(e){"string"==typeof e&&(e=i.merge({url:arguments[0]},arguments[1])),(e=i.merge(n,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)r=r.then(t.shift(),t.shift());return r},i.forEach(["delete","get","head","options"],function(e){f.prototype[e]=function(t,r){return this.request(i.merge(r||{},{method:e,url:t}))}}),i.forEach(["post","put","patch"],function(e){f.prototype[e]=function(t,r,n){return this.request(i.merge(n||{},{method:e,url:t,data:r}))}}),e.exports=f},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t){n.forEach(e,function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])})}},function(e,t,r){"use strict";var n=r(41);e.exports=function(e,t,r){var i=r.config.validateStatus;r.status&&i&&!i(r.status)?t(n("Request failed with status code "+r.status,r.config,null,r.request,r)):e(r)}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,i){return e.config=t,r&&(e.code=r),e.request=n,e.response=i,e}},function(e,t,r){"use strict";var n=r(5);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var o;if(r)o=r(t);else if(n.isURLSearchParams(t))o=t.toString();else{var a=[];n.forEach(t,function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(i(t)+"="+i(e))}))}),o=a.join("&")}return o&&(e+=(-1===e.indexOf("?")?"?":"&")+o),e}},function(e,t,r){"use strict";var n=r(5),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,o,a={};return e?(n.forEach(e.split("\n"),function(e){if(o=e.indexOf(":"),t=n.trim(e.substr(0,o)).toLowerCase(),r=n.trim(e.substr(o+1)),t){if(a[t]&&i.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}}),a):a}},function(e,t,r){"use strict";var n=r(5);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=i(window.location.href),function(t){var r=n.isString(t)?i(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function i(){this.message="String contains an invalid character"}i.prototype=new Error,i.prototype.code=5,i.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,r,o=String(e),a="",f=0,s=n;o.charAt(0|f)||(s="=",f%1);a+=s.charAt(63&t>>8-f%1*8)){if((r=o.charCodeAt(f+=.75))>255)throw new i;t=t<<8|r}return a}},function(e,t,r){"use strict";var n=r(5);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,i,o,a){var f=[];f.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&f.push("expires="+new Date(r).toGMTString()),n.isString(i)&&f.push("path="+i),n.isString(o)&&f.push("domain="+o),!0===a&&f.push("secure"),document.cookie=f.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(5);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){n.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=i},function(e,t,r){"use strict";var n=r(5),i=r(98),o=r(42),a=r(25),f=r(99),s=r(100);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!f(e.url)&&(e.url=s(e.baseURL,e.url)),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return c(e),t.data=i(t.data,t.headers,e.transformResponse),t},function(t){return o(t)||(c(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(5);e.exports=function(e,t,r){return n.forEach(r,function(r){e=r(e,t)}),e}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(43);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var r=this;e(function(e){r.reason||(r.reason=new n(e),t(r.reason))})}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i(function(t){e=t}),cancel:e}},e.exports=i},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){var n=r(104);e.exports=n("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")},function(e,t,r){const n=r(0).Buffer;e.exports=function(e){if(e.length>=255)throw new TypeError("Alphabet too long");const t=new Uint8Array(256);t.fill(255);for(let r=0;r<e.length;r++){const n=e.charAt(r),i=n.charCodeAt(0);if(255!==t[i])throw new TypeError(n+" is ambiguous");t[i]=r}const r=e.length,i=e.charAt(0),o=Math.log(r)/Math.log(256),a=Math.log(256)/Math.log(r);function f(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return n.alloc(0);let a=0;if(" "===e[a])return;let f=0,s=0;for(;e[a]===i;)f++,a++;const c=(e.length-a)*o+1>>>0,u=new Uint8Array(c);for(;e[a];){let n=t[e.charCodeAt(a)];if(255===n)return;let i=0;for(let e=c-1;(0!==n||i<s)&&-1!==e;e--,i++)n+=r*u[e]>>>0,u[e]=n%256>>>0,n=n/256>>>0;if(0!==n)throw new Error("Non-zero carry");s=i,a++}if(" "===e[a])return;let h=c-s;for(;h!==c&&0===u[h];)h++;const d=n.allocUnsafe(f+(c-h));d.fill(0,0,f);let l=f;for(;h!==c;)d[l++]=u[h++];return d}return{encode:function(t){if(!n.isBuffer(t))throw new TypeError("Expected Buffer");if(0===t.length)return"";let o=0,f=0,s=0;const c=t.length;for(;s!==c&&0===t[s];)s++,o++;const u=(c-s)*a+1>>>0,h=new Uint8Array(u);for(;s!==c;){let e=t[s],n=0;for(let t=u-1;(0!==e||n<f)&&-1!==t;t--,n++)e+=256*h[t]>>>0,h[t]=e%r>>>0,e=e/r>>>0;if(0!==e)throw new Error("Non-zero carry");f=n,s++}let d=u-f;for(;d!==u&&0===h[d];)d++;let l=i.repeat(o);for(;d<u;++d)l+=e.charAt(h[d]);return l},decodeUnsafe:f,decode:function(e){const t=f(e);if(t)return t;throw new Error("Non-base"+r+" character")}}}},function(e,t,r){"use strict";t.byteLength=function(e){var t=c(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){for(var t,r=c(e),n=r[0],a=r[1],f=new o(function(e,t,r){return 3*(t+r)/4-r}(0,n,a)),s=0,u=a>0?n-4:n,h=0;h<u;h+=4)t=i[e.charCodeAt(h)]<<18|i[e.charCodeAt(h+1)]<<12|i[e.charCodeAt(h+2)]<<6|i[e.charCodeAt(h+3)],f[s++]=t>>16&255,f[s++]=t>>8&255,f[s++]=255&t;2===a&&(t=i[e.charCodeAt(h)]<<2|i[e.charCodeAt(h+1)]>>4,f[s++]=255&t);1===a&&(t=i[e.charCodeAt(h)]<<10|i[e.charCodeAt(h+1)]<<4|i[e.charCodeAt(h+2)]>>2,f[s++]=t>>8&255,f[s++]=255&t);return f},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,f=r-i;a<f;a+=16383)o.push(u(e,a,a+16383>f?f:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",f=0,s=a.length;f<s;++f)n[f]=a[f],i[a.charCodeAt(f)]=f;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,r){for(var i,o,a=[],f=t;f<r;f+=3)i=(e[f]<<16&16711680)+(e[f+1]<<8&65280)+(255&e[f+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,a,f=8*i-n-1,s=(1<<f)-1,c=s>>1,u=-7,h=r?i-1:0,d=r?-1:1,l=e[t+h];for(h+=d,o=l&(1<<-u)-1,l>>=-u,u+=f;u>0;o=256*o+e[t+h],h+=d,u-=8);for(a=o&(1<<-u)-1,o>>=-u,u+=n;u>0;a=256*a+e[t+h],h+=d,u-=8);if(0===o)o=1-c;else{if(o===s)return a?NaN:1/0*(l?-1:1);a+=Math.pow(2,n),o-=c}return(l?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,f,s,c=8*o-i-1,u=(1<<c)-1,h=u>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,l=n?0:o-1,p=n?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(f=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(s=Math.pow(2,-a))<1&&(a--,s*=2),(t+=a+h>=1?d/s:d*Math.pow(2,1-h))*s>=2&&(a++,s/=2),a+h>=u?(f=0,a=u):a+h>=1?(f=(t*s-1)*Math.pow(2,i),a+=h):(f=t*Math.pow(2,h-1)*Math.pow(2,i),a=0));i>=8;e[r+l]=255&f,l+=p,f/=256,i-=8);for(a=a<<i|f,c+=i;c>0;e[r+l]=255&a,l+=p,a/=256,c-=8);e[r+l-p]|=128*b}},function(e,t,r){"use strict";t.randomBytes=t.rng=t.pseudoRandomBytes=t.prng=r(12),t.createHash=t.Hash=r(13),t.createHmac=t.Hmac=r(52);var n=r(124),i=Object.keys(n),o=["sha1","sha224","sha256","sha384","sha512","md5","rmd160"].concat(i);t.getHashes=function(){return o};var a=r(55);t.pbkdf2=a.pbkdf2,t.pbkdf2Sync=a.pbkdf2Sync;var f=r(126);t.Cipher=f.Cipher,t.createCipher=f.createCipher,t.Cipheriv=f.Cipheriv,t.createCipheriv=f.createCipheriv,t.Decipher=f.Decipher,t.createDecipher=f.createDecipher,t.Decipheriv=f.Decipheriv,t.createDecipheriv=f.createDecipheriv,t.getCiphers=f.getCiphers,t.listCiphers=f.listCiphers;var s=r(143);t.DiffieHellmanGroup=s.DiffieHellmanGroup,t.createDiffieHellmanGroup=s.createDiffieHellmanGroup,t.getDiffieHellman=s.getDiffieHellman,t.createDiffieHellman=s.createDiffieHellman,t.DiffieHellman=s.DiffieHellman;var c=r(149);t.createSign=c.createSign,t.Sign=c.Sign,t.createVerify=c.createVerify,t.Verify=c.Verify,t.createECDH=r(187);var u=r(188);t.publicEncrypt=u.publicEncrypt,t.privateEncrypt=u.privateEncrypt,t.publicDecrypt=u.publicDecrypt,t.privateDecrypt=u.privateDecrypt;var h=r(191);t.randomFill=h.randomFill,t.randomFillSync=h.randomFillSync,t.createCredentials=function(){throw new Error(["sorry, createCredentials is not implemented yet","we accept pull requests","https://github.com/crypto-browserify/crypto-browserify"].join("\n"))},t.constants={DH_CHECK_P_NOT_SAFE_PRIME:2,DH_CHECK_P_NOT_PRIME:1,DH_UNABLE_TO_CHECK_GENERATOR:4,DH_NOT_SUITABLE_GENERATOR:8,NPN_ENABLED:1,ALPN_ENABLED:1,RSA_PKCS1_PADDING:1,RSA_SSLV23_PADDING:2,RSA_NO_PADDING:3,RSA_PKCS1_OAEP_PADDING:4,RSA_X931_PADDING:5,RSA_PKCS1_PSS_PADDING:6,POINT_CONVERSION_COMPRESSED:2,POINT_CONVERSION_UNCOMPRESSED:4,POINT_CONVERSION_HYBRID:6}},function(e,t){},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(110);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return n.alloc(0);if(1===this.length)return this.head.data;for(var t,r,i,o=n.allocUnsafe(e>>>0),a=this.head,f=0;a;)t=a.data,r=o,i=f,t.copy(r,i),f+=a.data.length,a=a.next;return o},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,r){(function(e){var n=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,n,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,n,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},r(112),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,r(9))},function(e,t,r){(function(e,t){!function(e,r){"use strict";if(!e.setImmediate){var n,i,o,a,f,s=1,c={},u=!1,h=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?n=function(e){t.nextTick(function(){p(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,r=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=r,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},n=function(e){o.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(i=h.documentElement,n=function(e){var t=h.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):n=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",f=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",f,!1):e.attachEvent("onmessage",f),n=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var i={callback:e,args:t};return c[s]=i,n(s),s++},d.clearImmediate=l}function l(e){delete c[e]}function p(e){if(u)setTimeout(p,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(r,n)}}(t)}finally{l(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,r(9),r(8))},function(e,t,r){(function(t){function r(e){try{if(!t.localStorage)return!1}catch(e){return!1}var r=t.localStorage[e];return null!=r&&"true"===String(r).toLowerCase()}e.exports=function(e,t){if(r("noDeprecation"))return e;var n=!1;return function(){if(!n){if(r("throwDeprecation"))throw new Error(t);r("traceDeprecation")?console.trace(t):console.warn(t),n=!0}return e.apply(this,arguments)}}}).call(this,r(9))},function(e,t,r){"use strict";e.exports=o;var n=r(49),i=r(15);function o(e){if(!(this instanceof o))return new o(e);n.call(this,e)}i.inherits=r(1),i.inherits(o,n),o.prototype._transform=function(e,t,r){r(null,e)}},function(e,t,r){e.exports=r(30)},function(e,t,r){e.exports=r(11)},function(e,t,r){e.exports=r(29).Transform},function(e,t,r){e.exports=r(29).PassThrough},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],f=new Array(80);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e){return e<<30|e>>>2}function u(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,f=0|this._d,s=0|this._e,h=0;h<16;++h)r[h]=e.readInt32BE(4*h);for(;h<80;++h)r[h]=r[h-3]^r[h-8]^r[h-14]^r[h-16];for(var d=0;d<80;++d){var l=~~(d/20),p=0|((t=n)<<5|t>>>27)+u(l,i,o,f)+s+r[d]+a[l];s=f,f=o,o=c(i),i=n,n=p}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0},s.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=s},function(e,t,r){var n=r(1),i=r(14),o=r(0).Buffer,a=[1518500249,1859775393,-1894007588,-899497514],f=new Array(80);function s(){this.init(),this._w=f,i.call(this,64,56)}function c(e){return e<<5|e>>>27}function u(e){return e<<30|e>>>2}function h(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(s,i),s.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},s.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,i=0|this._b,o=0|this._c,f=0|this._d,s=0|this._e,d=0;d<16;++d)r[d]=e.readInt32BE(4*d);for(;d<80;++d)r[d]=(t=r[d-3]^r[d-8]^r[d-14]^r[d-16])<<1|t>>>31;for(var l=0;l<80;++l){var p=~~(l/20),b=c(n)+h(p,i,o,f)+s+r[l]+a[p]|0;s=f,f=o,o=u(i),i=n,n=b}this._a=n+this._a|0,this._b=i+this._b|0,this._c=o+this._c|0,this._d=f+this._d|0,this._e=s+this._e|0},s.prototype._hash=function(){var e=o.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=s},function(e,t,r){var n=r(1),i=r(50),o=r(14),a=r(0).Buffer,f=new Array(64);function s(){this.init(),this._w=f,o.call(this,64,56)}n(s,i),s.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},s.prototype._hash=function(){var e=a.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=s},function(e,t,r){var n=r(1),i=r(51),o=r(14),a=r(0).Buffer,f=new Array(160);function s(){this.init(),this._w=f,o.call(this,128,112)}n(s,i),s.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},s.prototype._hash=function(){var e=a.allocUnsafe(48);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=s},function(e,t,r){"use strict";var n=r(1),i=r(0).Buffer,o=r(10),a=i.alloc(128),f=64;function s(e,t){o.call(this,"digest"),"string"==typeof t&&(t=i.from(t)),this._alg=e,this._key=t,t.length>f?t=e(t):t.length<f&&(t=i.concat([t,a],f));for(var r=this._ipad=i.allocUnsafe(f),n=this._opad=i.allocUnsafe(f),s=0;s<f;s++)r[s]=54^t[s],n[s]=92^t[s];this._hash=[r]}n(s,o),s.prototype._update=function(e){this._hash.push(e)},s.prototype._final=function(){var e=this._alg(i.concat(this._hash));return this._alg(i.concat([this._opad,e]))},e.exports=s},function(e,t,r){e.exports=r(54)},function(e,t,r){(function(t,n){var i,o=r(56),a=r(57),f=r(58),s=r(0).Buffer,c=t.crypto&&t.crypto.subtle,u={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},h=[];function d(e,t,r,n,i){return c.importKey("raw",e,{name:"PBKDF2"},!1,["deriveBits"]).then(function(e){return c.deriveBits({name:"PBKDF2",salt:t,iterations:r,hash:{name:i}},e,n<<3)}).then(function(e){return s.from(e)})}e.exports=function(e,r,l,p,b,y){"function"==typeof b&&(y=b,b=void 0);var v=u[(b=b||"sha1").toLowerCase()];if(!v||"function"!=typeof t.Promise)return n.nextTick(function(){var t;try{t=f(e,r,l,p,b)}catch(e){return y(e)}y(null,t)});if(o(e,r,l,p),"function"!=typeof y)throw new Error("No callback provided to pbkdf2");s.isBuffer(e)||(e=s.from(e,a)),s.isBuffer(r)||(r=s.from(r,a)),function(e,t){e.then(function(e){n.nextTick(function(){t(null,e)})},function(e){n.nextTick(function(){t(e)})})}(function(e){if(t.process&&!t.process.browser)return Promise.resolve(!1);if(!c||!c.importKey||!c.deriveBits)return Promise.resolve(!1);if(void 0!==h[e])return h[e];var r=d(i=i||s.alloc(8),i,10,128,e).then(function(){return!0}).catch(function(){return!1});return h[e]=r,r}(v).then(function(t){return t?d(e,r,l,p,v):f(e,r,l,p,b)}),y)}}).call(this,r(9),r(8))},function(e,t,r){var n=r(127),i=r(35),o=r(36),a=r(142),f=r(22);function s(e,t,r){if(e=e.toLowerCase(),o[e])return i.createCipheriv(e,t,r);if(a[e])return new n({key:t,iv:r,mode:e});throw new TypeError("invalid suite type")}function c(e,t,r){if(e=e.toLowerCase(),o[e])return i.createDecipheriv(e,t,r);if(a[e])return new n({key:t,iv:r,mode:e,decrypt:!0});throw new TypeError("invalid suite type")}t.createCipher=t.Cipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,n=a[e].iv}var i=f(t,!1,r,n);return s(e,i.key,i.iv)},t.createCipheriv=t.Cipheriv=s,t.createDecipher=t.Decipher=function(e,t){var r,n;if(e=e.toLowerCase(),o[e])r=o[e].key,n=o[e].iv;else{if(!a[e])throw new TypeError("invalid suite type");r=8*a[e].key,n=a[e].iv}var i=f(t,!1,r,n);return c(e,i.key,i.iv)},t.createDecipheriv=t.Decipheriv=c,t.listCiphers=t.getCiphers=function(){return Object.keys(a).concat(i.getCiphers())}},function(e,t,r){var n=r(10),i=r(34),o=r(1),a=r(0).Buffer,f={"des-ede3-cbc":i.CBC.instantiate(i.EDE),"des-ede3":i.EDE,"des-ede-cbc":i.CBC.instantiate(i.EDE),"des-ede":i.EDE,"des-cbc":i.CBC.instantiate(i.DES),"des-ecb":i.DES};function s(e){n.call(this);var t,r=e.mode.toLowerCase(),i=f[r];t=e.decrypt?"decrypt":"encrypt";var o=e.key;a.isBuffer(o)||(o=a.from(o)),"des-ede"!==r&&"des-ede-cbc"!==r||(o=a.concat([o,o.slice(0,8)]));var s=e.iv;a.isBuffer(s)||(s=a.from(s)),this._des=i.create({key:o,iv:s,type:t})}f.des=f["des-cbc"],f.des3=f["des-ede3-cbc"],e.exports=s,o(s,n),s.prototype._update=function(e){return a.from(this._des.update(e))},s.prototype._final=function(){return a.from(this._des.final())}},function(e,t,r){"use strict";t.readUInt32BE=function(e,t){return(e[0+t]<<24|e[1+t]<<16|e[2+t]<<8|e[3+t])>>>0},t.writeUInt32BE=function(e,t,r){e[0+r]=t>>>24,e[1+r]=t>>>16&255,e[2+r]=t>>>8&255,e[3+r]=255&t},t.ip=function(e,t,r,n){for(var i=0,o=0,a=6;a>=0;a-=2){for(var f=0;f<=24;f+=8)i<<=1,i|=t>>>f+a&1;for(f=0;f<=24;f+=8)i<<=1,i|=e>>>f+a&1}for(a=6;a>=0;a-=2){for(f=1;f<=25;f+=8)o<<=1,o|=t>>>f+a&1;for(f=1;f<=25;f+=8)o<<=1,o|=e>>>f+a&1}r[n+0]=i>>>0,r[n+1]=o>>>0},t.rip=function(e,t,r,n){for(var i=0,o=0,a=0;a<4;a++)for(var f=24;f>=0;f-=8)i<<=1,i|=t>>>f+a&1,i<<=1,i|=e>>>f+a&1;for(a=4;a<8;a++)for(f=24;f>=0;f-=8)o<<=1,o|=t>>>f+a&1,o<<=1,o|=e>>>f+a&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.pc1=function(e,t,r,n){for(var i=0,o=0,a=7;a>=5;a--){for(var f=0;f<=24;f+=8)i<<=1,i|=t>>f+a&1;for(f=0;f<=24;f+=8)i<<=1,i|=e>>f+a&1}for(f=0;f<=24;f+=8)i<<=1,i|=t>>f+a&1;for(a=1;a<=3;a++){for(f=0;f<=24;f+=8)o<<=1,o|=t>>f+a&1;for(f=0;f<=24;f+=8)o<<=1,o|=e>>f+a&1}for(f=0;f<=24;f+=8)o<<=1,o|=e>>f+a&1;r[n+0]=i>>>0,r[n+1]=o>>>0},t.r28shl=function(e,t){return e<<t&268435455|e>>>28-t};var n=[14,11,17,4,27,23,25,0,13,22,7,18,5,9,16,24,2,20,12,21,1,8,15,26,15,4,25,19,9,1,26,16,5,11,23,8,12,7,17,0,22,3,10,14,6,20,27,24];t.pc2=function(e,t,r,i){for(var o=0,a=0,f=n.length>>>1,s=0;s<f;s++)o<<=1,o|=e>>>n[s]&1;for(s=f;s<n.length;s++)a<<=1,a|=t>>>n[s]&1;r[i+0]=o>>>0,r[i+1]=a>>>0},t.expand=function(e,t,r){var n=0,i=0;n=(1&e)<<5|e>>>27;for(var o=23;o>=15;o-=4)n<<=6,n|=e>>>o&63;for(o=11;o>=3;o-=4)i|=e>>>o&63,i<<=6;i|=(31&e)<<1|e>>>31,t[r+0]=n>>>0,t[r+1]=i>>>0};var i=[14,0,4,15,13,7,1,4,2,14,15,2,11,13,8,1,3,10,10,6,6,12,12,11,5,9,9,5,0,3,7,8,4,15,1,12,14,8,8,2,13,4,6,9,2,1,11,7,15,5,12,11,9,3,7,14,3,10,10,0,5,6,0,13,15,3,1,13,8,4,14,7,6,15,11,2,3,8,4,14,9,12,7,0,2,1,13,10,12,6,0,9,5,11,10,5,0,13,14,8,7,10,11,1,10,3,4,15,13,4,1,2,5,11,8,6,12,7,6,12,9,0,3,5,2,14,15,9,10,13,0,7,9,0,14,9,6,3,3,4,15,6,5,10,1,2,13,8,12,5,7,14,11,12,4,11,2,15,8,1,13,1,6,10,4,13,9,0,8,6,15,9,3,8,0,7,11,4,1,15,2,14,12,3,5,11,10,5,14,2,7,12,7,13,13,8,14,11,3,5,0,6,6,15,9,0,10,3,1,4,2,7,8,2,5,12,11,1,12,10,4,14,15,9,10,3,6,15,9,0,0,6,12,10,11,1,7,13,13,8,15,9,1,4,3,5,14,11,5,12,2,7,8,2,4,14,2,14,12,11,4,2,1,12,7,4,10,7,11,13,6,1,8,5,5,0,3,15,15,10,13,3,0,9,14,8,9,6,4,11,2,8,1,12,11,7,10,1,13,14,7,2,8,13,15,6,9,15,12,0,5,9,6,10,3,4,0,5,14,3,12,10,1,15,10,4,15,2,9,7,2,12,6,9,8,5,0,6,13,1,3,13,4,14,14,0,7,11,5,3,11,8,9,4,14,3,15,2,5,12,2,9,8,5,12,15,3,10,7,11,0,14,4,1,10,7,1,6,13,0,11,8,6,13,4,13,11,0,2,11,14,7,15,4,0,9,8,1,13,10,3,14,12,3,9,5,7,12,5,2,10,15,6,8,1,6,1,6,4,11,11,13,13,8,12,1,3,4,7,10,14,7,10,9,15,5,6,0,8,15,0,14,5,2,9,3,2,12,13,1,2,15,8,13,4,8,6,10,15,3,11,7,1,4,10,12,9,5,3,6,14,11,5,0,0,14,12,9,7,2,7,2,11,1,4,14,1,7,9,4,12,10,14,8,2,13,0,15,6,12,10,9,13,0,15,3,3,5,5,6,8,11];t.substitute=function(e,t){for(var r=0,n=0;n<4;n++){r<<=4,r|=i[64*n+(e>>>18-6*n&63)]}for(n=0;n<4;n++){r<<=4,r|=i[256+64*n+(t>>>18-6*n&63)]}return r>>>0};var o=[16,25,12,11,3,20,4,15,31,17,9,6,27,14,1,22,30,24,8,18,0,5,29,23,13,19,2,26,10,21,28,7];t.permute=function(e){for(var t=0,r=0;r<o.length;r++)t<<=1,t|=e>>>o[r]&1;return t>>>0},t.padSplit=function(e,t,r){for(var n=e.toString(2);n.length<t;)n="0"+n;for(var i=[],o=0;o<t;o+=r)i.push(n.slice(o,o+r));return i.join(" ")}},function(e,t,r){"use strict";var n=r(6);function i(e){this.options=e,this.type=this.options.type,this.blockSize=8,this._init(),this.buffer=new Array(this.blockSize),this.bufferOff=0}e.exports=i,i.prototype._init=function(){},i.prototype.update=function(e){return 0===e.length?[]:"decrypt"===this.type?this._updateDecrypt(e):this._updateEncrypt(e)},i.prototype._buffer=function(e,t){for(var r=Math.min(this.buffer.length-this.bufferOff,e.length-t),n=0;n<r;n++)this.buffer[this.bufferOff+n]=e[t+n];return this.bufferOff+=r,r},i.prototype._flushBuffer=function(e,t){return this._update(this.buffer,0,e,t),this.bufferOff=0,this.blockSize},i.prototype._updateEncrypt=function(e){var t=0,r=0,n=(this.bufferOff+e.length)/this.blockSize|0,i=new Array(n*this.blockSize);0!==this.bufferOff&&(t+=this._buffer(e,t),this.bufferOff===this.buffer.length&&(r+=this._flushBuffer(i,r)));for(var o=e.length-(e.length-t)%this.blockSize;t<o;t+=this.blockSize)this._update(e,t,i,r),r+=this.blockSize;for(;t<e.length;t++,this.bufferOff++)this.buffer[this.bufferOff]=e[t];return i},i.prototype._updateDecrypt=function(e){for(var t=0,r=0,n=Math.ceil((this.bufferOff+e.length)/this.blockSize)-1,i=new Array(n*this.blockSize);n>0;n--)t+=this._buffer(e,t),r+=this._flushBuffer(i,r);return t+=this._buffer(e,t),i},i.prototype.final=function(e){var t,r;return e&&(t=this.update(e)),r="encrypt"===this.type?this._finalEncrypt():this._finalDecrypt(),t?t.concat(r):r},i.prototype._pad=function(e,t){if(0===t)return!1;for(;t<e.length;)e[t++]=0;return!0},i.prototype._finalEncrypt=function(){if(!this._pad(this.buffer,this.bufferOff))return[];var e=new Array(this.blockSize);return this._update(this.buffer,0,e,0),e},i.prototype._unpad=function(e){return e},i.prototype._finalDecrypt=function(){n.equal(this.bufferOff,this.blockSize,"Not enough data to decrypt");var e=new Array(this.blockSize);return this._flushBuffer(e,0),this._unpad(e)}},function(e,t,r){"use strict";var n=r(6),i=r(1),o=r(34),a=o.utils,f=o.Cipher;function s(){this.tmp=new Array(2),this.keys=null}function c(e){f.call(this,e);var t=new s;this._desState=t,this.deriveKeys(t,e.key)}i(c,f),e.exports=c,c.create=function(e){return new c(e)};var u=[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1];c.prototype.deriveKeys=function(e,t){e.keys=new Array(32),n.equal(t.length,this.blockSize,"Invalid key length");var r=a.readUInt32BE(t,0),i=a.readUInt32BE(t,4);a.pc1(r,i,e.tmp,0),r=e.tmp[0],i=e.tmp[1];for(var o=0;o<e.keys.length;o+=2){var f=u[o>>>1];r=a.r28shl(r,f),i=a.r28shl(i,f),a.pc2(r,i,e.keys,o)}},c.prototype._update=function(e,t,r,n){var i=this._desState,o=a.readUInt32BE(e,t),f=a.readUInt32BE(e,t+4);a.ip(o,f,i.tmp,0),o=i.tmp[0],f=i.tmp[1],"encrypt"===this.type?this._encrypt(i,o,f,i.tmp,0):this._decrypt(i,o,f,i.tmp,0),o=i.tmp[0],f=i.tmp[1],a.writeUInt32BE(r,o,n),a.writeUInt32BE(r,f,n+4)},c.prototype._pad=function(e,t){for(var r=e.length-t,n=t;n<e.length;n++)e[n]=r;return!0},c.prototype._unpad=function(e){for(var t=e[e.length-1],r=e.length-t;r<e.length;r++)n.equal(e[r],t);return e.slice(0,e.length-t)},c.prototype._encrypt=function(e,t,r,n,i){for(var o=t,f=r,s=0;s<e.keys.length;s+=2){var c=e.keys[s],u=e.keys[s+1];a.expand(f,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=a.substitute(c,u),d=f;f=(o^a.permute(h))>>>0,o=d}a.rip(f,o,n,i)},c.prototype._decrypt=function(e,t,r,n,i){for(var o=r,f=t,s=e.keys.length-2;s>=0;s-=2){var c=e.keys[s],u=e.keys[s+1];a.expand(o,e.tmp,0),c^=e.tmp[0],u^=e.tmp[1];var h=a.substitute(c,u),d=o;o=(f^a.permute(h))>>>0,f=d}a.rip(o,f,n,i)}},function(e,t,r){"use strict";var n=r(6),i=r(1),o={};function a(e){n.equal(e.length,8,"Invalid IV length"),this.iv=new Array(8);for(var t=0;t<this.iv.length;t++)this.iv[t]=e[t]}t.instantiate=function(e){function t(t){e.call(this,t),this._cbcInit()}i(t,e);for(var r=Object.keys(o),n=0;n<r.length;n++){var a=r[n];t.prototype[a]=o[a]}return t.create=function(e){return new t(e)},t},o._cbcInit=function(){var e=new a(this.options.iv);this._cbcState=e},o._update=function(e,t,r,n){var i=this._cbcState,o=this.constructor.super_.prototype,a=i.iv;if("encrypt"===this.type){for(var f=0;f<this.blockSize;f++)a[f]^=e[t+f];o._update.call(this,a,0,r,n);for(f=0;f<this.blockSize;f++)a[f]=r[n+f]}else{o._update.call(this,e,t,r,n);for(f=0;f<this.blockSize;f++)r[n+f]^=a[f];for(f=0;f<this.blockSize;f++)a[f]=e[t+f]}}},function(e,t,r){"use strict";var n=r(6),i=r(1),o=r(34),a=o.Cipher,f=o.DES;function s(e,t){n.equal(t.length,24,"Invalid key length");var r=t.slice(0,8),i=t.slice(8,16),o=t.slice(16,24);this.ciphers="encrypt"===e?[f.create({type:"encrypt",key:r}),f.create({type:"decrypt",key:i}),f.create({type:"encrypt",key:o})]:[f.create({type:"decrypt",key:o}),f.create({type:"encrypt",key:i}),f.create({type:"decrypt",key:r})]}function c(e){a.call(this,e);var t=new s(this.type,this.options.key);this._edeState=t}i(c,a),e.exports=c,c.create=function(e){return new c(e)},c.prototype._update=function(e,t,r,n){var i=this._edeState;i.ciphers[0]._update(e,t,r,n),i.ciphers[1]._update(r,n,r,n),i.ciphers[2]._update(r,n,r,n)},c.prototype._pad=f.prototype._pad,c.prototype._unpad=f.prototype._unpad},function(e,t,r){var n=r(36),i=r(62),o=r(0).Buffer,a=r(63),f=r(10),s=r(21),c=r(22);function u(e,t,r){f.call(this),this._cache=new d,this._cipher=new s.AES(t),this._prev=o.from(r),this._mode=e,this._autopadding=!0}r(1)(u,f),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get();)r=this._mode.encrypt(this,t),n.push(r);return o.concat(n)};var h=o.alloc(16,16);function d(){this.cache=o.allocUnsafe(0)}function l(e,t,r){var f=n[e.toLowerCase()];if(!f)throw new TypeError("invalid suite type");if("string"==typeof t&&(t=o.from(t)),t.length!==f.key/8)throw new TypeError("invalid key length "+t.length);if("string"==typeof r&&(r=o.from(r)),"GCM"!==f.mode&&r.length!==f.iv)throw new TypeError("invalid iv length "+r.length);return"stream"===f.type?new a(f.module,t,r):"auth"===f.type?new i(f.module,t,r):new u(f.module,t,r)}u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return e=this._mode.encrypt(this,e),this._cipher.scrub(),e;if(!e.equals(h))throw this._cipher.scrub(),new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},d.prototype.add=function(e){this.cache=o.concat([this.cache,e])},d.prototype.get=function(){if(this.cache.length>15){var e=this.cache.slice(0,16);return this.cache=this.cache.slice(16),e}return null},d.prototype.flush=function(){for(var e=16-this.cache.length,t=o.allocUnsafe(e),r=-1;++r<e;)t.writeUInt8(e,r);return o.concat([this.cache,t])},t.createCipheriv=l,t.createCipher=function(e,t){var r=n[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var i=c(t,!1,r.key,r.iv);return l(e,i.key,i.iv)}},function(e,t){t.encrypt=function(e,t){return e._cipher.encryptBlock(t)},t.decrypt=function(e,t){return e._cipher.decryptBlock(t)}},function(e,t,r){var n=r(16);t.encrypt=function(e,t){var r=n(t,e._prev);return e._prev=e._cipher.encryptBlock(r),e._prev},t.decrypt=function(e,t){var r=e._prev;e._prev=t;var i=e._cipher.decryptBlock(t);return n(i,r)}},function(e,t,r){var n=r(0).Buffer,i=r(16);function o(e,t,r){var o=t.length,a=i(t,e._cache);return e._cache=e._cache.slice(o),e._prev=n.concat([e._prev,r?t:a]),a}t.encrypt=function(e,t,r){for(var i,a=n.allocUnsafe(0);t.length;){if(0===e._cache.length&&(e._cache=e._cipher.encryptBlock(e._prev),e._prev=n.allocUnsafe(0)),!(e._cache.length<=t.length)){a=n.concat([a,o(e,t,r)]);break}i=e._cache.length,a=n.concat([a,o(e,t.slice(0,i),r)]),t=t.slice(i)}return a}},function(e,t,r){var n=r(0).Buffer;function i(e,t,r){var i=e._cipher.encryptBlock(e._prev)[0]^t;return e._prev=n.concat([e._prev.slice(1),n.from([r?t:i])]),i}t.encrypt=function(e,t,r){for(var o=t.length,a=n.allocUnsafe(o),f=-1;++f<o;)a[f]=i(e,t[f],r);return a}},function(e,t,r){var n=r(0).Buffer;function i(e,t,r){for(var n,i,a=-1,f=0;++a<8;)n=t&1<<7-a?128:0,f+=(128&(i=e._cipher.encryptBlock(e._prev)[0]^n))>>a%8,e._prev=o(e._prev,r?n:i);return f}function o(e,t){var r=e.length,i=-1,o=n.allocUnsafe(e.length);for(e=n.concat([e,n.from([t])]);++i<r;)o[i]=e[i]<<1|e[i+1]>>7;return o}t.encrypt=function(e,t,r){for(var o=t.length,a=n.allocUnsafe(o),f=-1;++f<o;)a[f]=i(e,t[f],r);return a}},function(e,t,r){(function(e){var n=r(16);function i(e){return e._prev=e._cipher.encryptBlock(e._prev),e._prev}t.encrypt=function(t,r){for(;t._cache.length<r.length;)t._cache=e.concat([t._cache,i(t)]);var o=t._cache.slice(0,r.length);return t._cache=t._cache.slice(r.length),n(r,o)}}).call(this,r(3).Buffer)},function(e,t,r){var n=r(0).Buffer,i=n.alloc(16,0);function o(e){var t=n.allocUnsafe(16);return t.writeUInt32BE(e[0]>>>0,0),t.writeUInt32BE(e[1]>>>0,4),t.writeUInt32BE(e[2]>>>0,8),t.writeUInt32BE(e[3]>>>0,12),t}function a(e){this.h=e,this.state=n.alloc(16,0),this.cache=n.allocUnsafe(0)}a.prototype.ghash=function(e){for(var t=-1;++t<e.length;)this.state[t]^=e[t];this._multiply()},a.prototype._multiply=function(){for(var e,t,r,n=[(e=this.h).readUInt32BE(0),e.readUInt32BE(4),e.readUInt32BE(8),e.readUInt32BE(12)],i=[0,0,0,0],a=-1;++a<128;){for(0!=(this.state[~~(a/8)]&1<<7-a%8)&&(i[0]^=n[0],i[1]^=n[1],i[2]^=n[2],i[3]^=n[3]),r=0!=(1&n[3]),t=3;t>0;t--)n[t]=n[t]>>>1|(1&n[t-1])<<31;n[0]=n[0]>>>1,r&&(n[0]=n[0]^225<<24)}this.state=o(i)},a.prototype.update=function(e){var t;for(this.cache=n.concat([this.cache,e]);this.cache.length>=16;)t=this.cache.slice(0,16),this.cache=this.cache.slice(16),this.ghash(t)},a.prototype.final=function(e,t){return this.cache.length&&this.ghash(n.concat([this.cache,i],16)),this.ghash(o([0,e,0,t])),this.state},e.exports=a},function(e,t,r){var n=r(62),i=r(0).Buffer,o=r(36),a=r(63),f=r(10),s=r(21),c=r(22);function u(e,t,r){f.call(this),this._cache=new h,this._last=void 0,this._cipher=new s.AES(t),this._prev=i.from(r),this._mode=e,this._autopadding=!0}function h(){this.cache=i.allocUnsafe(0)}function d(e,t,r){var f=o[e.toLowerCase()];if(!f)throw new TypeError("invalid suite type");if("string"==typeof r&&(r=i.from(r)),"GCM"!==f.mode&&r.length!==f.iv)throw new TypeError("invalid iv length "+r.length);if("string"==typeof t&&(t=i.from(t)),t.length!==f.key/8)throw new TypeError("invalid key length "+t.length);return"stream"===f.type?new a(f.module,t,r,!0):"auth"===f.type?new n(f.module,t,r,!0):new u(f.module,t,r)}r(1)(u,f),u.prototype._update=function(e){var t,r;this._cache.add(e);for(var n=[];t=this._cache.get(this._autopadding);)r=this._mode.decrypt(this,t),n.push(r);return i.concat(n)},u.prototype._final=function(){var e=this._cache.flush();if(this._autopadding)return function(e){var t=e[15];if(t<1||t>16)throw new Error("unable to decrypt data");var r=-1;for(;++r<t;)if(e[r+(16-t)]!==t)throw new Error("unable to decrypt data");if(16===t)return;return e.slice(0,16-t)}(this._mode.decrypt(this,e));if(e)throw new Error("data not multiple of block length")},u.prototype.setAutoPadding=function(e){return this._autopadding=!!e,this},h.prototype.add=function(e){this.cache=i.concat([this.cache,e])},h.prototype.get=function(e){var t;if(e){if(this.cache.length>16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t}else if(this.cache.length>=16)return t=this.cache.slice(0,16),this.cache=this.cache.slice(16),t;return null},h.prototype.flush=function(){if(this.cache.length)return this.cache},t.createDecipher=function(e,t){var r=o[e.toLowerCase()];if(!r)throw new TypeError("invalid suite type");var n=c(t,!1,r.key,r.iv);return d(e,n.key,n.iv)},t.createDecipheriv=d},function(e,t){t["des-ecb"]={key:8,iv:0},t["des-cbc"]=t.des={key:8,iv:8},t["des-ede3-cbc"]=t.des3={key:24,iv:8},t["des-ede3"]={key:24,iv:0},t["des-ede-cbc"]={key:16,iv:8},t["des-ede"]={key:16,iv:0}},function(e,t,r){(function(e){var n=r(64),i=r(147),o=r(148);var a={binary:!0,hex:!0,base64:!0};t.DiffieHellmanGroup=t.createDiffieHellmanGroup=t.getDiffieHellman=function(t){var r=new e(i[t].prime,"hex"),n=new e(i[t].gen,"hex");return new o(r,n)},t.createDiffieHellman=t.DiffieHellman=function t(r,i,f,s){return e.isBuffer(i)||void 0===a[i]?t(r,"binary",i,f):(i=i||"binary",s=s||"binary",f=f||new e([2]),e.isBuffer(f)||(f=new e(f,s)),"number"==typeof r?new o(n(r,f),f,!0):(e.isBuffer(r)||(r=new e(r,i)),new o(r,f,!0)))}}).call(this,r(3).Buffer)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t){},function(e){e.exports={modp1:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},modp2:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},modp5:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},modp14:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},modp15:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},modp16:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},modp17:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},modp18:{gen:"02",prime:"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}},function(e,t,r){(function(t){var n=r(2),i=new(r(65)),o=new n(24),a=new n(11),f=new n(10),s=new n(3),c=new n(7),u=r(64),h=r(12);function d(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._pub=new n(e),this}function l(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this._priv=new n(e),this}e.exports=b;var p={};function b(e,t,r){this.setGenerator(t),this.__prime=new n(e),this._prime=n.mont(this.__prime),this._primeLen=e.length,this._pub=void 0,this._priv=void 0,this._primeCode=void 0,r?(this.setPublicKey=d,this.setPrivateKey=l):this._primeCode=8}function y(e,r){var n=new t(e.toArray());return r?n.toString(r):n}Object.defineProperty(b.prototype,"verifyError",{enumerable:!0,get:function(){return"number"!=typeof this._primeCode&&(this._primeCode=function(e,t){var r=t.toString("hex"),n=[r,e.toString(16)].join("_");if(n in p)return p[n];var h,d=0;if(e.isEven()||!u.simpleSieve||!u.fermatTest(e)||!i.test(e))return d+=1,d+="02"===r||"05"===r?8:4,p[n]=d,d;switch(i.test(e.shrn(1))||(d+=2),r){case"02":e.mod(o).cmp(a)&&(d+=8);break;case"05":(h=e.mod(f)).cmp(s)&&h.cmp(c)&&(d+=8);break;default:d+=4}return p[n]=d,d}(this.__prime,this.__gen)),this._primeCode}}),b.prototype.generateKeys=function(){return this._priv||(this._priv=new n(h(this._primeLen))),this._pub=this._gen.toRed(this._prime).redPow(this._priv).fromRed(),this.getPublicKey()},b.prototype.computeSecret=function(e){var r=(e=(e=new n(e)).toRed(this._prime)).redPow(this._priv).fromRed(),i=new t(r.toArray()),o=this.getPrime();if(i.length<o.length){var a=new t(o.length-i.length);a.fill(0),i=t.concat([a,i])}return i},b.prototype.getPublicKey=function(e){return y(this._pub,e)},b.prototype.getPrivateKey=function(e){return y(this._priv,e)},b.prototype.getPrime=function(e){return y(this.__prime,e)},b.prototype.getGenerator=function(e){return y(this._gen,e)},b.prototype.setGenerator=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.__gen=e,this._gen=new n(e),this}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(13),i=r(27),o=r(1),a=r(150),f=r(186),s=r(54);function c(e){i.Writable.call(this);var t=s[e];if(!t)throw new Error("Unknown message digest");this._hashType=t.hash,this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function u(e){i.Writable.call(this);var t=s[e];if(!t)throw new Error("Unknown message digest");this._hash=n(t.hash),this._tag=t.id,this._signType=t.sign}function h(e){return new c(e)}function d(e){return new u(e)}Object.keys(s).forEach(function(e){s[e].id=new t(s[e].id,"hex"),s[e.toLowerCase()]=s[e]}),o(c,i.Writable),c.prototype._write=function(e,t,r){this._hash.update(e),r()},c.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},c.prototype.sign=function(e,t){this.end();var r=this._hash.digest(),n=a(r,e,this._hashType,this._signType,this._tag);return t?n.toString(t):n},o(u,i.Writable),u.prototype._write=function(e,t,r){this._hash.update(e),r()},u.prototype.update=function(e,r){return"string"==typeof e&&(e=new t(e,r)),this._hash.update(e),this},u.prototype.verify=function(e,r,n){"string"==typeof r&&(r=new t(r,n)),this.end();var i=this._hash.digest();return f(r,i,e,this._signType,this._tag)},e.exports={Sign:h,Verify:d,createSign:h,createVerify:d}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(52),i=r(37),o=r(4).ec,a=r(2),f=r(24),s=r(75);function c(e,r,i,o){if((e=new t(e.toArray())).length<r.byteLength()){var a=new t(r.byteLength()-e.length);a.fill(0),e=t.concat([a,e])}var f=i.length,s=function(e,r){e=(e=u(e,r)).mod(r);var n=new t(e.toArray());if(n.length<r.byteLength()){var i=new t(r.byteLength()-n.length);i.fill(0),n=t.concat([i,n])}return n}(i,r),c=new t(f);c.fill(1);var h=new t(f);return h.fill(0),h=n(o,h).update(c).update(new t([0])).update(e).update(s).digest(),c=n(o,h).update(c).digest(),{k:h=n(o,h).update(c).update(new t([1])).update(e).update(s).digest(),v:c=n(o,h).update(c).digest()}}function u(e,t){var r=new a(e),n=(e.length<<3)-t.bitLength();return n>0&&r.ishrn(n),r}function h(e,r,i){var o,a;do{for(o=new t(0);8*o.length<e.bitLength();)r.v=n(i,r.k).update(r.v).digest(),o=t.concat([o,r.v]);a=u(o,e),r.k=n(i,r.k).update(r.v).update(new t([0])).digest(),r.v=n(i,r.k).update(r.v).digest()}while(-1!==a.cmp(e));return a}function d(e,t,r,n){return e.toRed(a.mont(r)).redPow(t).fromRed().mod(n)}e.exports=function(e,r,n,l,p){var b=f(r);if(b.curve){if("ecdsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");return function(e,r){var n=s[r.curve.join(".")];if(!n)throw new Error("unknown curve "+r.curve.join("."));var i=new o(n).keyFromPrivate(r.privateKey).sign(e);return new t(i.toDER())}(e,b)}if("dsa"===b.type){if("dsa"!==l)throw new Error("wrong private key type");return function(e,r,n){for(var i,o=r.params.priv_key,f=r.params.p,s=r.params.q,l=r.params.g,p=new a(0),b=u(e,s).mod(s),y=!1,v=c(o,s,e,n);!1===y;)i=h(s,v,n),p=d(l,i,f,s),0===(y=i.invm(s).imul(b.add(o.mul(p))).mod(s)).cmpn(0)&&(y=!1,p=new a(0));return function(e,r){e=e.toArray(),r=r.toArray(),128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r));var n=[48,e.length+r.length+4,2,e.length];return n=n.concat(e,[2,r.length],r),new t(n)}(p,y)}(e,b,n)}if("rsa"!==l&&"ecdsa/rsa"!==l)throw new Error("wrong private key type");e=t.concat([p,e]);for(var y=b.modulus.byteLength(),v=[0,1];e.length+v.length+1<y;)v.push(255);v.push(0);for(var g=-1;++g<e.length;)v.push(e[g]);return i(v,b)},e.exports.getKey=c,e.exports.makeKey=h}).call(this,r(3).Buffer)},function(e){e.exports={_args:[["elliptic@6.4.1","/Users/rjungemann/Projects/gather.com/xga-js"]],_development:!0,_from:"elliptic@6.4.1",_id:"elliptic@6.4.1",_inBundle:!1,_integrity:"sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==",_location:"/elliptic",_phantomChildren:{},_requested:{type:"version",registry:!0,raw:"elliptic@6.4.1",name:"elliptic",escapedName:"elliptic",rawSpec:"6.4.1",saveSpec:null,fetchSpec:"6.4.1"},_requiredBy:["/browserify-sign","/create-ecdh"],_resolved:"https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz",_spec:"6.4.1",_where:"/Users/rjungemann/Projects/gather.com/xga-js",author:{name:"Fedor Indutny",email:"fedor@indutny.com"},bugs:{url:"https://github.com/indutny/elliptic/issues"},dependencies:{"bn.js":"^4.4.0",brorand:"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0",inherits:"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},description:"EC cryptography",devDependencies:{brfs:"^1.4.3",coveralls:"^2.11.3",grunt:"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2",istanbul:"^0.4.2",jscs:"^2.9.0",jshint:"^2.6.0",mocha:"^2.1.0"},files:["lib"],homepage:"https://github.com/indutny/elliptic",keywords:["EC","Elliptic","curve","Cryptography"],license:"MIT",main:"lib/elliptic.js",name:"elliptic",repository:{type:"git",url:"git+ssh://git@github.com/indutny/elliptic.git"},scripts:{jscs:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",jshint:"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",lint:"npm run jscs && npm run jshint",test:"npm run lint && npm run unit",unit:"istanbul test _mocha --reporter=spec test/index.js",version:"grunt dist && git add dist/"},version:"6.4.1"}},function(e,t,r){"use strict";var n=t,i=r(2),o=r(6),a=r(67);n.assert=o,n.toArray=a.toArray,n.zero2=a.zero2,n.toHex=a.toHex,n.encode=a.encode,n.getNAF=function(e,t){for(var r=[],n=1<<t+1,i=e.clone();i.cmpn(1)>=0;){var o;if(i.isOdd()){var a=i.andln(n-1);o=a>(n>>1)-1?(n>>1)-a:a,i.isubn(o)}else o=0;r.push(o);for(var f=0!==i.cmpn(0)&&0===i.andln(n-1)?t+1:1,s=1;s<f;s++)r.push(0);i.iushrn(f)}return r},n.getJSF=function(e,t){var r=[[],[]];e=e.clone(),t=t.clone();for(var n=0,i=0;e.cmpn(-n)>0||t.cmpn(-i)>0;){var o,a,f,s=e.andln(3)+n&3,c=t.andln(3)+i&3;3===s&&(s=-1),3===c&&(c=-1),o=0==(1&s)?0:3!=(f=e.andln(7)+n&7)&&5!==f||2!==c?s:-s,r[0].push(o),a=0==(1&c)?0:3!=(f=t.andln(7)+i&7)&&5!==f||2!==s?c:-c,r[1].push(a),2*n===o+1&&(n=1-n),2*i===a+1&&(i=1-i),e.iushrn(1),t.iushrn(1)}return r},n.cachedProperty=function(e,t,r){var n="_"+t;e.prototype[t]=function(){return void 0!==this[n]?this[n]:this[n]=r.call(this)}},n.parseBytes=function(e){return"string"==typeof e?n.toArray(e,"hex"):e},n.intFromLE=function(e){return new i(e,"hex","le")}},function(e,t,r){"use strict";var n=r(2),i=r(4).utils,o=i.getNAF,a=i.getJSF,f=i.assert;function s(e,t){this.type=e,this.p=new n(t.p,16),this.red=t.prime?n.red(t.prime):n.mont(this.p),this.zero=new n(0).toRed(this.red),this.one=new n(1).toRed(this.red),this.two=new n(2).toRed(this.red),this.n=t.n&&new n(t.n,16),this.g=t.g&&this.pointFromJSON(t.g,t.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4);var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}function c(e,t){this.curve=e,this.type=t,this.precomputed=null}e.exports=s,s.prototype.point=function(){throw new Error("Not implemented")},s.prototype.validate=function(){throw new Error("Not implemented")},s.prototype._fixedNafMul=function(e,t){f(e.precomputed);var r=e._getDoubles(),n=o(t,1),i=(1<<r.step+1)-(r.step%2==0?2:1);i/=3;for(var a=[],s=0;s<n.length;s+=r.step){var c=0;for(t=s+r.step-1;t>=s;t--)c=(c<<1)+n[t];a.push(c)}for(var u=this.jpoint(null,null,null),h=this.jpoint(null,null,null),d=i;d>0;d--){for(s=0;s<a.length;s++){(c=a[s])===d?h=h.mixedAdd(r.points[s]):c===-d&&(h=h.mixedAdd(r.points[s].neg()))}u=u.add(h)}return u.toP()},s.prototype._wnafMul=function(e,t){var r=4,n=e._getNAFPoints(r);r=n.wnd;for(var i=n.points,a=o(t,r),s=this.jpoint(null,null,null),c=a.length-1;c>=0;c--){for(t=0;c>=0&&0===a[c];c--)t++;if(c>=0&&t++,s=s.dblp(t),c<0)break;var u=a[c];f(0!==u),s="affine"===e.type?u>0?s.mixedAdd(i[u-1>>1]):s.mixedAdd(i[-u-1>>1].neg()):u>0?s.add(i[u-1>>1]):s.add(i[-u-1>>1].neg())}return"affine"===e.type?s.toP():s},s.prototype._wnafMulAdd=function(e,t,r,n,i){for(var f=this._wnafT1,s=this._wnafT2,c=this._wnafT3,u=0,h=0;h<n;h++){var d=(I=t[h])._getNAFPoints(e);f[h]=d.wnd,s[h]=d.points}for(h=n-1;h>=1;h-=2){var l=h-1,p=h;if(1===f[l]&&1===f[p]){var b=[t[l],null,null,t[p]];0===t[l].y.cmp(t[p].y)?(b[1]=t[l].add(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg())):0===t[l].y.cmp(t[p].y.redNeg())?(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].add(t[p].neg())):(b[1]=t[l].toJ().mixedAdd(t[p]),b[2]=t[l].toJ().mixedAdd(t[p].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],v=a(r[l],r[p]);u=Math.max(v[0].length,u),c[l]=new Array(u),c[p]=new Array(u);for(var g=0;g<u;g++){var m=0|v[0][g],_=0|v[1][g];c[l][g]=y[3*(m+1)+(_+1)],c[p][g]=0,s[l]=b}}else c[l]=o(r[l],f[l]),c[p]=o(r[p],f[p]),u=Math.max(c[l].length,u),u=Math.max(c[p].length,u)}var w=this.jpoint(null,null,null),E=this._wnafT4;for(h=u;h>=0;h--){for(var S=0;h>=0;){var A=!0;for(g=0;g<n;g++)E[g]=0|c[g][h],0!==E[g]&&(A=!1);if(!A)break;S++,h--}if(h>=0&&S++,w=w.dblp(S),h<0)break;for(g=0;g<n;g++){var I,M=E[g];0!==M&&(M>0?I=s[g][M-1>>1]:M<0&&(I=s[g][-M-1>>1].neg()),w="affine"===I.type?w.mixedAdd(I):w.add(I))}}for(h=0;h<n;h++)s[h]=null;return i?w:w.toP()},s.BasePoint=c,c.prototype.eq=function(){throw new Error("Not implemented")},c.prototype.validate=function(){return this.curve.validate(this)},s.prototype.decodePoint=function(e,t){e=i.toArray(e,t);var r=this.p.byteLength();if((4===e[0]||6===e[0]||7===e[0])&&e.length-1==2*r)return 6===e[0]?f(e[e.length-1]%2==0):7===e[0]&&f(e[e.length-1]%2==1),this.point(e.slice(1,1+r),e.slice(1+r,1+2*r));if((2===e[0]||3===e[0])&&e.length-1===r)return this.pointFromX(e.slice(1,1+r),3===e[0]);throw new Error("Unknown point format")},c.prototype.encodeCompressed=function(e){return this.encode(e,!0)},c.prototype._encode=function(e){var t=this.curve.p.byteLength(),r=this.getX().toArray("be",t);return e?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",t))},c.prototype.encode=function(e,t){return i.encode(this._encode(t),e)},c.prototype.precompute=function(e){if(this.precomputed)return this;var t={doubles:null,naf:null,beta:null};return t.naf=this._getNAFPoints(8),t.doubles=this._getDoubles(4,e),t.beta=this._getBeta(),this.precomputed=t,this},c.prototype._hasDoubles=function(e){if(!this.precomputed)return!1;var t=this.precomputed.doubles;return!!t&&t.points.length>=Math.ceil((e.bitLength()+1)/t.step)},c.prototype._getDoubles=function(e,t){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],n=this,i=0;i<t;i+=e){for(var o=0;o<e;o++)n=n.dbl();r.push(n)}return{step:e,points:r}},c.prototype._getNAFPoints=function(e){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var t=[this],r=(1<<e)-1,n=1===r?null:this.dbl(),i=1;i<r;i++)t[i]=t[i-1].add(n);return{wnd:e,points:t}},c.prototype._getBeta=function(){return null},c.prototype.dblp=function(e){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}},function(e,t,r){"use strict";var n=r(23),i=r(4),o=r(2),a=r(1),f=n.base,s=i.utils.assert;function c(e){f.call(this,"short",e),this.a=new o(e.a,16).toRed(this.red),this.b=new o(e.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(e),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}function u(e,t,r,n){f.BasePoint.call(this,e,"affine"),null===t&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new o(t,16),this.y=new o(r,16),n&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function h(e,t,r,n){f.BasePoint.call(this,e,"jacobian"),null===t&&null===r&&null===n?(this.x=this.curve.one,this.y=this.curve.one,this.z=new o(0)):(this.x=new o(t,16),this.y=new o(r,16),this.z=new o(n,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}a(c,f),e.exports=c,c.prototype._getEndomorphism=function(e){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var t,r;if(e.beta)t=new o(e.beta,16).toRed(this.red);else{var n=this._getEndoRoots(this.p);t=(t=n[0].cmp(n[1])<0?n[0]:n[1]).toRed(this.red)}if(e.lambda)r=new o(e.lambda,16);else{var i=this._getEndoRoots(this.n);0===this.g.mul(i[0]).x.cmp(this.g.x.redMul(t))?r=i[0]:(r=i[1],s(0===this.g.mul(r).x.cmp(this.g.x.redMul(t))))}return{beta:t,lambda:r,basis:e.basis?e.basis.map(function(e){return{a:new o(e.a,16),b:new o(e.b,16)}}):this._getEndoBasis(r)}}},c.prototype._getEndoRoots=function(e){var t=e===this.p?this.red:o.mont(e),r=new o(2).toRed(t).redInvm(),n=r.redNeg(),i=new o(3).toRed(t).redNeg().redSqrt().redMul(r);return[n.redAdd(i).fromRed(),n.redSub(i).fromRed()]},c.prototype._getEndoBasis=function(e){for(var t,r,n,i,a,f,s,c,u,h=this.n.ushrn(Math.floor(this.n.bitLength()/2)),d=e,l=this.n.clone(),p=new o(1),b=new o(0),y=new o(0),v=new o(1),g=0;0!==d.cmpn(0);){var m=l.div(d);c=l.sub(m.mul(d)),u=y.sub(m.mul(p));var _=v.sub(m.mul(b));if(!n&&c.cmp(h)<0)t=s.neg(),r=p,n=c.neg(),i=u;else if(n&&2==++g)break;s=c,l=d,d=c,y=p,p=u,v=b,b=_}a=c.neg(),f=u;var w=n.sqr().add(i.sqr());return a.sqr().add(f.sqr()).cmp(w)>=0&&(a=t,f=r),n.negative&&(n=n.neg(),i=i.neg()),a.negative&&(a=a.neg(),f=f.neg()),[{a:n,b:i},{a:a,b:f}]},c.prototype._endoSplit=function(e){var t=this.endo.basis,r=t[0],n=t[1],i=n.b.mul(e).divRound(this.n),o=r.b.neg().mul(e).divRound(this.n),a=i.mul(r.a),f=o.mul(n.a),s=i.mul(r.b),c=o.mul(n.b);return{k1:e.sub(a).sub(f),k2:s.add(c).neg()}},c.prototype.pointFromX=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n=r.redSqrt();if(0!==n.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var i=n.fromRed().isOdd();return(t&&!i||!t&&i)&&(n=n.redNeg()),this.point(e,n)},c.prototype.validate=function(e){if(e.inf)return!0;var t=e.x,r=e.y,n=this.a.redMul(t),i=t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0===r.redSqr().redISub(i).cmpn(0)},c.prototype._endoWnafMulAdd=function(e,t,r){for(var n=this._endoWnafT1,i=this._endoWnafT2,o=0;o<e.length;o++){var a=this._endoSplit(t[o]),f=e[o],s=f._getBeta();a.k1.negative&&(a.k1.ineg(),f=f.neg(!0)),a.k2.negative&&(a.k2.ineg(),s=s.neg(!0)),n[2*o]=f,n[2*o+1]=s,i[2*o]=a.k1,i[2*o+1]=a.k2}for(var c=this._wnafMulAdd(1,n,i,2*o,r),u=0;u<2*o;u++)n[u]=null,i[u]=null;return c},a(u,f.BasePoint),c.prototype.point=function(e,t,r){return new u(this,e,t,r)},c.prototype.pointFromJSON=function(e,t){return u.fromJSON(this,e,t)},u.prototype._getBeta=function(){if(this.curve.endo){var e=this.precomputed;if(e&&e.beta)return e.beta;var t=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(e){var r=this.curve,n=function(e){return r.point(e.x.redMul(r.endo.beta),e.y)};e.beta=t,t.precomputed={beta:null,naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(n)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(n)}}}return t}},u.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},u.fromJSON=function(e,t,r){"string"==typeof t&&(t=JSON.parse(t));var n=e.point(t[0],t[1],r);if(!t[2])return n;function i(t){return e.point(t[0],t[1],r)}var o=t[2];return n.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[n].concat(o.doubles.points.map(i))},naf:o.naf&&{wnd:o.naf.wnd,points:[n].concat(o.naf.points.map(i))}},n},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return this.inf},u.prototype.add=function(e){if(this.inf)return e;if(e.inf)return this;if(this.eq(e))return this.dbl();if(this.neg().eq(e))return this.curve.point(null,null);if(0===this.x.cmp(e.x))return this.curve.point(null,null);var t=this.y.redSub(e.y);0!==t.cmpn(0)&&(t=t.redMul(this.x.redSub(e.x).redInvm()));var r=t.redSqr().redISub(this.x).redISub(e.x),n=t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,n)},u.prototype.dbl=function(){if(this.inf)return this;var e=this.y.redAdd(this.y);if(0===e.cmpn(0))return this.curve.point(null,null);var t=this.curve.a,r=this.x.redSqr(),n=e.redInvm(),i=r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o=i.redSqr().redISub(this.x.redAdd(this.x)),a=i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,a)},u.prototype.getX=function(){return this.x.fromRed()},u.prototype.getY=function(){return this.y.fromRed()},u.prototype.mul=function(e){return e=new o(e,16),this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve.endo?this.curve._endoWnafMulAdd([this],[e]):this.curve._wnafMul(this,e)},u.prototype.mulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i):this.curve._wnafMulAdd(1,n,i,2)},u.prototype.jmulAdd=function(e,t,r){var n=[this,t],i=[e,r];return this.curve.endo?this.curve._endoWnafMulAdd(n,i,!0):this.curve._wnafMulAdd(1,n,i,2,!0)},u.prototype.eq=function(e){return this===e||this.inf===e.inf&&(this.inf||0===this.x.cmp(e.x)&&0===this.y.cmp(e.y))},u.prototype.neg=function(e){if(this.inf)return this;var t=this.curve.point(this.x,this.y.redNeg());if(e&&this.precomputed){var r=this.precomputed,n=function(e){return e.neg()};t.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(n)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(n)}}}return t},u.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},a(h,f.BasePoint),c.prototype.jpoint=function(e,t,r){return new h(this,e,t,r)},h.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var e=this.z.redInvm(),t=e.redSqr(),r=this.x.redMul(t),n=this.y.redMul(t).redMul(e);return this.curve.point(r,n)},h.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},h.prototype.add=function(e){if(this.isInfinity())return e;if(e.isInfinity())return this;var t=e.z.redSqr(),r=this.z.redSqr(),n=this.x.redMul(t),i=e.x.redMul(r),o=this.y.redMul(t.redMul(e.z)),a=e.y.redMul(r.redMul(this.z)),f=n.redSub(i),s=o.redSub(a);if(0===f.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var c=f.redSqr(),u=c.redMul(f),h=n.redMul(c),d=s.redSqr().redIAdd(u).redISub(h).redISub(h),l=s.redMul(h.redISub(d)).redISub(o.redMul(u)),p=this.z.redMul(e.z).redMul(f);return this.curve.jpoint(d,l,p)},h.prototype.mixedAdd=function(e){if(this.isInfinity())return e.toJ();if(e.isInfinity())return this;var t=this.z.redSqr(),r=this.x,n=e.x.redMul(t),i=this.y,o=e.y.redMul(t).redMul(this.z),a=r.redSub(n),f=i.redSub(o);if(0===a.cmpn(0))return 0!==f.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var s=a.redSqr(),c=s.redMul(a),u=r.redMul(s),h=f.redSqr().redIAdd(c).redISub(u).redISub(u),d=f.redMul(u.redISub(h)).redISub(i.redMul(c)),l=this.z.redMul(a);return this.curve.jpoint(h,d,l)},h.prototype.dblp=function(e){if(0===e)return this;if(this.isInfinity())return this;if(!e)return this.dbl();if(this.curve.zeroA||this.curve.threeA){for(var t=this,r=0;r<e;r++)t=t.dbl();return t}var n=this.curve.a,i=this.curve.tinv,o=this.x,a=this.y,f=this.z,s=f.redSqr().redSqr(),c=a.redAdd(a);for(r=0;r<e;r++){var u=o.redSqr(),h=c.redSqr(),d=h.redSqr(),l=u.redAdd(u).redIAdd(u).redIAdd(n.redMul(s)),p=o.redMul(h),b=l.redSqr().redISub(p.redAdd(p)),y=p.redISub(b),v=l.redMul(y);v=v.redIAdd(v).redISub(d);var g=c.redMul(f);r+1<e&&(s=s.redMul(d)),o=b,f=g,c=v}return this.curve.jpoint(o,c.redMul(i),f)},h.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},h.prototype._zeroDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var f=n.redAdd(n).redIAdd(n),s=f.redSqr().redISub(a).redISub(a),c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),e=s,t=f.redMul(a.redISub(s)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.x.redSqr(),h=this.y.redSqr(),d=h.redSqr(),l=this.x.redAdd(h).redSqr().redISub(u).redISub(d);l=l.redIAdd(l);var p=u.redAdd(u).redIAdd(u),b=p.redSqr(),y=d.redIAdd(d);y=(y=y.redIAdd(y)).redIAdd(y),e=b.redISub(l).redISub(l),t=p.redMul(l.redISub(e)).redISub(y),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(e,t,r)},h.prototype._threeDbl=function(){var e,t,r;if(this.zOne){var n=this.x.redSqr(),i=this.y.redSqr(),o=i.redSqr(),a=this.x.redAdd(i).redSqr().redISub(n).redISub(o);a=a.redIAdd(a);var f=n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),s=f.redSqr().redISub(a).redISub(a);e=s;var c=o.redIAdd(o);c=(c=c.redIAdd(c)).redIAdd(c),t=f.redMul(a.redISub(s)).redISub(c),r=this.y.redAdd(this.y)}else{var u=this.z.redSqr(),h=this.y.redSqr(),d=this.x.redMul(h),l=this.x.redSub(u).redMul(this.x.redAdd(u));l=l.redAdd(l).redIAdd(l);var p=d.redIAdd(d),b=(p=p.redIAdd(p)).redAdd(p);e=l.redSqr().redISub(b),r=this.y.redAdd(this.z).redSqr().redISub(h).redISub(u);var y=h.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),t=l.redMul(p.redISub(e)).redISub(y)}return this.curve.jpoint(e,t,r)},h.prototype._dbl=function(){var e=this.curve.a,t=this.x,r=this.y,n=this.z,i=n.redSqr().redSqr(),o=t.redSqr(),a=r.redSqr(),f=o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),s=t.redAdd(t),c=(s=s.redIAdd(s)).redMul(a),u=f.redSqr().redISub(c.redAdd(c)),h=c.redISub(u),d=a.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=f.redMul(h).redISub(d),p=r.redAdd(r).redMul(n);return this.curve.jpoint(u,l,p)},h.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr(),n=t.redSqr(),i=e.redAdd(e).redIAdd(e),o=i.redSqr(),a=this.x.redAdd(t).redSqr().redISub(e).redISub(n),f=(a=(a=(a=a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(o)).redSqr(),s=n.redIAdd(n);s=(s=(s=s.redIAdd(s)).redIAdd(s)).redIAdd(s);var c=i.redIAdd(a).redSqr().redISub(o).redISub(f).redISub(s),u=t.redMul(c);u=(u=u.redIAdd(u)).redIAdd(u);var h=this.x.redMul(f).redISub(u);h=(h=h.redIAdd(h)).redIAdd(h);var d=this.y.redMul(c.redMul(s.redISub(c)).redISub(a.redMul(f)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var l=this.z.redAdd(a).redSqr().redISub(r).redISub(f);return this.curve.jpoint(h,d,l)},h.prototype.mul=function(e,t){return e=new o(e,t),this.curve._wnafMul(this,e)},h.prototype.eq=function(e){if("affine"===e.type)return this.eq(e.toJ());if(this===e)return!0;var t=this.z.redSqr(),r=e.z.redSqr();if(0!==this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0))return!1;var n=t.redMul(this.z),i=r.redMul(e.z);return 0===this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0)},h.prototype.eqXToP=function(e){var t=this.z.redSqr(),r=e.toRed(this.curve.red).redMul(t);if(0===this.x.cmp(r))return!0;for(var n=e.clone(),i=this.curve.redN.redMul(t);;){if(n.iadd(this.curve.n),n.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(i),0===this.x.cmp(r))return!0}},h.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},h.prototype.isInfinity=function(){return 0===this.z.cmpn(0)}},function(e,t,r){"use strict";var n=r(23),i=r(2),o=r(1),a=n.base,f=r(4).utils;function s(e){a.call(this,"mont",e),this.a=new i(e.a,16).toRed(this.red),this.b=new i(e.b,16).toRed(this.red),this.i4=new i(4).toRed(this.red).redInvm(),this.two=new i(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}function c(e,t,r){a.BasePoint.call(this,e,"projective"),null===t&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new i(t,16),this.z=new i(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}o(s,a),e.exports=s,s.prototype.validate=function(e){var t=e.normalize().x,r=t.redSqr(),n=r.redMul(t).redAdd(r.redMul(this.a)).redAdd(t);return 0===n.redSqrt().redSqr().cmp(n)},o(c,a.BasePoint),s.prototype.decodePoint=function(e,t){return this.point(f.toArray(e,t),1)},s.prototype.point=function(e,t){return new c(this,e,t)},s.prototype.pointFromJSON=function(e){return c.fromJSON(this,e)},c.prototype.precompute=function(){},c.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},c.fromJSON=function(e,t){return new c(e,t[0],t[1]||e.one)},c.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},c.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},c.prototype.dbl=function(){var e=this.x.redAdd(this.z).redSqr(),t=this.x.redSub(this.z).redSqr(),r=e.redSub(t),n=e.redMul(t),i=r.redMul(t.redAdd(this.curve.a24.redMul(r)));return this.curve.point(n,i)},c.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.diffAdd=function(e,t){var r=this.x.redAdd(this.z),n=this.x.redSub(this.z),i=e.x.redAdd(e.z),o=e.x.redSub(e.z).redMul(r),a=i.redMul(n),f=t.z.redMul(o.redAdd(a).redSqr()),s=t.x.redMul(o.redISub(a).redSqr());return this.curve.point(f,s)},c.prototype.mul=function(e){for(var t=e.clone(),r=this,n=this.curve.point(null,null),i=[];0!==t.cmpn(0);t.iushrn(1))i.push(t.andln(1));for(var o=i.length-1;o>=0;o--)0===i[o]?(r=r.diffAdd(n,this),n=n.dbl()):(n=r.diffAdd(n,this),r=r.dbl());return n},c.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},c.prototype.eq=function(e){return 0===this.getX().cmp(e.getX())},c.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},c.prototype.getX=function(){return this.normalize(),this.x.fromRed()}},function(e,t,r){"use strict";var n=r(23),i=r(4),o=r(2),a=r(1),f=n.base,s=i.utils.assert;function c(e){this.twisted=1!=(0|e.a),this.mOneA=this.twisted&&-1==(0|e.a),this.extended=this.mOneA,f.call(this,"edwards",e),this.a=new o(e.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new o(e.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new o(e.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),s(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|e.c)}function u(e,t,r,n,i){f.BasePoint.call(this,e,"projective"),null===t&&null===r&&null===n?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new o(t,16),this.y=new o(r,16),this.z=n?new o(n,16):this.curve.one,this.t=i&&new o(i,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}a(c,f),e.exports=c,c.prototype._mulA=function(e){return this.mOneA?e.redNeg():this.a.redMul(e)},c.prototype._mulC=function(e){return this.oneC?e:this.c.redMul(e)},c.prototype.jpoint=function(e,t,r,n){return this.point(e,t,r,n)},c.prototype.pointFromX=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=this.c2.redSub(this.a.redMul(r)),i=this.one.redSub(this.c2.redMul(this.d).redMul(r)),a=n.redMul(i.redInvm()),f=a.redSqrt();if(0!==f.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");var s=f.fromRed().isOdd();return(t&&!s||!t&&s)&&(f=f.redNeg()),this.point(e,f)},c.prototype.pointFromY=function(e,t){(e=new o(e,16)).red||(e=e.toRed(this.red));var r=e.redSqr(),n=r.redSub(this.c2),i=r.redMul(this.d).redMul(this.c2).redSub(this.a),a=n.redMul(i.redInvm());if(0===a.cmp(this.zero)){if(t)throw new Error("invalid point");return this.point(this.zero,e)}var f=a.redSqrt();if(0!==f.redSqr().redSub(a).cmp(this.zero))throw new Error("invalid point");return f.fromRed().isOdd()!==t&&(f=f.redNeg()),this.point(f,e)},c.prototype.validate=function(e){if(e.isInfinity())return!0;e.normalize();var t=e.x.redSqr(),r=e.y.redSqr(),n=t.redMul(this.a).redAdd(r),i=this.c2.redMul(this.one.redAdd(this.d.redMul(t).redMul(r)));return 0===n.cmp(i)},a(u,f.BasePoint),c.prototype.pointFromJSON=function(e){return u.fromJSON(this,e)},c.prototype.point=function(e,t,r,n){return new u(this,e,t,r,n)},u.fromJSON=function(e,t){return new u(e,t[0],t[1],t[2])},u.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},u.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},u.prototype._extDbl=function(){var e=this.x.redSqr(),t=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var n=this.curve._mulA(e),i=this.x.redAdd(this.y).redSqr().redISub(e).redISub(t),o=n.redAdd(t),a=o.redSub(r),f=n.redSub(t),s=i.redMul(a),c=o.redMul(f),u=i.redMul(f),h=a.redMul(o);return this.curve.point(s,c,h,u)},u.prototype._projDbl=function(){var e,t,r,n=this.x.redAdd(this.y).redSqr(),i=this.x.redSqr(),o=this.y.redSqr();if(this.curve.twisted){var a=(c=this.curve._mulA(i)).redAdd(o);if(this.zOne)e=n.redSub(i).redSub(o).redMul(a.redSub(this.curve.two)),t=a.redMul(c.redSub(o)),r=a.redSqr().redSub(a).redSub(a);else{var f=this.z.redSqr(),s=a.redSub(f).redISub(f);e=n.redSub(i).redISub(o).redMul(s),t=a.redMul(c.redSub(o)),r=a.redMul(s)}}else{var c=i.redAdd(o);f=this.curve._mulC(this.z).redSqr(),s=c.redSub(f).redSub(f);e=this.curve._mulC(n.redISub(c)).redMul(s),t=this.curve._mulC(c).redMul(i.redISub(o)),r=c.redMul(s)}return this.curve.point(e,t,r)},u.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},u.prototype._extAdd=function(e){var t=this.y.redSub(this.x).redMul(e.y.redSub(e.x)),r=this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)),n=this.t.redMul(this.curve.dd).redMul(e.t),i=this.z.redMul(e.z.redAdd(e.z)),o=r.redSub(t),a=i.redSub(n),f=i.redAdd(n),s=r.redAdd(t),c=o.redMul(a),u=f.redMul(s),h=o.redMul(s),d=a.redMul(f);return this.curve.point(c,u,d,h)},u.prototype._projAdd=function(e){var t,r,n=this.z.redMul(e.z),i=n.redSqr(),o=this.x.redMul(e.x),a=this.y.redMul(e.y),f=this.curve.d.redMul(o).redMul(a),s=i.redSub(f),c=i.redAdd(f),u=this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(o).redISub(a),h=n.redMul(s).redMul(u);return this.curve.twisted?(t=n.redMul(c).redMul(a.redSub(this.curve._mulA(o))),r=s.redMul(c)):(t=n.redMul(c).redMul(a.redSub(o)),r=this.curve._mulC(s).redMul(c)),this.curve.point(h,t,r)},u.prototype.add=function(e){return this.isInfinity()?e:e.isInfinity()?this:this.curve.extended?this._extAdd(e):this._projAdd(e)},u.prototype.mul=function(e){return this._hasDoubles(e)?this.curve._fixedNafMul(this,e):this.curve._wnafMul(this,e)},u.prototype.mulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!1)},u.prototype.jmulAdd=function(e,t,r){return this.curve._wnafMulAdd(1,[this,t],[e,r],2,!0)},u.prototype.normalize=function(){if(this.zOne)return this;var e=this.z.redInvm();return this.x=this.x.redMul(e),this.y=this.y.redMul(e),this.t&&(this.t=this.t.redMul(e)),this.z=this.curve.one,this.zOne=!0,this},u.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},u.prototype.getX=function(){return this.normalize(),this.x.fromRed()},u.prototype.getY=function(){return this.normalize(),this.y.fromRed()},u.prototype.eq=function(e){return this===e||0===this.getX().cmp(e.getX())&&0===this.getY().cmp(e.getY())},u.prototype.eqXToP=function(e){var t=e.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(t))return!0;for(var r=e.clone(),n=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(t.redIAdd(n),0===this.x.cmp(t))return!0}},u.prototype.toP=u.prototype.normalize,u.prototype.mixedAdd=u.prototype.add},function(e,t,r){"use strict";var n,i=t,o=r(38),a=r(4),f=a.utils.assert;function s(e){"short"===e.type?this.curve=new a.curve.short(e):"edwards"===e.type?this.curve=new a.curve.edwards(e):this.curve=new a.curve.mont(e),this.g=this.curve.g,this.n=this.curve.n,this.hash=e.hash,f(this.g.validate(),"Invalid curve"),f(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function c(e,t){Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:function(){var r=new s(t);return Object.defineProperty(i,e,{configurable:!0,enumerable:!0,value:r}),r}})}i.PresetCurve=s,c("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:o.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),c("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:o.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),c("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:o.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),c("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:o.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),c("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:o.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),c("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["9"]}),c("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:o.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{n=r(164)}catch(e){n=void 0}c("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:o.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",n]})},function(e,t,r){"use strict";t.sha1=r(159),t.sha224=r(160),t.sha256=r(69),t.sha384=r(161),t.sha512=r(70)},function(e,t,r){"use strict";var n=r(7),i=r(17),o=r(68),a=n.rotl32,f=n.sum32,s=n.sum32_5,c=o.ft_1,u=i.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function d(){if(!(this instanceof d))return new d;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}n.inherits(d,u),e.exports=d,d.blockSize=512,d.outSize=160,d.hmacStrength=80,d.padLength=64,d.prototype._update=function(e,t){for(var r=this.W,n=0;n<16;n++)r[n]=e[t+n];for(;n<r.length;n++)r[n]=a(r[n-3]^r[n-8]^r[n-14]^r[n-16],1);var i=this.h[0],o=this.h[1],u=this.h[2],d=this.h[3],l=this.h[4];for(n=0;n<r.length;n++){var p=~~(n/20),b=s(a(i,5),c(p,o,u,d),l,r[n],h[p]);l=d,d=u,u=a(o,30),o=i,i=b}this.h[0]=f(this.h[0],i),this.h[1]=f(this.h[1],o),this.h[2]=f(this.h[2],u),this.h[3]=f(this.h[3],d),this.h[4]=f(this.h[4],l)},d.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"big"):n.split32(this.h,"big")}},function(e,t,r){"use strict";var n=r(7),i=r(69);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=512,o.outSize=224,o.hmacStrength=192,o.padLength=64,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,7),"big"):n.split32(this.h.slice(0,7),"big")}},function(e,t,r){"use strict";var n=r(7),i=r(70);function o(){if(!(this instanceof o))return new o;i.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}n.inherits(o,i),e.exports=o,o.blockSize=1024,o.outSize=384,o.hmacStrength=192,o.padLength=128,o.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h.slice(0,12),"big"):n.split32(this.h.slice(0,12),"big")}},function(e,t,r){"use strict";var n=r(7),i=r(17),o=n.rotl32,a=n.sum32,f=n.sum32_3,s=n.sum32_4,c=i.BlockHash;function u(){if(!(this instanceof u))return new u;c.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function h(e,t,r,n){return e<=15?t^r^n:e<=31?t&r|~t&n:e<=47?(t|~r)^n:e<=63?t&n|r&~n:t^(r|~n)}function d(e){return e<=15?0:e<=31?1518500249:e<=47?1859775393:e<=63?2400959708:2840853838}function l(e){return e<=15?1352829926:e<=31?1548603684:e<=47?1836072691:e<=63?2053994217:0}n.inherits(u,c),t.ripemd160=u,u.blockSize=512,u.outSize=160,u.hmacStrength=192,u.padLength=64,u.prototype._update=function(e,t){for(var r=this.h[0],n=this.h[1],i=this.h[2],c=this.h[3],u=this.h[4],g=r,m=n,_=i,w=c,E=u,S=0;S<80;S++){var A=a(o(s(r,h(S,n,i,c),e[p[S]+t],d(S)),y[S]),u);r=u,u=c,c=o(i,10),i=n,n=A,A=a(o(s(g,h(79-S,m,_,w),e[b[S]+t],l(S)),v[S]),E),g=E,E=w,w=o(_,10),_=m,m=A}A=f(this.h[1],i,w),this.h[1]=f(this.h[2],c,E),this.h[2]=f(this.h[3],u,g),this.h[3]=f(this.h[4],r,m),this.h[4]=f(this.h[0],n,_),this.h[0]=A},u.prototype._digest=function(e){return"hex"===e?n.toHex32(this.h,"little"):n.split32(this.h,"little")};var p=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],b=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],v=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},function(e,t,r){"use strict";var n=r(7),i=r(6);function o(e,t,r){if(!(this instanceof o))return new o(e,t,r);this.Hash=e,this.blockSize=e.blockSize/8,this.outSize=e.outSize/8,this.inner=null,this.outer=null,this._init(n.toArray(t,r))}e.exports=o,o.prototype._init=function(e){e.length>this.blockSize&&(e=(new this.Hash).update(e).digest()),i(e.length<=this.blockSize);for(var t=e.length;t<this.blockSize;t++)e.push(0);for(t=0;t<e.length;t++)e[t]^=54;for(this.inner=(new this.Hash).update(e),t=0;t<e.length;t++)e[t]^=106;this.outer=(new this.Hash).update(e)},o.prototype.update=function(e,t){return this.inner.update(e,t),this},o.prototype.digest=function(e){return this.outer.update(this.inner.digest()),this.outer.digest(e)}},function(e,t){e.exports={doubles:{step:4,points:[["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a","f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508","11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739","d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640","4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c","4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda","96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa","5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0","cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d","9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d","e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1","9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0","5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047","10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862","283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7","7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd","56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83","7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a","53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8","bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d","4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725","7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754","4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c","17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6","6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39","c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891","893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b","febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03","2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d","eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070","7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4","e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da","662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11","1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e","efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41","2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef","67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8","db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d","648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96","35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd","ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5","9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266","40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71","34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac","c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751","1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e","493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241","c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3","be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f","4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19","aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be","b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9","6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2","8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13","7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c","ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba","2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151","e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073","d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458","38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b","69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366","d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa","40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0","620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787","7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e","ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"]]},naf:{wnd:7,points:[["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9","388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4","d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc","6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe","cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb","d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8","ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e","581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34","4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c","85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5","321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f","2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714","73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729","a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db","2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4","e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5","b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479","2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d","80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f","1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb","d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9","eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963","758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74","958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530","e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b","5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247","cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1","cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120","4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435","91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18","673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8","59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb","3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f","55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143","efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba","e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45","f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a","744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e","c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8","e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c","30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519","e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab","100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca","ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf","8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610","68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4","f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c","d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940","edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980","a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3","66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf","9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63","4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448","fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf","5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5","8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6","8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5","5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99","f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51","f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5","42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5","204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997","4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881","73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5","39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66","d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726","ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede","6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94","60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31","3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51","b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252","ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5","cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b","6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4","322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f","6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889","2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246","b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984","998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a","b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030","bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197","6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593","c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef","21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38","60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a","49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111","5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502","7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea","be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26","8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986","39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e","62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4","25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda","ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859","cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f","f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c","6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942","fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a","1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80","5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d","438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1","cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63","c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352","6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193","ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00","9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58","ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7","d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8","c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e","67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d","cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b","299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f","f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6","462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297","62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a","7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c","ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52","4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb","bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065","bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917","603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9","cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3","553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57","712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66","ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8","9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721","9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180","4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"]]}}},function(e,t,r){"use strict";var n=r(2),i=r(166),o=r(4),a=o.utils.assert,f=r(167),s=r(168);function c(e){if(!(this instanceof c))return new c(e);"string"==typeof e&&(a(o.curves.hasOwnProperty(e),"Unknown curve "+e),e=o.curves[e]),e instanceof o.curves.PresetCurve&&(e={curve:e}),this.curve=e.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=e.curve.g,this.g.precompute(e.curve.n.bitLength()+1),this.hash=e.hash||e.curve.hash}e.exports=c,c.prototype.keyPair=function(e){return new f(this,e)},c.prototype.keyFromPrivate=function(e,t){return f.fromPrivate(this,e,t)},c.prototype.keyFromPublic=function(e,t){return f.fromPublic(this,e,t)},c.prototype.genKeyPair=function(e){e||(e={});for(var t=new i({hash:this.hash,pers:e.pers,persEnc:e.persEnc||"utf8",entropy:e.entropy||o.rand(this.hash.hmacStrength),entropyEnc:e.entropy&&e.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),a=this.n.sub(new n(2));;){var f=new n(t.generate(r));if(!(f.cmp(a)>0))return f.iaddn(1),this.keyFromPrivate(f)}},c.prototype._truncateToN=function(e,t){var r=8*e.byteLength()-this.n.bitLength();return r>0&&(e=e.ushrn(r)),!t&&e.cmp(this.n)>=0?e.sub(this.n):e},c.prototype.sign=function(e,t,r,o){"object"==typeof r&&(o=r,r=null),o||(o={}),t=this.keyFromPrivate(t,r),e=this._truncateToN(new n(e,16));for(var a=this.n.byteLength(),f=t.getPrivate().toArray("be",a),c=e.toArray("be",a),u=new i({hash:this.hash,entropy:f,nonce:c,pers:o.pers,persEnc:o.persEnc||"utf8"}),h=this.n.sub(new n(1)),d=0;;d++){var l=o.k?o.k(d):new n(u.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(h)>=0)){var p=this.g.mul(l);if(!p.isInfinity()){var b=p.getX(),y=b.umod(this.n);if(0!==y.cmpn(0)){var v=l.invm(this.n).mul(y.mul(t.getPrivate()).iadd(e));if(0!==(v=v.umod(this.n)).cmpn(0)){var g=(p.getY().isOdd()?1:0)|(0!==b.cmp(y)?2:0);return o.canonical&&v.cmp(this.nh)>0&&(v=this.n.sub(v),g^=1),new s({r:y,s:v,recoveryParam:g})}}}}}},c.prototype.verify=function(e,t,r,i){e=this._truncateToN(new n(e,16)),r=this.keyFromPublic(r,i);var o=(t=new s(t,"hex")).r,a=t.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(a.cmpn(1)<0||a.cmp(this.n)>=0)return!1;var f,c=a.invm(this.n),u=c.mul(e).umod(this.n),h=c.mul(o).umod(this.n);return this.curve._maxwellTrick?!(f=this.g.jmulAdd(u,r.getPublic(),h)).isInfinity()&&f.eqXToP(o):!(f=this.g.mulAdd(u,r.getPublic(),h)).isInfinity()&&0===f.getX().umod(this.n).cmp(o)},c.prototype.recoverPubKey=function(e,t,r,i){a((3&r)===r,"The recovery param is more than two bits"),t=new s(t,i);var o=this.n,f=new n(e),c=t.r,u=t.s,h=1&r,d=r>>1;if(c.cmp(this.curve.p.umod(this.curve.n))>=0&&d)throw new Error("Unable to find sencond key candinate");c=d?this.curve.pointFromX(c.add(this.curve.n),h):this.curve.pointFromX(c,h);var l=t.r.invm(o),p=o.sub(f).mul(l).umod(o),b=u.mul(l).umod(o);return this.g.mulAdd(p,c,b)},c.prototype.getKeyRecoveryParam=function(e,t,r,n){if(null!==(t=new s(t,n)).recoveryParam)return t.recoveryParam;for(var i=0;i<4;i++){var o;try{o=this.recoverPubKey(e,t,i)}catch(e){continue}if(o.eq(r))return i}throw new Error("Unable to find valid recovery factor")}},function(e,t,r){"use strict";var n=r(38),i=r(67),o=r(6);function a(e){if(!(this instanceof a))return new a(e);this.hash=e.hash,this.predResist=!!e.predResist,this.outLen=this.hash.outSize,this.minEntropy=e.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var t=i.toArray(e.entropy,e.entropyEnc||"hex"),r=i.toArray(e.nonce,e.nonceEnc||"hex"),n=i.toArray(e.pers,e.persEnc||"hex");o(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(t,r,n)}e.exports=a,a.prototype._init=function(e,t,r){var n=e.concat(t).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var i=0;i<this.V.length;i++)this.K[i]=0,this.V[i]=1;this._update(n),this._reseed=1,this.reseedInterval=281474976710656},a.prototype._hmac=function(){return new n.hmac(this.hash,this.K)},a.prototype._update=function(e){var t=this._hmac().update(this.V).update([0]);e&&(t=t.update(e)),this.K=t.digest(),this.V=this._hmac().update(this.V).digest(),e&&(this.K=this._hmac().update(this.V).update([1]).update(e).digest(),this.V=this._hmac().update(this.V).digest())},a.prototype.reseed=function(e,t,r,n){"string"!=typeof t&&(n=r,r=t,t=null),e=i.toArray(e,t),r=i.toArray(r,n),o(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(e.concat(r||[])),this._reseed=1},a.prototype.generate=function(e,t,r,n){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof t&&(n=r,r=t,t=null),r&&(r=i.toArray(r,n||"hex"),this._update(r));for(var o=[];o.length<e;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var a=o.slice(0,e);return this._update(r),this._reseed++,i.encode(a,t)}},function(e,t,r){"use strict";var n=r(2),i=r(4).utils.assert;function o(e,t){this.ec=e,this.priv=null,this.pub=null,t.priv&&this._importPrivate(t.priv,t.privEnc),t.pub&&this._importPublic(t.pub,t.pubEnc)}e.exports=o,o.fromPublic=function(e,t,r){return t instanceof o?t:new o(e,{pub:t,pubEnc:r})},o.fromPrivate=function(e,t,r){return t instanceof o?t:new o(e,{priv:t,privEnc:r})},o.prototype.validate=function(){var e=this.getPublic();return e.isInfinity()?{result:!1,reason:"Invalid public key"}:e.validate()?e.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},o.prototype.getPublic=function(e,t){return"string"==typeof e&&(t=e,e=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),t?this.pub.encode(t,e):this.pub},o.prototype.getPrivate=function(e){return"hex"===e?this.priv.toString(16,2):this.priv},o.prototype._importPrivate=function(e,t){this.priv=new n(e,t||16),this.priv=this.priv.umod(this.ec.curve.n)},o.prototype._importPublic=function(e,t){if(e.x||e.y)return"mont"===this.ec.curve.type?i(e.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||i(e.x&&e.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(e.x,e.y));this.pub=this.ec.curve.decodePoint(e,t)},o.prototype.derive=function(e){return e.mul(this.priv).getX()},o.prototype.sign=function(e,t,r){return this.ec.sign(e,this,t,r)},o.prototype.verify=function(e,t){return this.ec.verify(e,t,this)},o.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"}},function(e,t,r){"use strict";var n=r(2),i=r(4).utils,o=i.assert;function a(e,t){if(e instanceof a)return e;this._importDER(e,t)||(o(e.r&&e.s,"Signature without r or s"),this.r=new n(e.r,16),this.s=new n(e.s,16),void 0===e.recoveryParam?this.recoveryParam=null:this.recoveryParam=e.recoveryParam)}function f(){this.place=0}function s(e,t){var r=e[t.place++];if(!(128&r))return r;for(var n=15&r,i=0,o=0,a=t.place;o<n;o++,a++)i<<=8,i|=e[a];return t.place=a,i}function c(e){for(var t=0,r=e.length-1;!e[t]&&!(128&e[t+1])&&t<r;)t++;return 0===t?e:e.slice(t)}function u(e,t){if(t<128)e.push(t);else{var r=1+(Math.log(t)/Math.LN2>>>3);for(e.push(128|r);--r;)e.push(t>>>(r<<3)&255);e.push(t)}}e.exports=a,a.prototype._importDER=function(e,t){e=i.toArray(e,t);var r=new f;if(48!==e[r.place++])return!1;if(s(e,r)+r.place!==e.length)return!1;if(2!==e[r.place++])return!1;var o=s(e,r),a=e.slice(r.place,o+r.place);if(r.place+=o,2!==e[r.place++])return!1;var c=s(e,r);if(e.length!==c+r.place)return!1;var u=e.slice(r.place,c+r.place);return 0===a[0]&&128&a[1]&&(a=a.slice(1)),0===u[0]&&128&u[1]&&(u=u.slice(1)),this.r=new n(a),this.s=new n(u),this.recoveryParam=null,!0},a.prototype.toDER=function(e){var t=this.r.toArray(),r=this.s.toArray();for(128&t[0]&&(t=[0].concat(t)),128&r[0]&&(r=[0].concat(r)),t=c(t),r=c(r);!(r[0]||128&r[1]);)r=r.slice(1);var n=[2];u(n,t.length),(n=n.concat(t)).push(2),u(n,r.length);var o=n.concat(r),a=[48];return u(a,o.length),a=a.concat(o),i.encode(a,e)}},function(e,t,r){"use strict";var n=r(38),i=r(4),o=i.utils,a=o.assert,f=o.parseBytes,s=r(170),c=r(171);function u(e){if(a("ed25519"===e,"only tested with ed25519 so far"),!(this instanceof u))return new u(e);e=i.curves[e].curve;this.curve=e,this.g=e.g,this.g.precompute(e.n.bitLength()+1),this.pointClass=e.point().constructor,this.encodingLength=Math.ceil(e.n.bitLength()/8),this.hash=n.sha512}e.exports=u,u.prototype.sign=function(e,t){e=f(e);var r=this.keyFromSecret(t),n=this.hashInt(r.messagePrefix(),e),i=this.g.mul(n),o=this.encodePoint(i),a=this.hashInt(o,r.pubBytes(),e).mul(r.priv()),s=n.add(a).umod(this.curve.n);return this.makeSignature({R:i,S:s,Rencoded:o})},u.prototype.verify=function(e,t,r){e=f(e),t=this.makeSignature(t);var n=this.keyFromPublic(r),i=this.hashInt(t.Rencoded(),n.pubBytes(),e),o=this.g.mul(t.S());return t.R().add(n.pub().mul(i)).eq(o)},u.prototype.hashInt=function(){for(var e=this.hash(),t=0;t<arguments.length;t++)e.update(arguments[t]);return o.intFromLE(e.digest()).umod(this.curve.n)},u.prototype.keyFromPublic=function(e){return s.fromPublic(this,e)},u.prototype.keyFromSecret=function(e){return s.fromSecret(this,e)},u.prototype.makeSignature=function(e){return e instanceof c?e:new c(this,e)},u.prototype.encodePoint=function(e){var t=e.getY().toArray("le",this.encodingLength);return t[this.encodingLength-1]|=e.getX().isOdd()?128:0,t},u.prototype.decodePoint=function(e){var t=(e=o.parseBytes(e)).length-1,r=e.slice(0,t).concat(-129&e[t]),n=0!=(128&e[t]),i=o.intFromLE(r);return this.curve.pointFromY(i,n)},u.prototype.encodeInt=function(e){return e.toArray("le",this.encodingLength)},u.prototype.decodeInt=function(e){return o.intFromLE(e)},u.prototype.isPoint=function(e){return e instanceof this.pointClass}},function(e,t,r){"use strict";var n=r(4).utils,i=n.assert,o=n.parseBytes,a=n.cachedProperty;function f(e,t){this.eddsa=e,this._secret=o(t.secret),e.isPoint(t.pub)?this._pub=t.pub:this._pubBytes=o(t.pub)}f.fromPublic=function(e,t){return t instanceof f?t:new f(e,{pub:t})},f.fromSecret=function(e,t){return t instanceof f?t:new f(e,{secret:t})},f.prototype.secret=function(){return this._secret},a(f,"pubBytes",function(){return this.eddsa.encodePoint(this.pub())}),a(f,"pub",function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())}),a(f,"privBytes",function(){var e=this.eddsa,t=this.hash(),r=e.encodingLength-1,n=t.slice(0,e.encodingLength);return n[0]&=248,n[r]&=127,n[r]|=64,n}),a(f,"priv",function(){return this.eddsa.decodeInt(this.privBytes())}),a(f,"hash",function(){return this.eddsa.hash().update(this.secret()).digest()}),a(f,"messagePrefix",function(){return this.hash().slice(this.eddsa.encodingLength)}),f.prototype.sign=function(e){return i(this._secret,"KeyPair can only verify"),this.eddsa.sign(e,this)},f.prototype.verify=function(e,t){return this.eddsa.verify(e,t,this)},f.prototype.getSecret=function(e){return i(this._secret,"KeyPair is public only"),n.encode(this.secret(),e)},f.prototype.getPublic=function(e){return n.encode(this.pubBytes(),e)},e.exports=f},function(e,t,r){"use strict";var n=r(2),i=r(4).utils,o=i.assert,a=i.cachedProperty,f=i.parseBytes;function s(e,t){this.eddsa=e,"object"!=typeof t&&(t=f(t)),Array.isArray(t)&&(t={R:t.slice(0,e.encodingLength),S:t.slice(e.encodingLength)}),o(t.R&&t.S,"Signature without R or S"),e.isPoint(t.R)&&(this._R=t.R),t.S instanceof n&&(this._S=t.S),this._Rencoded=Array.isArray(t.R)?t.R:t.Rencoded,this._Sencoded=Array.isArray(t.S)?t.S:t.Sencoded}a(s,"S",function(){return this.eddsa.decodeInt(this.Sencoded())}),a(s,"R",function(){return this.eddsa.decodePoint(this.Rencoded())}),a(s,"Rencoded",function(){return this.eddsa.encodePoint(this.R())}),a(s,"Sencoded",function(){return this.eddsa.encodeInt(this.S())}),s.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},s.prototype.toHex=function(){return i.encode(this.toBytes(),"hex").toUpperCase()},e.exports=s},function(e,t,r){"use strict";var n=r(18);t.certificate=r(183);var i=n.define("RSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("modulus").int(),this.key("publicExponent").int(),this.key("privateExponent").int(),this.key("prime1").int(),this.key("prime2").int(),this.key("exponent1").int(),this.key("exponent2").int(),this.key("coefficient").int())});t.RSAPrivateKey=i;var o=n.define("RSAPublicKey",function(){this.seq().obj(this.key("modulus").int(),this.key("publicExponent").int())});t.RSAPublicKey=o;var a=n.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(f),this.key("subjectPublicKey").bitstr())});t.PublicKey=a;var f=n.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("none").null_().optional(),this.key("curve").objid().optional(),this.key("params").seq().obj(this.key("p").int(),this.key("q").int(),this.key("g").int()).optional())}),s=n.define("PrivateKeyInfo",function(){this.seq().obj(this.key("version").int(),this.key("algorithm").use(f),this.key("subjectPrivateKey").octstr())});t.PrivateKey=s;var c=n.define("EncryptedPrivateKeyInfo",function(){this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(),this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(),this.key("kdeparams").seq().obj(this.key("salt").octstr(),this.key("iters").int())),this.key("cipher").seq().obj(this.key("algo").objid(),this.key("iv").octstr()))),this.key("subjectPrivateKey").octstr())});t.EncryptedPrivateKey=c;var u=n.define("DSAPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("p").int(),this.key("q").int(),this.key("g").int(),this.key("pub_key").int(),this.key("priv_key").int())});t.DSAPrivateKey=u,t.DSAparam=n.define("DSAparam",function(){this.int()});var h=n.define("ECPrivateKey",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).use(d),this.key("publicKey").optional().explicit(1).bitstr())});t.ECPrivateKey=h;var d=n.define("ECParameters",function(){this.choice({namedCurve:this.objid()})});t.signature=n.define("signature",function(){this.seq().obj(this.key("r").int(),this.key("s").int())})},function(e,t,r){var n=r(18),i=r(1);function o(e,t){this.name=e,this.body=t,this.decoders={},this.encoders={}}t.define=function(e,t){return new o(e,t)},o.prototype._createNamed=function(e){var t;try{t=r(174).runInThisContext("(function "+this.name+"(entity) {\n  this._initNamed(entity);\n})")}catch(e){t=function(e){this._initNamed(e)}}return i(t,e),t.prototype._initNamed=function(t){e.call(this,t)},new t(this)},o.prototype._getDecoder=function(e){return e=e||"der",this.decoders.hasOwnProperty(e)||(this.decoders[e]=this._createNamed(n.decoders[e])),this.decoders[e]},o.prototype.decode=function(e,t,r){return this._getDecoder(t).decode(e,r)},o.prototype._getEncoder=function(e){return e=e||"der",this.encoders.hasOwnProperty(e)||(this.encoders[e]=this._createNamed(n.encoders[e])),this.encoders[e]},o.prototype.encode=function(e,t,r){return this._getEncoder(t).encode(e,r)}},function(module,exports,__webpack_require__){var indexOf=__webpack_require__(175),Object_keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var r in e)t.push(r);return t},forEach=function(e,t){if(e.forEach)return e.forEach(t);for(var r=0;r<e.length;r++)t(e[r],r,e)},defineProp=function(){try{return Object.defineProperty({},"_",{}),function(e,t,r){Object.defineProperty(e,t,{writable:!0,enumerable:!1,configurable:!0,value:r})}}catch(e){return function(e,t,r){e[t]=r}}}(),globals=["Array","Boolean","Date","Error","EvalError","Function","Infinity","JSON","Math","NaN","Number","Object","RangeError","ReferenceError","RegExp","String","SyntaxError","TypeError","URIError","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","eval","isFinite","isNaN","parseFloat","parseInt","undefined","unescape"];function Context(){}Context.prototype={};var Script=exports.Script=function(e){if(!(this instanceof Script))return new Script(e);this.code=e};Script.prototype.runInContext=function(e){if(!(e instanceof Context))throw new TypeError("needs a 'context' argument.");var t=document.createElement("iframe");t.style||(t.style={}),t.style.display="none",document.body.appendChild(t);var r=t.contentWindow,n=r.eval,i=r.execScript;!n&&i&&(i.call(r,"null"),n=r.eval),forEach(Object_keys(e),function(t){r[t]=e[t]}),forEach(globals,function(t){e[t]&&(r[t]=e[t])});var o=Object_keys(r),a=n.call(r,this.code);return forEach(Object_keys(r),function(t){(t in e||-1===indexOf(o,t))&&(e[t]=r[t])}),forEach(globals,function(t){t in e||defineProp(e,t,r[t])}),document.body.removeChild(t),a},Script.prototype.runInThisContext=function(){return eval(this.code)},Script.prototype.runInNewContext=function(e){var t=Script.createContext(e),r=this.runInContext(t);return forEach(Object_keys(t),function(r){e[r]=t[r]}),r},forEach(Object_keys(Script.prototype),function(e){exports[e]=Script[e]=function(t){var r=Script(t);return r[e].apply(r,[].slice.call(arguments,1))}}),exports.createScript=function(e){return exports.Script(e)},exports.createContext=Script.createContext=function(e){var t=new Context;return"object"==typeof e&&forEach(Object_keys(e),function(r){t[r]=e[r]}),t}},function(e,t){var r=[].indexOf;e.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,r){var n=r(1);function i(e){this._reporterState={obj:null,path:[],options:e||{},errors:[]}}function o(e,t){this.path=e,this.rethrow(t)}t.Reporter=i,i.prototype.isError=function(e){return e instanceof o},i.prototype.save=function(){var e=this._reporterState;return{obj:e.obj,pathLen:e.path.length}},i.prototype.restore=function(e){var t=this._reporterState;t.obj=e.obj,t.path=t.path.slice(0,e.pathLen)},i.prototype.enterKey=function(e){return this._reporterState.path.push(e)},i.prototype.exitKey=function(e){var t=this._reporterState;t.path=t.path.slice(0,e-1)},i.prototype.leaveKey=function(e,t,r){var n=this._reporterState;this.exitKey(e),null!==n.obj&&(n.obj[t]=r)},i.prototype.path=function(){return this._reporterState.path.join("/")},i.prototype.enterObject=function(){var e=this._reporterState,t=e.obj;return e.obj={},t},i.prototype.leaveObject=function(e){var t=this._reporterState,r=t.obj;return t.obj=e,r},i.prototype.error=function(e){var t,r=this._reporterState,n=e instanceof o;if(t=n?e:new o(r.path.map(function(e){return"["+JSON.stringify(e)+"]"}).join(""),e.message||e,e.stack),!r.options.partial)throw t;return n||r.errors.push(t),t},i.prototype.wrapResult=function(e){var t=this._reporterState;return t.options.partial?{result:this.isError(e)?null:e,errors:t.errors}:e},n(o,Error),o.prototype.rethrow=function(e){if(this.message=e+" at: "+(this.path||"(shallow)"),Error.captureStackTrace&&Error.captureStackTrace(this,o),!this.stack)try{throw new Error(this.message)}catch(e){this.stack=e.stack}return this}},function(e,t,r){var n=r(19).Reporter,i=r(19).EncoderBuffer,o=r(19).DecoderBuffer,a=r(6),f=["seq","seqof","set","setof","objid","bool","gentime","utctime","null_","enum","int","objDesc","bitstr","bmpstr","charstr","genstr","graphstr","ia5str","iso646str","numstr","octstr","printstr","t61str","unistr","utf8str","videostr"],s=["key","obj","use","optional","explicit","implicit","def","choice","any","contains"].concat(f);function c(e,t){var r={};this._baseState=r,r.enc=e,r.parent=t||null,r.children=null,r.tag=null,r.args=null,r.reverseArgs=null,r.choice=null,r.optional=!1,r.any=!1,r.obj=!1,r.use=null,r.useDecoder=null,r.key=null,r.default=null,r.explicit=null,r.implicit=null,r.contains=null,r.parent||(r.children=[],this._wrap())}e.exports=c;var u=["enc","parent","children","tag","args","reverseArgs","choice","optional","any","obj","use","alteredUse","key","default","explicit","implicit","contains"];c.prototype.clone=function(){var e=this._baseState,t={};u.forEach(function(r){t[r]=e[r]});var r=new this.constructor(t.parent);return r._baseState=t,r},c.prototype._wrap=function(){var e=this._baseState;s.forEach(function(t){this[t]=function(){var r=new this.constructor(this);return e.children.push(r),r[t].apply(r,arguments)}},this)},c.prototype._init=function(e){var t=this._baseState;a(null===t.parent),e.call(this),t.children=t.children.filter(function(e){return e._baseState.parent===this},this),a.equal(t.children.length,1,"Root node can have only one child")},c.prototype._useArgs=function(e){var t=this._baseState,r=e.filter(function(e){return e instanceof this.constructor},this);e=e.filter(function(e){return!(e instanceof this.constructor)},this),0!==r.length&&(a(null===t.children),t.children=r,r.forEach(function(e){e._baseState.parent=this},this)),0!==e.length&&(a(null===t.args),t.args=e,t.reverseArgs=e.map(function(e){if("object"!=typeof e||e.constructor!==Object)return e;var t={};return Object.keys(e).forEach(function(r){r==(0|r)&&(r|=0);var n=e[r];t[n]=r}),t}))},["_peekTag","_decodeTag","_use","_decodeStr","_decodeObjid","_decodeTime","_decodeNull","_decodeInt","_decodeBool","_decodeList","_encodeComposite","_encodeStr","_encodeObjid","_encodeTime","_encodeNull","_encodeInt","_encodeBool"].forEach(function(e){c.prototype[e]=function(){var t=this._baseState;throw new Error(e+" not implemented for encoding: "+t.enc)}}),f.forEach(function(e){c.prototype[e]=function(){var t=this._baseState,r=Array.prototype.slice.call(arguments);return a(null===t.tag),t.tag=e,this._useArgs(r),this}}),c.prototype.use=function(e){a(e);var t=this._baseState;return a(null===t.use),t.use=e,this},c.prototype.optional=function(){return this._baseState.optional=!0,this},c.prototype.def=function(e){var t=this._baseState;return a(null===t.default),t.default=e,t.optional=!0,this},c.prototype.explicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.explicit=e,this},c.prototype.implicit=function(e){var t=this._baseState;return a(null===t.explicit&&null===t.implicit),t.implicit=e,this},c.prototype.obj=function(){var e=this._baseState,t=Array.prototype.slice.call(arguments);return e.obj=!0,0!==t.length&&this._useArgs(t),this},c.prototype.key=function(e){var t=this._baseState;return a(null===t.key),t.key=e,this},c.prototype.any=function(){return this._baseState.any=!0,this},c.prototype.choice=function(e){var t=this._baseState;return a(null===t.choice),t.choice=e,this._useArgs(Object.keys(e).map(function(t){return e[t]})),this},c.prototype.contains=function(e){var t=this._baseState;return a(null===t.use),t.contains=e,this},c.prototype._decode=function(e,t){var r=this._baseState;if(null===r.parent)return e.wrapResult(r.children[0]._decode(e,t));var n,i=r.default,a=!0,f=null;if(null!==r.key&&(f=e.enterKey(r.key)),r.optional){var s=null;if(null!==r.explicit?s=r.explicit:null!==r.implicit?s=r.implicit:null!==r.tag&&(s=r.tag),null!==s||r.any){if(a=this._peekTag(e,s,r.any),e.isError(a))return a}else{var c=e.save();try{null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),a=!0}catch(e){a=!1}e.restore(c)}}if(r.obj&&a&&(n=e.enterObject()),a){if(null!==r.explicit){var u=this._decodeTag(e,r.explicit);if(e.isError(u))return u;e=u}var h=e.offset;if(null===r.use&&null===r.choice){if(r.any)c=e.save();var d=this._decodeTag(e,null!==r.implicit?r.implicit:r.tag,r.any);if(e.isError(d))return d;r.any?i=e.raw(c):e=d}if(t&&t.track&&null!==r.tag&&t.track(e.path(),h,e.length,"tagged"),t&&t.track&&null!==r.tag&&t.track(e.path(),e.offset,e.length,"content"),i=r.any?i:null===r.choice?this._decodeGeneric(r.tag,e,t):this._decodeChoice(e,t),e.isError(i))return i;if(r.any||null!==r.choice||null===r.children||r.children.forEach(function(r){r._decode(e,t)}),r.contains&&("octstr"===r.tag||"bitstr"===r.tag)){var l=new o(i);i=this._getUse(r.contains,e._reporterState.obj)._decode(l,t)}}return r.obj&&a&&(i=e.leaveObject(n)),null===r.key||null===i&&!0!==a?null!==f&&e.exitKey(f):e.leaveKey(f,r.key,i),i},c.prototype._decodeGeneric=function(e,t,r){var n=this._baseState;return"seq"===e||"set"===e?null:"seqof"===e||"setof"===e?this._decodeList(t,e,n.args[0],r):/str$/.test(e)?this._decodeStr(t,e,r):"objid"===e&&n.args?this._decodeObjid(t,n.args[0],n.args[1],r):"objid"===e?this._decodeObjid(t,null,null,r):"gentime"===e||"utctime"===e?this._decodeTime(t,e,r):"null_"===e?this._decodeNull(t,r):"bool"===e?this._decodeBool(t,r):"objDesc"===e?this._decodeStr(t,e,r):"int"===e||"enum"===e?this._decodeInt(t,n.args&&n.args[0],r):null!==n.use?this._getUse(n.use,t._reporterState.obj)._decode(t,r):t.error("unknown tag: "+e)},c.prototype._getUse=function(e,t){var r=this._baseState;return r.useDecoder=this._use(e,t),a(null===r.useDecoder._baseState.parent),r.useDecoder=r.useDecoder._baseState.children[0],r.implicit!==r.useDecoder._baseState.implicit&&(r.useDecoder=r.useDecoder.clone(),r.useDecoder._baseState.implicit=r.implicit),r.useDecoder},c.prototype._decodeChoice=function(e,t){var r=this._baseState,n=null,i=!1;return Object.keys(r.choice).some(function(o){var a=e.save(),f=r.choice[o];try{var s=f._decode(e,t);if(e.isError(s))return!1;n={type:o,value:s},i=!0}catch(t){return e.restore(a),!1}return!0},this),i?n:e.error("Choice not matched")},c.prototype._createEncoderBuffer=function(e){return new i(e,this.reporter)},c.prototype._encode=function(e,t,r){var n=this._baseState;if(null===n.default||n.default!==e){var i=this._encodeValue(e,t,r);if(void 0!==i&&!this._skipDefault(i,t,r))return i}},c.prototype._encodeValue=function(e,t,r){var i=this._baseState;if(null===i.parent)return i.children[0]._encode(e,t||new n);var o=null;if(this.reporter=t,i.optional&&void 0===e){if(null===i.default)return;e=i.default}var a=null,f=!1;if(i.any)o=this._createEncoderBuffer(e);else if(i.choice)o=this._encodeChoice(e,t);else if(i.contains)a=this._getUse(i.contains,r)._encode(e,t),f=!0;else if(i.children)a=i.children.map(function(r){if("null_"===r._baseState.tag)return r._encode(null,t,e);if(null===r._baseState.key)return t.error("Child should have a key");var n=t.enterKey(r._baseState.key);if("object"!=typeof e)return t.error("Child expected, but input is not object");var i=r._encode(e[r._baseState.key],t,e);return t.leaveKey(n),i},this).filter(function(e){return e}),a=this._createEncoderBuffer(a);else if("seqof"===i.tag||"setof"===i.tag){if(!i.args||1!==i.args.length)return t.error("Too many args for : "+i.tag);if(!Array.isArray(e))return t.error("seqof/setof, but data is not Array");var s=this.clone();s._baseState.implicit=null,a=this._createEncoderBuffer(e.map(function(r){var n=this._baseState;return this._getUse(n.args[0],e)._encode(r,t)},s))}else null!==i.use?o=this._getUse(i.use,r)._encode(e,t):(a=this._encodePrimitive(i.tag,e),f=!0);if(!i.any&&null===i.choice){var c=null!==i.implicit?i.implicit:i.tag,u=null===i.implicit?"universal":"context";null===c?null===i.use&&t.error("Tag could be omitted only for .use()"):null===i.use&&(o=this._encodeComposite(c,f,u,a))}return null!==i.explicit&&(o=this._encodeComposite(i.explicit,!1,"context",o)),o},c.prototype._encodeChoice=function(e,t){var r=this._baseState,n=r.choice[e.type];return n||a(!1,e.type+" not found in "+JSON.stringify(Object.keys(r.choice))),n._encode(e.value,t)},c.prototype._encodePrimitive=function(e,t){var r=this._baseState;if(/str$/.test(e))return this._encodeStr(t,e);if("objid"===e&&r.args)return this._encodeObjid(t,r.reverseArgs[0],r.args[1]);if("objid"===e)return this._encodeObjid(t,null,null);if("gentime"===e||"utctime"===e)return this._encodeTime(t,e);if("null_"===e)return this._encodeNull();if("int"===e||"enum"===e)return this._encodeInt(t,r.args&&r.reverseArgs[0]);if("bool"===e)return this._encodeBool(t);if("objDesc"===e)return this._encodeStr(t,e);throw new Error("Unsupported tag: "+e)},c.prototype._isNumstr=function(e){return/^[0-9 ]*$/.test(e)},c.prototype._isPrintstr=function(e){return/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(e)}},function(e,t,r){var n=r(72);t.tagClass={0:"universal",1:"application",2:"context",3:"private"},t.tagClassByName=n._reverse(t.tagClass),t.tag={0:"end",1:"bool",2:"int",3:"bitstr",4:"octstr",5:"null_",6:"objid",7:"objDesc",8:"external",9:"real",10:"enum",11:"embed",12:"utf8str",13:"relativeOid",16:"seq",17:"set",18:"numstr",19:"printstr",20:"t61str",21:"videostr",22:"ia5str",23:"utctime",24:"gentime",25:"graphstr",26:"iso646str",27:"genstr",28:"unistr",29:"charstr",30:"bmpstr"},t.tagByName=n._reverse(t.tag)},function(e,t,r){var n=t;n.der=r(73),n.pem=r(180)},function(e,t,r){var n=r(1),i=r(3).Buffer,o=r(73);function a(e){o.call(this,e),this.enc="pem"}n(a,o),e.exports=a,a.prototype.decode=function(e,t){for(var r=e.toString().split(/[\r\n]+/g),n=t.label.toUpperCase(),a=/^-----(BEGIN|END) ([^-]+)-----$/,f=-1,s=-1,c=0;c<r.length;c++){var u=r[c].match(a);if(null!==u&&u[2]===n){if(-1!==f){if("END"!==u[1])break;s=c;break}if("BEGIN"!==u[1])break;f=c}}if(-1===f||-1===s)throw new Error("PEM section not found for: "+n);var h=r.slice(f+1,s).join("");h.replace(/[^a-z0-9\+\/=]+/gi,"");var d=new i(h,"base64");return o.prototype.decode.call(this,d,t)}},function(e,t,r){var n=t;n.der=r(74),n.pem=r(182)},function(e,t,r){var n=r(1),i=r(74);function o(e){i.call(this,e),this.enc="pem"}n(o,i),e.exports=o,o.prototype.encode=function(e,t){for(var r=i.prototype.encode.call(this,e).toString("base64"),n=["-----BEGIN "+t.label+"-----"],o=0;o<r.length;o+=64)n.push(r.slice(o,o+64));return n.push("-----END "+t.label+"-----"),n.join("\n")}},function(e,t,r){"use strict";var n=r(18),i=n.define("Time",function(){this.choice({utcTime:this.utctime(),generalTime:this.gentime()})}),o=n.define("AttributeTypeValue",function(){this.seq().obj(this.key("type").objid(),this.key("value").any())}),a=n.define("AlgorithmIdentifier",function(){this.seq().obj(this.key("algorithm").objid(),this.key("parameters").optional())}),f=n.define("SubjectPublicKeyInfo",function(){this.seq().obj(this.key("algorithm").use(a),this.key("subjectPublicKey").bitstr())}),s=n.define("RelativeDistinguishedName",function(){this.setof(o)}),c=n.define("RDNSequence",function(){this.seqof(s)}),u=n.define("Name",function(){this.choice({rdnSequence:this.use(c)})}),h=n.define("Validity",function(){this.seq().obj(this.key("notBefore").use(i),this.key("notAfter").use(i))}),d=n.define("Extension",function(){this.seq().obj(this.key("extnID").objid(),this.key("critical").bool().def(!1),this.key("extnValue").octstr())}),l=n.define("TBSCertificate",function(){this.seq().obj(this.key("version").explicit(0).int(),this.key("serialNumber").int(),this.key("signature").use(a),this.key("issuer").use(u),this.key("validity").use(h),this.key("subject").use(u),this.key("subjectPublicKeyInfo").use(f),this.key("issuerUniqueID").implicit(1).bitstr().optional(),this.key("subjectUniqueID").implicit(2).bitstr().optional(),this.key("extensions").explicit(3).seqof(d).optional())}),p=n.define("X509Certificate",function(){this.seq().obj(this.key("tbsCertificate").use(l),this.key("signatureAlgorithm").use(a),this.key("signatureValue").bitstr())});e.exports=p},function(e){e.exports={"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}},function(e,t,r){(function(t){var n=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m,i=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,o=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m,a=r(22),f=r(35);e.exports=function(e,r){var s,c=e.toString(),u=c.match(n);if(u){var h="aes"+u[1],d=new t(u[2],"hex"),l=new t(u[3].replace(/[\r\n]/g,""),"base64"),p=a(r,d.slice(0,8),parseInt(u[1],10)).key,b=[],y=f.createDecipheriv(h,p,d);b.push(y.update(l)),b.push(y.final()),s=t.concat(b)}else{var v=c.match(o);s=new t(v[2].replace(/[\r\n]/g,""),"base64")}return{tag:c.match(i)[1],data:s}}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(2),i=r(4).ec,o=r(24),a=r(75);function f(e,t){if(e.cmpn(0)<=0)throw new Error("invalid sig");if(e.cmp(t)>=t)throw new Error("invalid sig")}e.exports=function(e,r,s,c,u){var h=o(s);if("ec"===h.type){if("ecdsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var n=a[r.data.algorithm.curve.join(".")];if(!n)throw new Error("unknown curve "+r.data.algorithm.curve.join("."));var o=new i(n),f=r.data.subjectPrivateKey.data;return o.verify(t,e,f)}(e,r,h)}if("dsa"===h.type){if("dsa"!==c)throw new Error("wrong public key type");return function(e,t,r){var i=r.data.p,a=r.data.q,s=r.data.g,c=r.data.pub_key,u=o.signature.decode(e,"der"),h=u.s,d=u.r;f(h,a),f(d,a);var l=n.mont(i),p=h.invm(a);return 0===s.toRed(l).redPow(new n(t).mul(p).mod(a)).fromRed().mul(c.toRed(l).redPow(d.mul(p).mod(a)).fromRed()).mod(i).mod(a).cmp(d)}(e,r,h)}if("rsa"!==c&&"ecdsa/rsa"!==c)throw new Error("wrong public key type");r=t.concat([u,r]);for(var d=h.modulus.byteLength(),l=[1],p=0;r.length+l.length+2<d;)l.push(255),p++;l.push(0);for(var b=-1;++b<r.length;)l.push(r[b]);l=new t(l);var y=n.mont(h.modulus);e=(e=new n(e).toRed(y)).redPow(new n(h.publicExponent)),e=new t(e.fromRed().toArray());var v=p<8?1:0;for(d=Math.min(e.length,l.length),e.length!==l.length&&(v=1),b=-1;++b<d;)v|=e[b]^l[b];return 0===v}}).call(this,r(3).Buffer)},function(e,t,r){(function(t){var n=r(4),i=r(2);e.exports=function(e){return new a(e)};var o={secp256k1:{name:"secp256k1",byteLength:32},secp224r1:{name:"p224",byteLength:28},prime256v1:{name:"p256",byteLength:32},prime192v1:{name:"p192",byteLength:24},ed25519:{name:"ed25519",byteLength:32},secp384r1:{name:"p384",byteLength:48},secp521r1:{name:"p521",byteLength:66}};function a(e){this.curveType=o[e],this.curveType||(this.curveType={name:e}),this.curve=new n.ec(this.curveType.name),this.keys=void 0}function f(e,r,n){Array.isArray(e)||(e=e.toArray());var i=new t(e);if(n&&i.length<n){var o=new t(n-i.length);o.fill(0),i=t.concat([o,i])}return r?i.toString(r):i}o.p224=o.secp224r1,o.p256=o.secp256r1=o.prime256v1,o.p192=o.secp192r1=o.prime192v1,o.p384=o.secp384r1,o.p521=o.secp521r1,a.prototype.generateKeys=function(e,t){return this.keys=this.curve.genKeyPair(),this.getPublicKey(e,t)},a.prototype.computeSecret=function(e,r,n){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),f(this.curve.keyFromPublic(e).getPublic().mul(this.keys.getPrivate()).getX(),n,this.curveType.byteLength)},a.prototype.getPublicKey=function(e,t){var r=this.keys.getPublic("compressed"===t,!0);return"hybrid"===t&&(r[r.length-1]%2?r[0]=7:r[0]=6),f(r,e)},a.prototype.getPrivateKey=function(e){return f(this.keys.getPrivate(),e)},a.prototype.setPublicKey=function(e,r){return r=r||"utf8",t.isBuffer(e)||(e=new t(e,r)),this.keys._importPublic(e),this},a.prototype.setPrivateKey=function(e,r){r=r||"utf8",t.isBuffer(e)||(e=new t(e,r));var n=new i(e);return n=n.toString(16),this.keys=this.curve.genKeyPair(),this.keys._importPrivate(n),this}}).call(this,r(3).Buffer)},function(e,t,r){t.publicEncrypt=r(189),t.privateDecrypt=r(190),t.privateEncrypt=function(e,r){return t.publicEncrypt(e,r,!0)},t.publicDecrypt=function(e,r){return t.privateDecrypt(e,r,!0)}},function(e,t,r){var n=r(24),i=r(12),o=r(13),a=r(76),f=r(77),s=r(2),c=r(78),u=r(37),h=r(0).Buffer;e.exports=function(e,t,r){var d;d=e.padding?e.padding:r?1:4;var l,p=n(e);if(4===d)l=function(e,t){var r=e.modulus.byteLength(),n=t.length,c=o("sha1").update(h.alloc(0)).digest(),u=c.length,d=2*u;if(n>r-d-2)throw new Error("message too long");var l=h.alloc(r-n-d-2),p=r-u-1,b=i(u),y=f(h.concat([c,l,h.alloc(1,1),t],p),a(b,p)),v=f(b,a(y,u));return new s(h.concat([h.alloc(1),v,y],r))}(p,t);else if(1===d)l=function(e,t,r){var n,o=t.length,a=e.modulus.byteLength();if(o>a-11)throw new Error("message too long");n=r?h.alloc(a-o-3,255):function(e){var t,r=h.allocUnsafe(e),n=0,o=i(2*e),a=0;for(;n<e;)a===o.length&&(o=i(2*e),a=0),(t=o[a++])&&(r[n++]=t);return r}(a-o-3);return new s(h.concat([h.from([0,r?1:2]),n,h.alloc(1),t],a))}(p,t,r);else{if(3!==d)throw new Error("unknown padding");if((l=new s(t)).cmp(p.modulus)>=0)throw new Error("data too long for modulus")}return r?u(l,p):c(l,p)}},function(e,t,r){var n=r(24),i=r(76),o=r(77),a=r(2),f=r(37),s=r(13),c=r(78),u=r(0).Buffer;e.exports=function(e,t,r){var h;h=e.padding?e.padding:r?1:4;var d,l=n(e),p=l.modulus.byteLength();if(t.length>p||new a(t).cmp(l.modulus)>=0)throw new Error("decryption error");d=r?c(new a(t),l):f(t,l);var b=u.alloc(p-d.length);if(d=u.concat([b,d],p),4===h)return function(e,t){var r=e.modulus.byteLength(),n=s("sha1").update(u.alloc(0)).digest(),a=n.length;if(0!==t[0])throw new Error("decryption error");var f=t.slice(1,a+1),c=t.slice(a+1),h=o(f,i(c,a)),d=o(c,i(h,r-a-1));if(function(e,t){e=u.from(e),t=u.from(t);var r=0,n=e.length;e.length!==t.length&&(r++,n=Math.min(e.length,t.length));var i=-1;for(;++i<n;)r+=e[i]^t[i];return r}(n,d.slice(0,a)))throw new Error("decryption error");var l=a;for(;0===d[l];)l++;if(1!==d[l++])throw new Error("decryption error");return d.slice(l)}(l,d);if(1===h)return function(e,t,r){var n=t.slice(0,2),i=2,o=0;for(;0!==t[i++];)if(i>=t.length){o++;break}var a=t.slice(2,i-1);("0002"!==n.toString("hex")&&!r||"0001"!==n.toString("hex")&&r)&&o++;a.length<8&&o++;if(o)throw new Error("decryption error");return t.slice(i)}(0,d,r);if(3===h)return d;throw new Error("unknown padding")}},function(e,t,r){"use strict";(function(e,n){function i(){throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11")}var o=r(0),a=r(12),f=o.Buffer,s=o.kMaxLength,c=e.crypto||e.msCrypto,u=Math.pow(2,32)-1;function h(e,t){if("number"!=typeof e||e!=e)throw new TypeError("offset must be a number");if(e>u||e<0)throw new TypeError("offset must be a uint32");if(e>s||e>t)throw new RangeError("offset out of range")}function d(e,t,r){if("number"!=typeof e||e!=e)throw new TypeError("size must be a number");if(e>u||e<0)throw new TypeError("size must be a uint32");if(e+t>r||e>s)throw new RangeError("buffer too small")}function l(e,t,r,i){if(n.browser){var o=e.buffer,f=new Uint8Array(o,t,r);return c.getRandomValues(f),i?void n.nextTick(function(){i(null,e)}):e}if(!i)return a(r).copy(e,t),e;a(r,function(r,n){if(r)return i(r);n.copy(e,t),i(null,e)})}c&&c.getRandomValues||!n.browser?(t.randomFill=function(t,r,n,i){if(!(f.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');if("function"==typeof r)i=r,r=0,n=t.length;else if("function"==typeof n)i=n,n=t.length-r;else if("function"!=typeof i)throw new TypeError('"cb" argument must be a function');return h(r,t.length),d(n,r,t.length),l(t,r,n,i)},t.randomFillSync=function(t,r,n){void 0===r&&(r=0);if(!(f.isBuffer(t)||t instanceof e.Uint8Array))throw new TypeError('"buf" argument must be a Buffer or Uint8Array');h(r,t.length),void 0===n&&(n=t.length-r);return d(n,r,t.length),l(t,r,n)}):(t.randomFill=i,t.randomFillSync=i)}).call(this,r(9),r(8))},function(e,t,r){"use strict";e.exports=r(193)(r(197))},function(e,t,r){"use strict";var n=r(194),i=r(195),o=r(79);function a(e,t){return void 0===e?t:(n.isBoolean(e,o.COMPRESSED_TYPE_INVALID),e)}e.exports=function(e){return{privateKeyVerify:function(t){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),32===t.length&&e.privateKeyVerify(t)},privateKeyExport:function(t,r){n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),r=a(r,!0);var f=e.privateKeyExport(t,r);return i.privateKeyExport(t,f,r)},privateKeyImport:function(t){if(n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),(t=i.privateKeyImport(t))&&32===t.length&&e.privateKeyVerify(t))return t;throw new Error(o.EC_PRIVATE_KEY_IMPORT_DER_FAIL)},privateKeyNegate:function(t){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),e.privateKeyNegate(t)},privateKeyModInverse:function(t){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),e.privateKeyModInverse(t)},privateKeyTweakAdd:function(t,r){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),n.isBuffer(r,o.TWEAK_TYPE_INVALID),n.isBufferLength(r,32,o.TWEAK_LENGTH_INVALID),e.privateKeyTweakAdd(t,r)},privateKeyTweakMul:function(t,r){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),n.isBuffer(r,o.TWEAK_TYPE_INVALID),n.isBufferLength(r,32,o.TWEAK_LENGTH_INVALID),e.privateKeyTweakMul(t,r)},publicKeyCreate:function(t,r){return n.isBuffer(t,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(t,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),r=a(r,!0),e.publicKeyCreate(t,r)},publicKeyConvert:function(t,r){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),r=a(r,!0),e.publicKeyConvert(t,r)},publicKeyVerify:function(t){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),e.publicKeyVerify(t)},publicKeyTweakAdd:function(t,r,i){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),n.isBuffer(r,o.TWEAK_TYPE_INVALID),n.isBufferLength(r,32,o.TWEAK_LENGTH_INVALID),i=a(i,!0),e.publicKeyTweakAdd(t,r,i)},publicKeyTweakMul:function(t,r,i){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),n.isBuffer(r,o.TWEAK_TYPE_INVALID),n.isBufferLength(r,32,o.TWEAK_LENGTH_INVALID),i=a(i,!0),e.publicKeyTweakMul(t,r,i)},publicKeyCombine:function(t,r){n.isArray(t,o.EC_PUBLIC_KEYS_TYPE_INVALID),n.isLengthGTZero(t,o.EC_PUBLIC_KEYS_LENGTH_INVALID);for(var i=0;i<t.length;++i)n.isBuffer(t[i],o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t[i],33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID);return r=a(r,!0),e.publicKeyCombine(t,r)},signatureNormalize:function(t){return n.isBuffer(t,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isBufferLength(t,64,o.ECDSA_SIGNATURE_LENGTH_INVALID),e.signatureNormalize(t)},signatureExport:function(t){n.isBuffer(t,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isBufferLength(t,64,o.ECDSA_SIGNATURE_LENGTH_INVALID);var r=e.signatureExport(t);return i.signatureExport(r)},signatureImport:function(t){n.isBuffer(t,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isLengthGTZero(t,o.ECDSA_SIGNATURE_LENGTH_INVALID);var r=i.signatureImport(t);if(r)return e.signatureImport(r);throw new Error(o.ECDSA_SIGNATURE_PARSE_DER_FAIL)},signatureImportLax:function(t){n.isBuffer(t,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isLengthGTZero(t,o.ECDSA_SIGNATURE_LENGTH_INVALID);var r=i.signatureImportLax(t);if(r)return e.signatureImport(r);throw new Error(o.ECDSA_SIGNATURE_PARSE_DER_FAIL)},sign:function(t,r,i){n.isBuffer(t,o.MSG32_TYPE_INVALID),n.isBufferLength(t,32,o.MSG32_LENGTH_INVALID),n.isBuffer(r,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(r,32,o.EC_PRIVATE_KEY_LENGTH_INVALID);var a=null,f=null;return void 0!==i&&(n.isObject(i,o.OPTIONS_TYPE_INVALID),void 0!==i.data&&(n.isBuffer(i.data,o.OPTIONS_DATA_TYPE_INVALID),n.isBufferLength(i.data,32,o.OPTIONS_DATA_LENGTH_INVALID),a=i.data),void 0!==i.noncefn&&(n.isFunction(i.noncefn,o.OPTIONS_NONCEFN_TYPE_INVALID),f=i.noncefn)),e.sign(t,r,f,a)},verify:function(t,r,i){return n.isBuffer(t,o.MSG32_TYPE_INVALID),n.isBufferLength(t,32,o.MSG32_LENGTH_INVALID),n.isBuffer(r,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isBufferLength(r,64,o.ECDSA_SIGNATURE_LENGTH_INVALID),n.isBuffer(i,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(i,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),e.verify(t,r,i)},recover:function(t,r,i,f){return n.isBuffer(t,o.MSG32_TYPE_INVALID),n.isBufferLength(t,32,o.MSG32_LENGTH_INVALID),n.isBuffer(r,o.ECDSA_SIGNATURE_TYPE_INVALID),n.isBufferLength(r,64,o.ECDSA_SIGNATURE_LENGTH_INVALID),n.isNumber(i,o.RECOVERY_ID_TYPE_INVALID),n.isNumberInInterval(i,-1,4,o.RECOVERY_ID_VALUE_INVALID),f=a(f,!0),e.recover(t,r,i,f)},ecdh:function(t,r){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),n.isBuffer(r,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(r,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),e.ecdh(t,r)},ecdhUnsafe:function(t,r,i){return n.isBuffer(t,o.EC_PUBLIC_KEY_TYPE_INVALID),n.isBufferLength2(t,33,65,o.EC_PUBLIC_KEY_LENGTH_INVALID),n.isBuffer(r,o.EC_PRIVATE_KEY_TYPE_INVALID),n.isBufferLength(r,32,o.EC_PRIVATE_KEY_LENGTH_INVALID),i=a(i,!0),e.ecdhUnsafe(t,r,i)}}}},function(e,t,r){"use strict";(function(e){var r=Object.prototype.toString;t.isArray=function(e,t){if(!Array.isArray(e))throw TypeError(t)},t.isBoolean=function(e,t){if("[object Boolean]"!==r.call(e))throw TypeError(t)},t.isBuffer=function(t,r){if(!e.isBuffer(t))throw TypeError(r)},t.isFunction=function(e,t){if("[object Function]"!==r.call(e))throw TypeError(t)},t.isNumber=function(e,t){if("[object Number]"!==r.call(e))throw TypeError(t)},t.isObject=function(e,t){if("[object Object]"!==r.call(e))throw TypeError(t)},t.isBufferLength=function(e,t,r){if(e.length!==t)throw RangeError(r)},t.isBufferLength2=function(e,t,r,n){if(e.length!==t&&e.length!==r)throw RangeError(n)},t.isLengthGTZero=function(e,t){if(0===e.length)throw RangeError(t)},t.isNumberInInterval=function(e,t,r,n){if(e<=t||e>=r)throw RangeError(n)}}).call(this,r(3).Buffer)},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(196),o=n.from([48,129,211,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,133,48,129,130,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,33,2,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,36,3,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),a=n.from([48,130,1,19,2,1,1,4,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,129,165,48,129,162,2,1,1,48,44,6,7,42,134,72,206,61,1,1,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,252,47,48,6,4,1,0,4,1,7,4,65,4,121,190,102,126,249,220,187,172,85,160,98,149,206,135,11,7,2,155,252,219,45,206,40,217,89,242,129,91,22,248,23,152,72,58,218,119,38,163,196,101,93,164,251,252,14,17,8,168,253,23,180,72,166,133,84,25,156,71,208,143,251,16,212,184,2,33,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,186,174,220,230,175,72,160,59,191,210,94,140,208,54,65,65,2,1,1,161,68,3,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);t.privateKeyExport=function(e,t,r){var i=n.from(r?o:a);return e.copy(i,r?8:9),t.copy(i,r?181:214),i},t.privateKeyImport=function(e){var t=e.length,r=0;if(!(t<r+1||48!==e[r])&&!(t<(r+=1)+1)&&128&e[r]){var n=127&e[r];if(r+=1,!(n<1||n>2||t<r+n)){var i=e[r+n-1]|(n>1?e[r+n-2]<<8:0);if(!(t<(r+=n)+i||t<r+3||2!==e[r]||1!==e[r+1]||1!==e[r+2]||t<(r+=3)+2||4!==e[r]||e[r+1]>32||t<r+2+e[r+1]))return e.slice(r+2,r+2+e[r+1])}}},t.signatureExport=function(e){for(var t=n.concat([n.from([0]),e.r]),r=33,o=0;r>1&&0===t[o]&&!(128&t[o+1]);--r,++o);for(var a=n.concat([n.from([0]),e.s]),f=33,s=0;f>1&&0===a[s]&&!(128&a[s+1]);--f,++s);return i.encode(t.slice(o),a.slice(s))},t.signatureImport=function(e){var t=n.alloc(32,0),r=n.alloc(32,0);try{var o=i.decode(e);if(33===o.r.length&&0===o.r[0]&&(o.r=o.r.slice(1)),o.r.length>32)throw new Error("R length is too long");if(33===o.s.length&&0===o.s[0]&&(o.s=o.s.slice(1)),o.s.length>32)throw new Error("S length is too long")}catch(e){return}return o.r.copy(t,32-o.r.length),o.s.copy(r,32-o.s.length),{r:t,s:r}},t.signatureImportLax=function(e){var t=n.alloc(32,0),r=n.alloc(32,0),i=e.length,o=0;if(48===e[o++]){var a=e[o++];if(!(128&a&&(o+=a-128)>i)&&2===e[o++]){var f=e[o++];if(128&f){if(o+(a=f-128)>i)return;for(;a>0&&0===e[o];o+=1,a-=1);for(f=0;a>0;o+=1,a-=1)f=(f<<8)+e[o]}if(!(f>i-o)){var s=o;if(o+=f,2===e[o++]){var c=e[o++];if(128&c){if(o+(a=c-128)>i)return;for(;a>0&&0===e[o];o+=1,a-=1);for(c=0;a>0;o+=1,a-=1)c=(c<<8)+e[o]}if(!(c>i-o)){var u=o;for(o+=c;f>0&&0===e[s];f-=1,s+=1);if(!(f>32)){var h=e.slice(s,s+f);for(h.copy(t,32-h.length);c>0&&0===e[u];c-=1,u+=1);if(!(c>32)){var d=e.slice(u,u+c);return d.copy(r,32-d.length),{r:t,s:r}}}}}}}}}},function(e,t,r){var n=r(0).Buffer;e.exports={check:function(e){if(e.length<8)return!1;if(e.length>72)return!1;if(48!==e[0])return!1;if(e[1]!==e.length-2)return!1;if(2!==e[2])return!1;var t=e[3];if(0===t)return!1;if(5+t>=e.length)return!1;if(2!==e[4+t])return!1;var r=e[5+t];return!(0===r||6+t+r!==e.length||128&e[4]||t>1&&0===e[4]&&!(128&e[5])||128&e[t+6]||r>1&&0===e[t+6]&&!(128&e[t+7]))},decode:function(e){if(e.length<8)throw new Error("DER sequence length is too short");if(e.length>72)throw new Error("DER sequence length is too long");if(48!==e[0])throw new Error("Expected DER sequence");if(e[1]!==e.length-2)throw new Error("DER sequence length is invalid");if(2!==e[2])throw new Error("Expected DER integer");var t=e[3];if(0===t)throw new Error("R length is zero");if(5+t>=e.length)throw new Error("R length is too long");if(2!==e[4+t])throw new Error("Expected DER integer (2)");var r=e[5+t];if(0===r)throw new Error("S length is zero");if(6+t+r!==e.length)throw new Error("S length is invalid");if(128&e[4])throw new Error("R value is negative");if(t>1&&0===e[4]&&!(128&e[5]))throw new Error("R value excessively padded");if(128&e[t+6])throw new Error("S value is negative");if(r>1&&0===e[t+6]&&!(128&e[t+7]))throw new Error("S value excessively padded");return{r:e.slice(4,4+t),s:e.slice(6+t)}},encode:function(e,t){var r=e.length,i=t.length;if(0===r)throw new Error("R length is zero");if(0===i)throw new Error("S length is zero");if(r>33)throw new Error("R length is too long");if(i>33)throw new Error("S length is too long");if(128&e[0])throw new Error("R value is negative");if(128&t[0])throw new Error("S value is negative");if(r>1&&0===e[0]&&!(128&e[1]))throw new Error("R value excessively padded");if(i>1&&0===t[0]&&!(128&t[1]))throw new Error("S value excessively padded");var o=n.allocUnsafe(6+r+i);return o[0]=48,o[1]=o.length-2,o[2]=2,o[3]=e.length,e.copy(o,4),o[4+r]=2,o[5+r]=t.length,t.copy(o,6+r),o}}},function(e,t,r){"use strict";var n=r(0).Buffer,i=r(13),o=r(2),a=r(4).ec,f=r(79),s=new a("secp256k1"),c=s.curve;function u(e){var t=e[0];switch(t){case 2:case 3:return 33!==e.length?null:function(e,t){var r=new o(t);if(r.cmp(c.p)>=0)return null;var n=(r=r.toRed(c.red)).redSqr().redIMul(r).redIAdd(c.b).redSqrt();return 3===e!==n.isOdd()&&(n=n.redNeg()),s.keyPair({pub:{x:r,y:n}})}(t,e.slice(1,33));case 4:case 6:case 7:return 65!==e.length?null:function(e,t,r){var n=new o(t),i=new o(r);if(n.cmp(c.p)>=0||i.cmp(c.p)>=0)return null;if(n=n.toRed(c.red),i=i.toRed(c.red),(6===e||7===e)&&i.isOdd()!==(7===e))return null;var a=n.redSqr().redIMul(n);return i.redSqr().redISub(a.redIAdd(c.b)).isZero()?s.keyPair({pub:{x:n,y:i}}):null}(t,e.slice(1,33),e.slice(33,65));default:return null}}t.privateKeyVerify=function(e){var t=new o(e);return t.cmp(c.n)<0&&!t.isZero()},t.privateKeyExport=function(e,t){var r=new o(e);if(r.cmp(c.n)>=0||r.isZero())throw new Error(f.EC_PRIVATE_KEY_EXPORT_DER_FAIL);return n.from(s.keyFromPrivate(e).getPublic(t,!0))},t.privateKeyNegate=function(e){var t=new o(e);return t.isZero()?n.alloc(32):c.n.sub(t).umod(c.n).toArrayLike(n,"be",32)},t.privateKeyModInverse=function(e){var t=new o(e);if(t.cmp(c.n)>=0||t.isZero())throw new Error(f.EC_PRIVATE_KEY_RANGE_INVALID);return t.invm(c.n).toArrayLike(n,"be",32)},t.privateKeyTweakAdd=function(e,t){var r=new o(t);if(r.cmp(c.n)>=0)throw new Error(f.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);if(r.iadd(new o(e)),r.cmp(c.n)>=0&&r.isub(c.n),r.isZero())throw new Error(f.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);return r.toArrayLike(n,"be",32)},t.privateKeyTweakMul=function(e,t){var r=new o(t);if(r.cmp(c.n)>=0||r.isZero())throw new Error(f.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);return r.imul(new o(e)),r.cmp(c.n)&&(r=r.umod(c.n)),r.toArrayLike(n,"be",32)},t.publicKeyCreate=function(e,t){var r=new o(e);if(r.cmp(c.n)>=0||r.isZero())throw new Error(f.EC_PUBLIC_KEY_CREATE_FAIL);return n.from(s.keyFromPrivate(e).getPublic(t,!0))},t.publicKeyConvert=function(e,t){var r=u(e);if(null===r)throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);return n.from(r.getPublic(t,!0))},t.publicKeyVerify=function(e){return null!==u(e)},t.publicKeyTweakAdd=function(e,t,r){var i=u(e);if(null===i)throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);if((t=new o(t)).cmp(c.n)>=0)throw new Error(f.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);var a=c.g.mul(t).add(i.pub);if(a.isInfinity())throw new Error(f.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);return n.from(a.encode(!0,r))},t.publicKeyTweakMul=function(e,t,r){var i=u(e);if(null===i)throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);if((t=new o(t)).cmp(c.n)>=0||t.isZero())throw new Error(f.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);return n.from(i.pub.mul(t).encode(!0,r))},t.publicKeyCombine=function(e,t){for(var r=new Array(e.length),i=0;i<e.length;++i)if(r[i]=u(e[i]),null===r[i])throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);for(var o=r[0].pub,a=1;a<r.length;++a)o=o.add(r[a].pub);if(o.isInfinity())throw new Error(f.EC_PUBLIC_KEY_COMBINE_FAIL);return n.from(o.encode(!0,t))},t.signatureNormalize=function(e){var t=new o(e.slice(0,32)),r=new o(e.slice(32,64));if(t.cmp(c.n)>=0||r.cmp(c.n)>=0)throw new Error(f.ECDSA_SIGNATURE_PARSE_FAIL);var i=n.from(e);return 1===r.cmp(s.nh)&&c.n.sub(r).toArrayLike(n,"be",32).copy(i,32),i},t.signatureExport=function(e){var t=e.slice(0,32),r=e.slice(32,64);if(new o(t).cmp(c.n)>=0||new o(r).cmp(c.n)>=0)throw new Error(f.ECDSA_SIGNATURE_PARSE_FAIL);return{r:t,s:r}},t.signatureImport=function(e){var t=new o(e.r);t.cmp(c.n)>=0&&(t=new o(0));var r=new o(e.s);return r.cmp(c.n)>=0&&(r=new o(0)),n.concat([t.toArrayLike(n,"be",32),r.toArrayLike(n,"be",32)])},t.sign=function(e,t,r,i){if("function"==typeof r){var a=r;r=function(r){var s=a(e,t,null,i,r);if(!n.isBuffer(s)||32!==s.length)throw new Error(f.ECDSA_SIGN_FAIL);return new o(s)}}var u=new o(t);if(u.cmp(c.n)>=0||u.isZero())throw new Error(f.ECDSA_SIGN_FAIL);var h=s.sign(e,t,{canonical:!0,k:r,pers:i});return{signature:n.concat([h.r.toArrayLike(n,"be",32),h.s.toArrayLike(n,"be",32)]),recovery:h.recoveryParam}},t.verify=function(e,t,r){var n={r:t.slice(0,32),s:t.slice(32,64)},i=new o(n.r),a=new o(n.s);if(i.cmp(c.n)>=0||a.cmp(c.n)>=0)throw new Error(f.ECDSA_SIGNATURE_PARSE_FAIL);if(1===a.cmp(s.nh)||i.isZero()||a.isZero())return!1;var h=u(r);if(null===h)throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);return s.verify(e,n,{x:h.pub.x,y:h.pub.y})},t.recover=function(e,t,r,i){var a={r:t.slice(0,32),s:t.slice(32,64)},u=new o(a.r),h=new o(a.s);if(u.cmp(c.n)>=0||h.cmp(c.n)>=0)throw new Error(f.ECDSA_SIGNATURE_PARSE_FAIL);try{if(u.isZero()||h.isZero())throw new Error;var d=s.recoverPubKey(e,a,r);return n.from(d.encode(!0,i))}catch(e){throw new Error(f.ECDSA_RECOVER_FAIL)}},t.ecdh=function(e,r){var n=t.ecdhUnsafe(e,r,!0);return i("sha256").update(n).digest()},t.ecdhUnsafe=function(e,t,r){var i=u(e);if(null===i)throw new Error(f.EC_PUBLIC_KEY_PARSE_FAIL);var a=new o(t);if(a.cmp(c.n)>=0||a.isZero())throw new Error(f.ECDH_FAIL);return n.from(i.pub.mul(a).encode(!0,r))}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly94Z3Qvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL3hndC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvbm9kZS1saWJzLWJyb3dzZXIvbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9jaXBoZXItYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnVmZmVyLXhvci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2Flcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZXZwX2J5dGVzdG9rZXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9tZDUuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3N0cmVhbS1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3JpcGVtZDE2MC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktcnNhL2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2hhc2gtYmFzZS9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhNTEyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaGFzaC9tZDUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3Bia2RmMi9icm93c2VyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3ByZWNvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9kZWZhdWx0LWVuY29kaW5nLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9wYmtkZjIvbGliL3N5bmMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY3RyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9pbmNyMzIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2F1dGhDaXBoZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL3N0cmVhbUNpcGhlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2dlbmVyYXRlUHJpbWUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3JhbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS9jb21tb24uanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvNTEyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvYnVmZmVyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9kZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC9tZ2YuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3hvci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9zcmMveGd0LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idG9hLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnM1OC9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYmFzZS14L2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2NyeXB0by1icm93c2VyaWZ5L2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2R1cGxleC1icm93c2VyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vdHJhbnNmb3JtLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3NoYS5qcy9zaGExLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjI0LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zaGEuanMvc2hhMzg0LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9sZWdhY3kuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9hbGdvcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9hc3luYy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1kZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9jaXBoZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2Rlcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2JjLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9lZGUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2VuY3J5cHRlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvZWNiLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jYmMuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NmYi5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiOC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiMS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvb2ZiLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9naGFzaC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZGVjcnlwdGVyLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9tb2Rlcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9kaWZmaWUtaGVsbG1hbi9saWIvZGguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYnJvd3Nlci9zaWduLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9iYXNlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvc2hvcnQuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmUvZWR3YXJkcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlcy5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzEuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3JpcGVtZC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvcHJlY29tcHV0ZWQvc2VjcDI1NmsxLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2htYWMtZHJiZy9saWIvaG1hYy1kcmJnLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMva2V5LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMvc2lnbmF0dXJlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWRkc2EvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9rZXkuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9zaWduYXR1cmUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvYXNuMS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9hcGkuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3ZtLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2luZGV4b2YvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvYmFzZS9yZXBvcnRlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL25vZGUuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2Rlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9kZWNvZGVycy9wZW0uanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvcGVtLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2NlcnRpZmljYXRlLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2ZpeFByb2MuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3ZlcmlmeS5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvY3JlYXRlLWVjZGgvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHVibGljRW5jcnlwdC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvcHJpdmF0ZURlY3J5cHQuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL3JhbmRvbWZpbGwvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2VsbGlwdGljLmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zZWNwMjU2azEvbGliL2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zZWNwMjU2azEvbGliL2Fzc2VydC5qcyIsIndlYnBhY2s6Ly94Z3QvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2xpYi9kZXIuanMiLCJ3ZWJwYWNrOi8veGd0Ly4vbm9kZV9tb2R1bGVzL2JpcDY2L2luZGV4LmpzIiwid2VicGFjazovL3hndC8uL25vZGVfbW9kdWxlcy9zZWNwMjU2azEvbGliL2VsbGlwdGljL2luZGV4LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJ0aGlzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImJ1ZmZlciIsIkJ1ZmZlciIsImNvcHlQcm9wcyIsInNyYyIsImRzdCIsIlNhZmVCdWZmZXIiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwibGVuZ3RoIiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJUeXBlRXJyb3IiLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwidW5kZWZpbmVkIiwiU2xvd0J1ZmZlciIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiVGVtcEN0b3IiLCJhc3NlcnQiLCJ2YWwiLCJtc2ciLCJFcnJvciIsImluaGVyaXRzIiwiQk4iLCJudW1iZXIiLCJiYXNlIiwiZW5kaWFuIiwiaXNCTiIsIm5lZ2F0aXZlIiwid29yZHMiLCJyZWQiLCJfaW5pdCIsIndvcmRTaXplIiwiZSIsInBhcnNlSGV4Iiwic3RyIiwic3RhcnQiLCJlbmQiLCJsZW4iLCJNYXRoIiwibWluIiwiY2hhckNvZGVBdCIsInBhcnNlQmFzZSIsIm11bCIsIm51bSIsIkFycmF5IiwiaXNBcnJheSIsIm1heCIsImxlZnQiLCJyaWdodCIsImNtcCIsIl9pbml0TnVtYmVyIiwiX2luaXRBcnJheSIsInRvU3RyaW5nIiwicmVwbGFjZSIsIl9wYXJzZUhleCIsIl9wYXJzZUJhc2UiLCJzdHJpcCIsInRvQXJyYXkiLCJjZWlsIiwiaiIsInciLCJvZmYiLCJsaW1iTGVuIiwibGltYlBvdyIsInRvdGFsIiwibW9kIiwid29yZCIsImltdWxuIiwiX2lhZGRuIiwicG93IiwiY29weSIsImRlc3QiLCJjbG9uZSIsIl9leHBhbmQiLCJfbm9ybVNpZ24iLCJpbnNwZWN0IiwiemVyb3MiLCJncm91cFNpemVzIiwiZ3JvdXBCYXNlcyIsInNtYWxsTXVsVG8iLCJvdXQiLCJhIiwiYiIsImxvIiwiY2FycnkiLCJrIiwibmNhcnJ5IiwicndvcmQiLCJtYXhKIiwicGFkZGluZyIsImdyb3VwU2l6ZSIsImdyb3VwQmFzZSIsImlzWmVybyIsIm1vZG4iLCJpZGl2biIsInRvTnVtYmVyIiwicmV0IiwidG9KU09OIiwidG9CdWZmZXIiLCJ0b0FycmF5TGlrZSIsIkFycmF5VHlwZSIsImJ5dGVMZW5ndGgiLCJyZXFMZW5ndGgiLCJsaXR0bGVFbmRpYW4iLCJyZXMiLCJxIiwiYW5kbG4iLCJpdXNocm4iLCJjbHozMiIsIl9jb3VudEJpdHMiLCJfemVyb0JpdHMiLCJiaXRMZW5ndGgiLCJoaSIsInplcm9CaXRzIiwidG9Ud29zIiwid2lkdGgiLCJhYnMiLCJpbm90biIsImlhZGRuIiwiZnJvbVR3b3MiLCJ0ZXN0biIsIm5vdG4iLCJpbmVnIiwiaXNOZWciLCJuZWciLCJpdW9yIiwiaW9yIiwib3IiLCJ1b3IiLCJpdWFuZCIsImlhbmQiLCJhbmQiLCJ1YW5kIiwiaXV4b3IiLCJpeG9yIiwieG9yIiwidXhvciIsImJ5dGVzTmVlZGVkIiwiYml0c0xlZnQiLCJzZXRuIiwiYml0Iiwid2JpdCIsImlhZGQiLCJpc3ViIiwiYWRkIiwic3ViIiwiY29tYjEwTXVsVG8iLCJtaWQiLCJhMCIsImFsMCIsImFoMCIsImExIiwiYWwxIiwiYWgxIiwiYTIiLCJhbDIiLCJhaDIiLCJhMyIsImFsMyIsImFoMyIsImE0IiwiYWw0IiwiYWg0IiwiYTUiLCJhbDUiLCJhaDUiLCJhNiIsImFsNiIsImFoNiIsImE3IiwiYWw3IiwiYWg3IiwiYTgiLCJhbDgiLCJhaDgiLCJhOSIsImFsOSIsImFoOSIsImIwIiwiYmwwIiwiYmgwIiwiYjEiLCJibDEiLCJiaDEiLCJiMiIsImJsMiIsImJoMiIsImIzIiwiYmwzIiwiYmgzIiwiYjQiLCJibDQiLCJiaDQiLCJiNSIsImJsNSIsImJoNSIsImI2IiwiYmw2IiwiYmg2IiwiYjciLCJibDciLCJiaDciLCJiOCIsImJsOCIsImJoOCIsImI5IiwiYmw5IiwiYmg5IiwidzAiLCJpbXVsIiwidzEiLCJ3MiIsInczIiwidzQiLCJ3NSIsInc2IiwidzciLCJ3OCIsInc5IiwidzEwIiwidzExIiwidzEyIiwidzEzIiwidzE0IiwidzE1IiwidzE2IiwidzE3IiwidzE4IiwianVtYm9NdWxUbyIsIkZGVE0iLCJtdWxwIiwieCIsInkiLCJtdWxUbyIsImhuY2FycnkiLCJiaWdNdWxUbyIsIm1ha2VSQlQiLCJOIiwicmV2QmluIiwicmIiLCJwZXJtdXRlIiwicmJ0IiwicndzIiwiaXdzIiwicnR3cyIsIml0d3MiLCJ0cmFuc2Zvcm0iLCJydHdkZiIsImNvcyIsIlBJIiwiaXR3ZGYiLCJzaW4iLCJydHdkZl8iLCJpdHdkZl8iLCJyZSIsImllIiwicm8iLCJpbyIsInJ4IiwiZ3Vlc3NMZW4xM2IiLCJvZGQiLCJjb25qdWdhdGUiLCJub3JtYWxpemUxM2IiLCJ3cyIsInJvdW5kIiwiY29udmVydDEzYiIsInN0dWIiLCJwaCIsIl8iLCJyd3N0IiwiaXdzdCIsIm5yd3MiLCJucndzdCIsIm5pd3N0Iiwicm13cyIsIm11bGYiLCJtdWxuIiwic3FyIiwiaXNxciIsInRvQml0QXJyYXkiLCJpdXNobG4iLCJiaXRzIiwiY2FycnlNYXNrIiwibmV3Q2FycnkiLCJpc2hsbiIsImhpbnQiLCJleHRlbmRlZCIsImgiLCJtYXNrIiwibWFza2VkV29yZHMiLCJpc2hybiIsInNobG4iLCJ1c2hsbiIsInNocm4iLCJ1c2hybiIsImltYXNrbiIsIm1hc2tuIiwiaXN1Ym4iLCJhZGRuIiwic3VibiIsImlhYnMiLCJfaXNobG5zdWJtdWwiLCJzaGlmdCIsIl93b3JkRGl2IiwiYmhpIiwiZGlmZiIsInFqIiwiZGl2IiwiZGl2bW9kIiwicG9zaXRpdmUiLCJkaXZuIiwidW1vZCIsImRpdlJvdW5kIiwiZG0iLCJoYWxmIiwicjIiLCJhY2MiLCJlZ2NkIiwiQSIsIkIiLCJDIiwiRCIsImciLCJpc0V2ZW4iLCJ5cCIsInhwIiwiaW0iLCJpc09kZCIsImptIiwiZ2NkIiwiX2ludm1wIiwieDEiLCJ4MiIsImRlbHRhIiwiY21wbiIsImludm0iLCJiaW5jbiIsInVjbXAiLCJndG4iLCJndCIsImd0ZW4iLCJndGUiLCJsdG4iLCJsdCIsImx0ZW4iLCJsdGUiLCJlcW4iLCJlcSIsIlJlZCIsInRvUmVkIiwiY3R4IiwiY29udmVydFRvIiwiX2ZvcmNlUmVkIiwiZnJvbVJlZCIsImNvbnZlcnRGcm9tIiwiZm9yY2VSZWQiLCJyZWRBZGQiLCJyZWRJQWRkIiwicmVkU3ViIiwicmVkSVN1YiIsInJlZFNobCIsInNobCIsInJlZE11bCIsIl92ZXJpZnkyIiwicmVkSU11bCIsInJlZFNxciIsIl92ZXJpZnkxIiwicmVkSVNxciIsInJlZFNxcnQiLCJzcXJ0IiwicmVkSW52bSIsInJlZE5lZyIsInJlZFBvdyIsInByaW1lcyIsImsyNTYiLCJwMjI0IiwicDE5MiIsInAyNTUxOSIsIk1QcmltZSIsInRtcCIsIl90bXAiLCJLMjU2IiwiUDIyNCIsIlAxOTIiLCJQMjU1MTkiLCJwcmltZSIsIl9wcmltZSIsIk1vbnQiLCJpbW9kIiwicmludiIsIm1pbnYiLCJpcmVkdWNlIiwicmxlbiIsInNwbGl0IiwiaW11bEsiLCJpbnB1dCIsIm91dHB1dCIsIm91dExlbiIsInByZXYiLCJuZXh0IiwibW9kMyIsIm9uZSIsIm5PbmUiLCJscG93IiwieiIsImludiIsInduZCIsImN1cnJlbnQiLCJjdXJyZW50TGVuIiwibW9udCIsInUiLCJnbG9iYWwiLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJfX3Byb3RvX18iLCJBcnJheUJ1ZmZlciIsImFycmF5IiwiYnl0ZU9mZnNldCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJzbGljZSIsImZyb21TdHJpbmciLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJ0eXBlIiwiZGF0YSIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJ0b0xvd2VyQ2FzZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImRpciIsImlzTmFOIiwiYXJyYXlJbmRleE9mIiwiaW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwib2Zmc2V0IiwiTnVtYmVyIiwicmVtYWluaW5nIiwic3RyTGVuIiwicGFyc2VkIiwicGFyc2VJbnQiLCJzdWJzdHIiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsInB1c2giLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwiZnJvbUJ5dGVBcnJheSIsInV0ZjhTbGljZSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImNvbmNhdCIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJhcmd1bWVudHMiLCJoZXhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsInV0ZjE2bGVTbGljZSIsImVxdWFscyIsIm1hdGNoIiwiam9pbiIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwiX2FyciIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsInNldCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsImVsbGlwdGljIiwidmVyc2lvbiIsInV0aWxzIiwicmFuZCIsImN1cnZlIiwiY3VydmVzIiwiZWMiLCJlZGRzYSIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJmbiIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0Iiwid2luZG93IiwiZG9jdW1lbnQiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiZXh0ZW5kIiwidGhpc0FyZyIsImVxdWFsIiwiaHRvbmwiLCJ6ZXJvMiIsInplcm84IiwiZW5jIiwidG9IZXgzMiIsImpvaW4zMiIsInNwbGl0MzIiLCJyb3RyMzIiLCJyb3RsMzIiLCJzdW0zMiIsInN1bTMyXzMiLCJzdW0zMl80Iiwic3VtMzJfNSIsInN1bTY0IiwiYWgiLCJhbCIsImJoIiwic3VtNjRfaGkiLCJibCIsInN1bTY0X2xvIiwic3VtNjRfNF9oaSIsImNoIiwiY2wiLCJkaCIsImRsIiwic3VtNjRfNF9sbyIsInN1bTY0XzVfaGkiLCJlaCIsImVsIiwic3VtNjRfNV9sbyIsInJvdHI2NF9oaSIsInJvdHI2NF9sbyIsInNocjY0X2hpIiwic2hyNjRfbG8iLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwicHJvY2VzcyIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIkZ1bmN0aW9uIiwiZXZhbCIsIlRyYW5zZm9ybSIsIlN0cmluZ0RlY29kZXIiLCJDaXBoZXJCYXNlIiwiaGFzaE1vZGUiLCJfZmluYWxPckRpZ2VzdCIsImZpbmFsIiwiX2ZpbmFsIiwiX19maW5hbCIsIl9kZWNvZGVyIiwiX2VuY29kaW5nIiwidXBkYXRlIiwiaW5wdXRFbmMiLCJvdXRwdXRFbmMiLCJvdXREYXRhIiwiX3VwZGF0ZSIsIl90b1N0cmluZyIsInNldEF1dG9QYWRkaW5nIiwiZ2V0QXV0aFRhZyIsInNldEF1dGhUYWciLCJzZXRBQUQiLCJfdHJhbnNmb3JtIiwiZXJyIiwiX2ZsdXNoIiwiZG9uZSIsImZpbiIsInBuYSIsIm9iamVjdEtleXMiLCJrZXlzIiwiRHVwbGV4IiwidXRpbCIsIlJlYWRhYmxlIiwiV3JpdGFibGUiLCJ2IiwibWV0aG9kIiwib3B0aW9ucyIsInJlYWRhYmxlIiwiYWxsb3dIYWxmT3BlbiIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm9uRW5kTlQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJfZGVzdHJveSIsImNiIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJyYXdCeXRlcyIsIk1ENSIsIlJJUEVNRDE2MCIsInNoYSIsIkJhc2UiLCJIYXNoIiwiaGFzaCIsIl9oYXNoIiwiZGlnZXN0IiwiYWxnIiwiYmxvY2tTaXplIiwiZmluYWxTaXplIiwiX2Jsb2NrIiwiX2ZpbmFsU2l6ZSIsIl9ibG9ja1NpemUiLCJfbGVuIiwiYmxvY2siLCJhY2N1bSIsImFzc2lnbmVkIiwicmVtYWluZGVyIiwicmVtIiwibG93Qml0cyIsImhpZ2hCaXRzIiwib2JqZWN0VG9TdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzU3ltYm9sIiwiaXNSZWdFeHAiLCJpc0Vycm9yIiwiaXNQcmltaXRpdmUiLCJCbG9ja0hhc2giLCJwZW5kaW5nIiwicGVuZGluZ1RvdGFsIiwib3V0U2l6ZSIsImhtYWNTdHJlbmd0aCIsInBhZExlbmd0aCIsIl9kZWx0YTgiLCJfZGVsdGEzMiIsIl9wYWQiLCJfZGlnZXN0IiwiYXNuMSIsImJpZ251bSIsImNvbnN0YW50cyIsImRlY29kZXJzIiwiZW5jb2RlcnMiLCJSZXBvcnRlciIsIkRlY29kZXJCdWZmZXIiLCJFbmNvZGVyQnVmZmVyIiwiTm9kZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImFzVUludDMyQXJyYXkiLCJzY3J1YlZlYyIsImNyeXB0QmxvY2siLCJNIiwia2V5U2NoZWR1bGUiLCJTVUJfTUlYIiwiU0JPWCIsIm5Sb3VuZHMiLCJ0MCIsInQxIiwidDIiLCJ0MyIsIlNVQl9NSVgwIiwiU1VCX01JWDEiLCJTVUJfTUlYMiIsIlNVQl9NSVgzIiwiczAiLCJzMSIsInMyIiwiczMiLCJrc1JvdyIsIlJDT04iLCJHIiwiSU5WX1NCT1giLCJJTlZfU1VCX01JWCIsInhpIiwic3giLCJ4NCIsIng4IiwiQUVTIiwiX2tleSIsIl9yZXNldCIsImtleVNpemUiLCJrZXlXb3JkcyIsImtzUm93cyIsImludktleVNjaGVkdWxlIiwiaWsiLCJrc1IiLCJ0dCIsIl9uUm91bmRzIiwiX2tleVNjaGVkdWxlIiwiX2ludktleVNjaGVkdWxlIiwiZW5jcnlwdEJsb2NrUmF3IiwiZW5jcnlwdEJsb2NrIiwiZGVjcnlwdEJsb2NrIiwibTEiLCJzY3J1YiIsInBhc3N3b3JkIiwic2FsdCIsImtleUJpdHMiLCJpdkxlbiIsImtleUxlbiIsIml2IiwidXNlZCIsImtleVN0YXJ0IiwiaXZTdGFydCIsInNob3J0IiwiZWR3YXJkcyIsImFlc2lkIiwiZml4UHJvYyIsImNpcGhlcnMiLCJjb21wYXQiLCJwYXJzZUtleXMiLCJwYXNzcGhyYXNlIiwic3VidHlwZSIsIm5kYXRhIiwic3RyaXBwZWQiLCJ0YWciLCJjZXJ0aWZpY2F0ZSIsImRlY29kZSIsInRic0NlcnRpZmljYXRlIiwic3ViamVjdFB1YmxpY0tleUluZm8iLCJQdWJsaWNLZXkiLCJhbGdvcml0aG0iLCJSU0FQdWJsaWNLZXkiLCJzdWJqZWN0UHVibGljS2V5Iiwic3ViamVjdFByaXZhdGVLZXkiLCJwYXJhbXMiLCJwdWJfa2V5IiwiRFNBcGFyYW0iLCJkZWNyeXB0Iiwia2RlIiwia2RlcGFyYW1zIiwiaXRlcnMiLCJhbGdvIiwiY2lwaGVyIiwiY2lwaGVyVGV4dCIsImtleWxlbiIsInBia2RmMlN5bmMiLCJjcmVhdGVEZWNpcGhlcml2IiwiRW5jcnlwdGVkUHJpdmF0ZUtleSIsIlByaXZhdGVLZXkiLCJSU0FQcml2YXRlS2V5IiwicHJpdmF0ZUtleSIsIkVDUHJpdmF0ZUtleSIsInByaXZfa2V5IiwiRFNBUHJpdmF0ZUtleSIsInBhcmFtZXRlcnMiLCJzaWduYXR1cmUiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiQWNjZXB0IiwiSGFzaEJhc2UiLCJBUlJBWTE2IiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJyb3RsIiwiZm5GIiwiZm5HIiwiZm5IIiwiZm5JIiwiX2Jsb2NrT2Zmc2V0IiwiX2xlbmd0aCIsIlN0cmVhbSIsIkVFIiwiRXZlbnRFbWl0dGVyIiwiUGFzc1Rocm91Z2giLCJzb3VyY2UiLCJvbmRhdGEiLCJjaHVuayIsInBhdXNlIiwib25kcmFpbiIsInJlc3VtZSIsIl9pc1N0ZGlvIiwib25jbG9zZSIsImRpZE9uRW5kIiwiZGVzdHJveSIsIm9uZXJyb3IiLCJlciIsImNsZWFudXAiLCJsaXN0ZW5lckNvdW50IiwiX2V2ZW50cyIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwic2V0TWF4TGlzdGVuZXJzIiwiaGFuZGxlciIsImVycm9yIiwiY29udGV4dCIsImxpc3RlbmVyIiwibmV3TGlzdGVuZXIiLCJ3YXJuZWQiLCJjb25zb2xlIiwidHJhY2UiLCJmaXJlZCIsInBvc2l0aW9uIiwic3BsaWNlIiwiZXZsaXN0ZW5lciIsImVtaXR0ZXIiLCJzZXRJbW1lZGlhdGUiLCJDb3JrZWRSZXF1ZXN0Iiwic3RhdGUiLCJfdGhpcyIsImVudHJ5IiwiZmluaXNoIiwiY29ya1JlcSIsImNhbGxiYWNrIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwiV3JpdGFibGVTdGF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsIk91clVpbnQ4QXJyYXkiLCJyZWFsSGFzSW5zdGFuY2UiLCJkZXN0cm95SW1wbCIsIm5vcCIsInN0cmVhbSIsImlzRHVwbGV4Iiwib2JqZWN0TW9kZSIsIndyaXRhYmxlT2JqZWN0TW9kZSIsImh3bSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZGVmYXVsdEh3bSIsImZpbmFsQ2FsbGVkIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJkZWZhdWx0RW5jb2RpbmciLCJ3cml0aW5nIiwiY29ya2VkIiwic3luYyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZmluaXNoTWF5YmUiLCJlcnJvckVtaXR0ZWQiLCJvbndyaXRlRXJyb3IiLCJuZWVkRmluaXNoIiwiYnVmZmVyZWRSZXF1ZXN0IiwiY2xlYXJCdWZmZXIiLCJhZnRlcldyaXRlIiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZG9Xcml0ZSIsIm9ud3JpdGVEcmFpbiIsImhvbGRlciIsImNvdW50IiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwibmVlZCIsInByZWZpbmlzaCIsImdldEJ1ZmZlciIsImhhc0luc3RhbmNlIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJuZXdDaHVuayIsImRlY29kZUNodW5rIiwibGFzdCIsIndyaXRlT3JCdWZmZXIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiZW5kV3JpdGFibGUiLCJfdW5kZXN0cm95IiwidW5kZXN0cm95IiwibmIiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidGV4dCIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidXRmOENoZWNrSW5jb21wbGV0ZSIsInpsIiwienIiLCJzbCIsInNyIiwiaGwiLCJociIsIl9lIiwiZm4xIiwiZm4yIiwiZm4zIiwiZm40IiwiZm41IiwiYXIiLCJiciIsImNyIiwiZHIiLCJ0bCIsInRyIiwiQWxnb3JpdGhtIiwic2hhMSIsInNoYTIyNCIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsIkNpcGhlciIsIkRFUyIsIkNCQyIsIkVERSIsImRlY2lwaGVycyIsIm1vZGVzIiwiY3JlYXRlQ2lwaGVyIiwiY3JlYXRlQ2lwaGVyaXYiLCJDaXBoZXJpdiIsImNyZWF0ZURlY2lwaGVyIiwiRGVjaXBoZXIiLCJEZWNpcGhlcml2IiwibGlzdENpcGhlcnMiLCJnZXRDaXBoZXJzIiwibW9kZU1vZHVsZXMiLCJFQ0IiLCJDRkIiLCJDRkI4IiwiQ0ZCMSIsIk9GQiIsIkNUUiIsIkdDTSIsImJuIiwicmFuZG9tQnl0ZXMiLCJjcnQiLCJwcml2IiwiYmxpbmRzIiwiZ2V0ciIsImJsaW5kZXIiLCJtb2R1bHVzIiwicHVibGljRXhwb25lbnQiLCJ1bmJsaW5kZXIiLCJibGluZCIsImJsaW5kZWQiLCJjMSIsInByaW1lMSIsImMyIiwicHJpbWUyIiwicWludiIsImNvZWZmaWNpZW50IiwiZXhwb25lbnQxIiwibTIiLCJleHBvbmVudDIiLCJyaXBlbWQiLCJobWFjIiwicmlwZW1kMTYwIiwic2V0dGxlIiwiYnVpbGRVUkwiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImJ0b2EiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwibG9hZEV2ZW50IiwieERvbWFpbiIsIlhEb21haW5SZXF1ZXN0IiwidXJsIiwib25wcm9ncmVzcyIsIm9udGltZW91dCIsImF1dGgiLCJ1c2VybmFtZSIsIkF1dGhvcml6YXRpb24iLCJvcGVuIiwidG9VcHBlckNhc2UiLCJwYXJhbXNTZXJpYWxpemVyIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiX19DQU5DRUxfXyIsIkNhbmNlbCIsIl9maW5hbGl6ZWQiLCJwcmVmaXgiLCJ0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIiLCJSZWFkYWJsZVN0YXRlIiwiRUVsaXN0ZW5lckNvdW50IiwiZGVidWdVdGlsIiwiZGVidWciLCJkZWJ1Z2xvZyIsIkJ1ZmZlckxpc3QiLCJrUHJveHlFdmVudHMiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsInBpcGVzIiwicGlwZXNDb3VudCIsImZsb3dpbmciLCJlbmRFbWl0dGVkIiwicmVhZGluZyIsIm5lZWRSZWFkYWJsZSIsImVtaXR0ZWRSZWFkYWJsZSIsInJlYWRhYmxlTGlzdGVuaW5nIiwicmVzdW1lU2NoZWR1bGVkIiwiYXdhaXREcmFpbiIsInJlYWRpbmdNb3JlIiwiZGVjb2RlciIsIl9yZWFkIiwicmVhZGFibGVBZGRDaHVuayIsImFkZFRvRnJvbnQiLCJza2lwQ2h1bmtDaGVjayIsImVtaXRSZWFkYWJsZSIsIm9uRW9mQ2h1bmsiLCJjaHVua0ludmFsaWQiLCJnZXRQcm90b3R5cGVPZiIsImFkZENodW5rIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsInVuc2hpZnQiLCJpc1BhdXNlZCIsInNldEVuY29kaW5nIiwiTUFYX0hXTSIsImhvd011Y2hUb1JlYWQiLCJoZWFkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJlbWl0UmVhZGFibGVfIiwiZmxvdyIsIm1heWJlUmVhZE1vcmVfIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJmcm9tTGlzdCIsImNsZWFyIiwiaGFzU3RyaW5ncyIsInRhaWwiLCJjb3B5RnJvbUJ1ZmZlclN0cmluZyIsImNvcHlGcm9tQnVmZmVyIiwiZnJvbUxpc3RQYXJ0aWFsIiwiZW5kUmVhZGFibGUiLCJlbmRSZWFkYWJsZU5UIiwieHMiLCJuT3JpZyIsImRvUmVhZCIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJ1bnBpcGUiLCJvbnVucGlwZSIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25maW5pc2giLCJjbGVhbmVkVXAiLCJwaXBlT25EcmFpbiIsImluY3JlYXNlZEF3YWl0RHJhaW4iLCJldmVudCIsImRlc3RzIiwiaW5kZXgiLCJldiIsIndyYXAiLCJwYXVzZWQiLCJfZnJvbUxpc3QiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJfdHJhbnNmb3JtU3RhdGUiLCJhZnRlclRyYW5zZm9ybSIsInRzIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIndyaXRlZW5jb2RpbmciLCJmbHVzaCIsIl90aGlzMiIsImVycjIiLCJLIiwiVyIsIlNoYTI1NiIsImluaXQiLCJfdyIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsImdhbW1hMCIsIl9mIiwiX2ciLCJfaCIsImYiLCJUMSIsIlQyIiwiSCIsIlNoYTUxMiIsIkNoIiwieGwiLCJHYW1tYTAiLCJHYW1tYTBsIiwiR2FtbWExIiwiR2FtbWExbCIsImdldENhcnJ5IiwiX2FoIiwiX2JoIiwiX2NoIiwiX2RoIiwiX2VoIiwiX2ZoIiwiX2doIiwiX2hoIiwiX2FsIiwiX2JsIiwiX2NsIiwiX2RsIiwiX2VsIiwiX2ZsIiwiX2dsIiwiX2hsIiwiZmgiLCJnaCIsImhoIiwiZmwiLCJnbCIsInhoIiwiZ2FtbWEwbCIsImdhbW1hMSIsImdhbW1hMWwiLCJXaTdoIiwiV2k3bCIsIldpMTZoIiwiV2kxNmwiLCJXaWwiLCJXaWgiLCJtYWpoIiwibWFqbCIsInNpZ21hMGgiLCJzaWdtYTBsIiwic2lnbWExaCIsInNpZ21hMWwiLCJLaWgiLCJLaWwiLCJjaGgiLCJjaGwiLCJ0MWwiLCJ0MWgiLCJ0MmwiLCJ0MmgiLCJ3cml0ZUludDY0QkUiLCJMZWdhY3kiLCJtZDUiLCJaRVJPUyIsIkhtYWMiLCJibG9ja3NpemUiLCJfYWxnIiwiaXBhZCIsIl9pcGFkIiwib3BhZCIsIl9vcGFkIiwicGJrZGYyIiwiTUFYX0FMTE9DIiwiY2hlY2tCdWZmZXIiLCJpdGVyYXRpb25zIiwiY2hlY2tQYXJhbWV0ZXJzIiwic2l6ZXMiLCJybWQxNjAiLCJzYWx0TGVuIiwiZ2V0RGlnZXN0IiwiaXBhZDEiLCJpcGFkMiIsIkRLIiwiYmxvY2sxIiwiZGVzdFBvcyIsImhMZW4iLCJUIiwiVSIsImluY3IzMiIsImdldEJsb2NrIiwiX2NpcGhlciIsIl9wcmV2IiwiZW5jcnlwdCIsImNodW5rTnVtIiwiX2NhY2hlIiwicGFkIiwiaXRlbSIsImFlcyIsIkdIQVNIIiwiU3RyZWFtQ2lwaGVyIiwiY2siLCJfZ2hhc2giLCJfZmluSUQiLCJnaGFzaCIsInRvUGFkIiwiaXZCaXRzIiwiY2FsY0l2IiwiX3NlY0NhY2hlIiwiX2RlY3J5cHQiLCJfYWxlbiIsIl9tb2RlIiwiX2F1dGhUYWciLCJfY2FsbGVkIiwicnVtcCIsInhvclRlc3QiLCJmaW5kUHJpbWUiLCJzaW1wbGVTaWV2ZSIsImZlcm1hdFRlc3QiLCJUV0VOVFlGT1VSIiwibWlsbGVyUmFiaW4iLCJPTkUiLCJUV08iLCJGSVZFIiwiVEVOIiwiVEhSRUUiLCJFTEVWRU4iLCJGT1VSIiwiX2dldFByaW1lcyIsImdlbiIsIm4yIiwidGVzdCIsImJyb3JhbmQiLCJNaWxsZXJSYWJpbiIsIlJhbmQiLCJfcmFuZGJlbG93IiwibWluX2J5dGVzIiwiZ2VuZXJhdGUiLCJfcmFuZHJhbmdlIiwic3RvcCIsInJvbmUiLCJuMSIsInJuMSIsImdldERpdmlzb3IiLCJfcmFuZCIsImdldEJ5dGVzIiwiZ2V0Qnl0ZSIsImVuY29kZSIsImNoMzIiLCJtYWozMiIsInAzMiIsImZ0XzEiLCJzMF8yNTYiLCJzMV8yNTYiLCJnMF8yNTYiLCJnMV8yNTYiLCJzaGFDb21tb24iLCJzaGEyNTZfSyIsIlNIQTI1NiIsInNoYTUxMl9LIiwiU0hBNTEyIiwiY2g2NF9oaSIsInloIiwieWwiLCJ6aCIsImNoNjRfbG8iLCJtYWo2NF9oaSIsIm1hajY0X2xvIiwiczBfNTEyX2hpIiwiczBfNTEyX2xvIiwiczFfNTEyX2hpIiwiczFfNTEyX2xvIiwiZzBfNTEyX2hpIiwiZzBfNTEyX2xvIiwiZzFfNTEyX2hpIiwiZzFfNTEyX2xvIiwiX3ByZXBhcmVCbG9jayIsImMwX2hpIiwiYzBfbG8iLCJjMV9oaSIsImMxX2xvIiwiYzJfaGkiLCJjMl9sbyIsImMzX2hpIiwiYzNfbG8iLCJjNF9oaSIsImM0X2xvIiwiVDFfaGkiLCJUMV9sbyIsIlQyX2hpIiwiVDJfbG8iLCJyZXBvcnRlciIsIm1hcCIsInNhdmUiLCJyZXN0b3JlIiwiaXNFbXB0eSIsImZhaWwiLCJza2lwIiwiX3JlcG9ydGVyU3RhdGUiLCJyYXciLCJfcmV2ZXJzZSIsImRlciIsIkRFUkRlY29kZXIiLCJlbnRpdHkiLCJ0cmVlIiwiREVSTm9kZSIsImJvZHkiLCJwYXJlbnQiLCJkZXJEZWNvZGVUYWciLCJjbHMiLCJ0YWdDbGFzcyIsInByaW1pdGl2ZSIsIm9jdCIsInRhZ1N0ciIsImRlckRlY29kZUxlbiIsIl9kZWNvZGUiLCJfcGVla1RhZyIsImFueSIsImRlY29kZWRUYWciLCJfZGVjb2RlVGFnIiwiX3NraXBVbnRpbEVuZCIsIl9kZWNvZGVMaXN0IiwicG9zc2libGVFbmQiLCJfZGVjb2RlU3RyIiwidW51c2VkIiwibnVtc3RyIiwiX2lzTnVtc3RyIiwicHJpbnRzdHIiLCJfaXNQcmludHN0ciIsIl9kZWNvZGVPYmppZCIsInZhbHVlcyIsInJlbGF0aXZlIiwiaWRlbnRpZmllcnMiLCJpZGVudCIsInN1YmlkZW50IiwiZmlyc3QiLCJzZWNvbmQiLCJfZGVjb2RlVGltZSIsInllYXIiLCJtb24iLCJkYXkiLCJob3VyIiwic2VjIiwiRGF0ZSIsIlVUQyIsIl9kZWNvZGVOdWxsIiwiX2RlY29kZUJvb2wiLCJfZGVjb2RlSW50IiwiX3VzZSIsIl9nZXREZWNvZGVyIiwiREVSRW5jb2RlciIsInR3byIsIl9lbmNvZGUiLCJfZW5jb2RlQ29tcG9zaXRlIiwiY29udGVudCIsImhlYWRlciIsImVuY29kZWRUYWciLCJ0YWdCeU5hbWUiLCJ0YWdDbGFzc0J5TmFtZSIsImVuY29kZVRhZyIsIl9jcmVhdGVFbmNvZGVyQnVmZmVyIiwibGVuT2N0ZXRzIiwiX2VuY29kZVN0ciIsIl9lbmNvZGVPYmppZCIsImlkIiwib2JqaWQiLCJfZW5jb2RlVGltZSIsInRpbWUiLCJkYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiX2VuY29kZU51bGwiLCJfZW5jb2RlSW50IiwibnVtQXJyYXkiLCJzaWduIiwiX2VuY29kZUJvb2wiLCJfZ2V0RW5jb2RlciIsIl9za2lwRGVmYXVsdCIsImRhdGFCdWZmZXIiLCJfYmFzZVN0YXRlIiwiZGVmYXVsdEJ1ZmZlciIsIl9lbmNvZGVWYWx1ZSIsImNyZWF0ZUhhc2giLCJpMm9wcyIsInNlZWQiLCJwYWRkZWRNc2ciLCJfYXhpb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2JzIiwiX2J1ZmZlciIsIl9jcnlwdG8iLCJfc2VjcDI1NmsiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwicnYiLCJhdHRlbXB0cyIsImlzQ2Fub25pY2FsU2lnbmF0dXJlIiwicmVjb3ZlcnkiLCJ3aWYiLCJwcml2YXRlX3dpZiIsInByaXZhdGVfa2V5IiwiY2hlY2tzdW0iLCJuZXdfY2hlY2tzdW0iLCJBdXRoIiwicnBjIiwidHJhbnNhY3Rpb24iLCJhZGRyZXNzUHJlZml4IiwiY2hhaW5JZCIsImxvZyIsInRyYW5zYWN0aW9uSGV4Iiwic3Vic3RyaW5nIiwidHJhbnNhY3Rpb25EaWdlc3QiLCJzaWduYXR1cmVzIiwiUnBjIiwiaG9zdCIsInJhbmRvbSIsInBheWxvYWQiLCJqc29ucnBjIiwiaGFkUnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJvbGRSdW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJpdGVyYXRvciIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsIml0ZXIiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjaGFyQXQiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJpdGVyYWJsZSIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW52b2tlIiwidW53cmFwcGVkIiwicmV0dXJuIiwiaW5mbyIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsIkF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiaW5zdGFuY2UiLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNTbG93QnVmZmVyIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiY2hhaW4iLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwibm9ybWFsaXplZE5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ0b0lTT1N0cmluZyIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwic2VhcmNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJjaGFycyIsIkUiLCJjaGFyQ29kZSIsImlkeCIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlYXNvbiIsImZucyIsInJlbGF0aXZlVVJMIiwiZXhlY3V0b3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwiYmFzZXgiLCJBTFBIQUJFVCIsIkJBU0VfTUFQIiwieGMiLCJCQVNFIiwiTEVBREVSIiwiRkFDVE9SIiwiaUZBQ1RPUiIsImRlY29kZVVuc2FmZSIsInBzeiIsInplcm9lcyIsImIyNTYiLCJpdCIsInZjaCIsInBiZWdpbiIsInBlbmQiLCJiNTgiLCJyZXBlYXQiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsIkxOMiIsInJuZyIsInBzZXVkb1JhbmRvbUJ5dGVzIiwicHJuZyIsImNyZWF0ZUhtYWMiLCJhbGdvcyIsImFsZ29LZXlzIiwiaGFzaGVzIiwiZ2V0SGFzaGVzIiwiRGlmZmllSGVsbG1hbkdyb3VwIiwiY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwIiwiZ2V0RGlmZmllSGVsbG1hbiIsImNyZWF0ZURpZmZpZUhlbGxtYW4iLCJEaWZmaWVIZWxsbWFuIiwiY3JlYXRlU2lnbiIsIlNpZ24iLCJjcmVhdGVWZXJpZnkiLCJWZXJpZnkiLCJjcmVhdGVFQ0RIIiwicHVibGljRW5jcnlwdCIsInByaXZhdGVFbmNyeXB0IiwicHVibGljRGVjcnlwdCIsInByaXZhdGVEZWNyeXB0IiwicmYiLCJyYW5kb21GaWxsIiwicmFuZG9tRmlsbFN5bmMiLCJjcmVhdGVDcmVkZW50aWFscyIsIkRIX0NIRUNLX1BfTk9UX1NBRkVfUFJJTUUiLCJESF9DSEVDS19QX05PVF9QUklNRSIsIkRIX1VOQUJMRV9UT19DSEVDS19HRU5FUkFUT1IiLCJESF9OT1RfU1VJVEFCTEVfR0VORVJBVE9SIiwiTlBOX0VOQUJMRUQiLCJBTFBOX0VOQUJMRUQiLCJSU0FfUEtDUzFfUEFERElORyIsIlJTQV9TU0xWMjNfUEFERElORyIsIlJTQV9OT19QQURESU5HIiwiUlNBX1BLQ1MxX09BRVBfUEFERElORyIsIlJTQV9YOTMxX1BBRERJTkciLCJSU0FfUEtDUzFfUFNTX1BBRERJTkciLCJQT0lOVF9DT05WRVJTSU9OX0NPTVBSRVNTRUQiLCJQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCIsIlBPSU5UX0NPTlZFUlNJT05fSFlCUklEIiwiQ29uc3RydWN0b3IiLCJjdXN0b20iLCJzY29wZSIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJjbG9zZSIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImF0dGFjaEV2ZW50IiwidGFzayIsImxvY2FsU3RvcmFnZSIsIndhcm4iLCJTaGEiLCJyb3RsMzAiLCJmdCIsIlNoYTEiLCJyb3RsNSIsIlNoYTIyNCIsIlNoYTM4NCIsIlpFUk9fQlVGIiwic3VidGxlIiwidG9Ccm93c2VyIiwic2hhLTEiLCJzaGEtMjU2Iiwic2hhLTM4NCIsInNoYS01MTIiLCJjaGVja3MiLCJicm93c2VyUGJrZGYyIiwiaW1wb3J0S2V5IiwiZGVyaXZlQml0cyIsInByb20iLCJjaGVja05hdGl2ZSIsInJlc3AiLCJhZXNNb2RlcyIsImRlc01vZGVzIiwiZWJ0ayIsInN1aXRlIiwiZGVzIiwiZGVzLWVkZTMtY2JjIiwiaW5zdGFudGlhdGUiLCJkZXMtZWRlMyIsImRlcy1lZGUtY2JjIiwiZGVzLWVkZSIsImRlcy1jYmMiLCJkZXMtZWNiIiwib3B0cyIsIm1vZGVOYW1lIiwiX2RlcyIsImRlczMiLCJpcCIsImluTCIsImluUiIsIm91dEwiLCJvdXRSIiwicmlwIiwicGMxIiwicjI4c2hsIiwicGMydGFibGUiLCJwYzIiLCJleHBhbmQiLCJzVGFibGUiLCJzdWJzdGl0dXRlIiwicGVybXV0ZVRhYmxlIiwicGFkU3BsaXQiLCJncm91cCIsImJ1ZmZlck9mZiIsIl91cGRhdGVEZWNyeXB0IiwiX3VwZGF0ZUVuY3J5cHQiLCJfZmx1c2hCdWZmZXIiLCJpbnB1dE9mZiIsIm91dHB1dE9mZiIsIl9maW5hbEVuY3J5cHQiLCJfZmluYWxEZWNyeXB0IiwiX3VucGFkIiwiREVTU3RhdGUiLCJfZGVzU3RhdGUiLCJkZXJpdmVLZXlzIiwic2hpZnRUYWJsZSIsImtMIiwia1IiLCJpbnAiLCJpbk9mZiIsIm91dE9mZiIsIl9lbmNyeXB0IiwibFN0YXJ0IiwiclN0YXJ0Iiwia2V5TCIsImtleVIiLCJwcm90byIsIkNCQ1N0YXRlIiwiX2NiY0luaXQiLCJfY2JjU3RhdGUiLCJzdXBlclByb3RvIiwiRURFU3RhdGUiLCJrMSIsImsyIiwiazMiLCJfZWRlU3RhdGUiLCJNT0RFUyIsIkF1dGhDaXBoZXIiLCJTcGxpdHRlciIsIl9hdXRvcGFkZGluZyIsInRoaW5nIiwiUEFERElORyIsImNhY2hlIiwic2V0VG8iLCJwYWRCdWZmIiwiZW5jcnlwdFN0YXJ0IiwiZW5jcnlwdEJ5dGUiLCJieXRlUGFyYW0iLCJzaGlmdEluIiwiWkVST0VTIiwiZnJvbUFycmF5IiwiX211bHRpcGx5IiwibHNiVmkiLCJWaSIsIlppIiwiYWJsIiwiX2xhc3QiLCJwYWRkZWQiLCJ1bnBhZCIsImF1dG9QYWRkaW5nIiwiZ2VuZXJhdGVQcmltZSIsIkRIIiwiRU5DT0RJTkdTIiwiYmluYXJ5IiwiaGV4IiwiZ2VuYyIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwiY2hpbGRyZW4iLCJTRVZFTiIsInNldFB1YmxpY0tleSIsInB1YiIsIl9wdWIiLCJzZXRQcml2YXRlS2V5IiwiX3ByaXYiLCJwcmltZUNhY2hlIiwibWFsbGVhYmxlIiwic2V0R2VuZXJhdG9yIiwiX19wcmltZSIsIl9wcmltZUxlbiIsIl9wcmltZUNvZGUiLCJmb3JtYXRSZXR1cm5WYWx1ZSIsImNoZWNrUHJpbWUiLCJfX2dlbiIsImdlbmVyYXRlS2V5cyIsIl9nZW4iLCJnZXRQdWJsaWNLZXkiLCJjb21wdXRlU2VjcmV0Iiwib3RoZXIiLCJzZWNyZXQiLCJnZXRQcmltZSIsImZyb250IiwiZ2V0UHJpdmF0ZUtleSIsImdldEdlbmVyYXRvciIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJfaGFzaFR5cGUiLCJfdGFnIiwiX3NpZ25UeXBlIiwic2lnIiwiRUMiLCJnZXRLZXkiLCJobGVuIiwiaGJpdHMiLCJiaXRzMmludCIsImJpdHMyb2N0ZXRzIiwib2JpdHMiLCJtYWtlS2V5Iiwia3YiLCJtYWtlUiIsImhhc2hUeXBlIiwic2lnblR5cGUiLCJjdXJ2ZUlkIiwia2V5RnJvbVByaXZhdGUiLCJ0b0RFUiIsImVjU2lnbiIsImRzYVNpZ24iLCJtaW5Bc3NlcnQiLCJtaW5VdGlscyIsImdldE5BRiIsIm5hZiIsImdldEpTRiIsImpzZiIsImQxIiwiZDIiLCJ1MSIsInUyIiwibTgiLCJtMTQiLCJtMjQiLCJjYWNoZWRQcm9wZXJ0eSIsImNvbXB1dGVyIiwicGFyc2VCeXRlcyIsImludEZyb21MRSIsIkJhc2VDdXJ2ZSIsImNvbmYiLCJ6ZXJvIiwicG9pbnRGcm9tSlNPTiIsImdSZWQiLCJfd25hZlQxIiwiX3duYWZUMiIsIl93bmFmVDMiLCJfd25hZlQ0IiwiYWRqdXN0Q291bnQiLCJyZWROIiwiX21heHdlbGxUcmljayIsIkJhc2VQb2ludCIsInByZWNvbXB1dGVkIiwicG9pbnQiLCJ2YWxpZGF0ZSIsIl9maXhlZE5hZk11bCIsImRvdWJsZXMiLCJfZ2V0RG91YmxlcyIsIkkiLCJzdGVwIiwicmVwciIsIm5hZlciLCJqcG9pbnQiLCJtaXhlZEFkZCIsInBvaW50cyIsInRvUCIsIl93bmFmTXVsIiwibmFmUG9pbnRzIiwiX2dldE5BRlBvaW50cyIsImRibHAiLCJfd25hZk11bEFkZCIsImRlZlciLCJjb2VmZnMiLCJqYWNvYmlhblJlc3VsdCIsInduZFdpZHRoIiwiY29tYiIsInRvSiIsImphIiwiamIiLCJkZWNvZGVQb2ludCIsInBvaW50RnJvbVgiLCJlbmNvZGVDb21wcmVzc2VkIiwiY29tcGFjdCIsImdldFgiLCJnZXRZIiwicHJlY29tcHV0ZSIsInBvd2VyIiwiYmV0YSIsIl9nZXRCZXRhIiwiX2hhc0RvdWJsZXMiLCJkYmwiLCJTaG9ydEN1cnZlIiwidGludiIsInplcm9BIiwidGhyZWVBIiwiZW5kbyIsIl9nZXRFbmRvbW9ycGhpc20iLCJfZW5kb1duYWZUMSIsIl9lbmRvV25hZlQyIiwiUG9pbnQiLCJpc1JlZCIsImluZiIsIkpQb2ludCIsInpPbmUiLCJsYW1iZGEiLCJiZXRhcyIsIl9nZXRFbmRvUm9vdHMiLCJsYW1iZGFzIiwiYmFzaXMiLCJ2ZWMiLCJfZ2V0RW5kb0Jhc2lzIiwibnRpbnYiLCJwcmV2UiIsImFwcnhTcXJ0IiwieTEiLCJ5MiIsImxlbjEiLCJfZW5kb1NwbGl0IiwidjEiLCJ2MiIsInAxIiwicDIiLCJxMSIsInEyIiwiYXgiLCJyaHMiLCJfZW5kb1duYWZNdWxBZGQiLCJucG9pbnRzIiwibmNvZWZmcyIsImZyb21KU09OIiwicHJlIiwiZW5kb011bCIsIm9iajJwb2ludCIsImlzSW5maW5pdHkiLCJueCIsIm55IiwieXMxIiwiZHlpbnYiLCJtdWxBZGQiLCJqbXVsQWRkIiwiX3ByZWNvbXB1dGUiLCJuZWdhdGUiLCJ6aW52IiwiemludjIiLCJheSIsInB6MiIsInoyIiwiaDIiLCJoMyIsIm56IiwiangiLCJqeSIsImp6Iiwiano0IiwianlkIiwiangyIiwianlkMiIsImp5ZDQiLCJkbnkiLCJfemVyb0RibCIsIl90aHJlZURibCIsIl9kYmwiLCJ4eCIsInl5IiwieXl5eSIsInl5eXk4IiwiYzgiLCJnYW1tYSIsImFscGhhIiwiYmV0YTQiLCJiZXRhOCIsImdnYW1tYTgiLCJqeTIiLCJqeGQ0IiwianlkOCIsInRycGwiLCJ6eiIsIm1tIiwiZWUiLCJ5eXU0Iiwia2Jhc2UiLCJ6MyIsInB6MyIsImVxWFRvUCIsInpzIiwiTW9udEN1cnZlIiwiaTQiLCJhMjQiLCJub3JtYWxpemUiLCJhYSIsImJiIiwiZGlmZkFkZCIsImRhIiwianVtbEFkZCIsIkVkd2FyZHNDdXJ2ZSIsInR3aXN0ZWQiLCJtT25lQSIsImRkIiwib25lQyIsIl9tdWxBIiwiX211bEMiLCJsaHMiLCJwb2ludEZyb21ZIiwiX2V4dERibCIsIm50IiwiX3Byb2pEYmwiLCJfZXh0QWRkIiwiX3Byb2pBZGQiLCJ6aSIsIlByZXNldEN1cnZlIiwiZGVmaW5lQ3VydmUiLCJzaGExX0siLCJTSEExIiwiU0hBMjI0IiwiU0hBMzg0IiwiS2giLCJBaCIsIkJoIiwiRGgiLCJFaCIsInJoIiwic2giLCJpbm5lciIsIm91dGVyIiwiSG1hY0RSQkciLCJLZXlQYWlyIiwiU2lnbmF0dXJlIiwibmgiLCJrZXlQYWlyIiwiZnJvbVByaXZhdGUiLCJrZXlGcm9tUHVibGljIiwiZnJvbVB1YmxpYyIsImdlbktleVBhaXIiLCJkcmJnIiwicGVycyIsInBlcnNFbmMiLCJlbnRyb3B5IiwiZW50cm9weUVuYyIsIm5vbmNlIiwibnMyIiwiX3RydW5jYXRlVG9OIiwidHJ1bmNPbmx5IiwiYmtleSIsImdldFByaXZhdGUiLCJuczEiLCJrcCIsImtwWCIsInJlY292ZXJ5UGFyYW0iLCJjYW5vbmljYWwiLCJzaW52IiwiZ2V0UHVibGljIiwicmVjb3ZlclB1YktleSIsImlzWU9kZCIsImlzU2Vjb25kS2V5IiwickludiIsImdldEtleVJlY292ZXJ5UGFyYW0iLCJRIiwiUXByaW1lIiwicHJlZFJlc2lzdCIsIm1pbkVudHJvcHkiLCJfcmVzZWVkIiwicmVzZWVkSW50ZXJ2YWwiLCJWIiwibm9uY2VFbmMiLCJfaG1hYyIsImttYWMiLCJyZXNlZWQiLCJhZGRFbmMiLCJ0ZW1wIiwiX2ltcG9ydFByaXZhdGUiLCJwcml2RW5jIiwiX2ltcG9ydFB1YmxpYyIsInB1YkVuYyIsImRlcml2ZSIsIl9pbXBvcnRERVIiLCJQb3NpdGlvbiIsInBsYWNlIiwiZ2V0TGVuZ3RoIiwiaW5pdGlhbCIsIm9jdGV0TGVuIiwicm1QYWRkaW5nIiwiY29uc3RydWN0TGVuZ3RoIiwib2N0ZXRzIiwic2xlbiIsImJhY2tIYWxmIiwiRUREU0EiLCJwb2ludENsYXNzIiwiZW5jb2RpbmdMZW5ndGgiLCJrZXlGcm9tU2VjcmV0IiwiaGFzaEludCIsIlIiLCJSZW5jb2RlZCIsImVuY29kZVBvaW50Iiwic18iLCJwdWJCeXRlcyIsIlMiLCJtYWtlU2lnbmF0dXJlIiwiU0ciLCJmcm9tU2VjcmV0IiwibGFzdEl4Iiwibm9ybWVkIiwieElzT2RkIiwiZW5jb2RlSW50IiwiZGVjb2RlSW50IiwiaXNQb2ludCIsIl9zZWNyZXQiLCJfcHViQnl0ZXMiLCJwcml2Qnl0ZXMiLCJnZXRTZWNyZXQiLCJfUiIsIl9TIiwiX1JlbmNvZGVkIiwiX1NlbmNvZGVkIiwiU2VuY29kZWQiLCJ0b0J5dGVzIiwic2VxIiwiaW50IiwiQWxnb3JpdGhtSWRlbnRpZmllciIsImJpdHN0ciIsIm51bGxfIiwib3B0aW9uYWwiLCJQcml2YXRlS2V5SW5mbyIsIm9jdHN0ciIsIkVuY3J5cHRlZFByaXZhdGVLZXlJbmZvIiwiZXhwbGljaXQiLCJFQ1BhcmFtZXRlcnMiLCJjaG9pY2UiLCJuYW1lZEN1cnZlIiwiRW50aXR5IiwiX2NyZWF0ZU5hbWVkIiwibmFtZWQiLCJydW5JblRoaXNDb250ZXh0IiwiX2luaXROYW1lZCIsIk9iamVjdF9rZXlzIiwiZGVmaW5lUHJvcCIsImdsb2JhbHMiLCJTY3JpcHQiLCJydW5JbkNvbnRleHQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJ3aW4iLCJjb250ZW50V2luZG93Iiwid0V2YWwiLCJ3RXhlY1NjcmlwdCIsImV4ZWNTY3JpcHQiLCJ3aW5LZXlzIiwicnVuSW5OZXdDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImNyZWF0ZVNjcmlwdCIsImVycm9ycyIsIlJlcG9ydGVyRXJyb3IiLCJyZXRocm93IiwicGF0aExlbiIsImVudGVyS2V5IiwiZXhpdEtleSIsImxlYXZlS2V5IiwiZW50ZXJPYmplY3QiLCJsZWF2ZU9iamVjdCIsImluaGVyaXRlZCIsImVsZW0iLCJzdGFjayIsInBhcnRpYWwiLCJ3cmFwUmVzdWx0IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJ0YWdzIiwibWV0aG9kcyIsInJldmVyc2VBcmdzIiwidXNlRGVjb2RlciIsImltcGxpY2l0IiwiY29udGFpbnMiLCJfd3JhcCIsInN0YXRlUHJvcHMiLCJjc3RhdGUiLCJwcm9wIiwiZmlsdGVyIiwiY2hpbGQiLCJfdXNlQXJncyIsImRlZiIsIm5ld0tleSIsInByZXZPYmoiLCJwcmVzZW50IiwicHJldktleSIsIl9kZWNvZGVHZW5lcmljIiwiX2RlY29kZUNob2ljZSIsInRyYWNrIiwiX2dldFVzZSIsInNvbWUiLCJub2RlIiwiX2VuY29kZUNob2ljZSIsIl9lbmNvZGVQcmltaXRpdmUiLCIwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsIjgiLCI5IiwiMTAiLCIxMSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSIsIjI2IiwiMjciLCIyOCIsIjI5IiwiMzAiLCJwZW0iLCJQRU1EZWNvZGVyIiwibGluZXMiLCJsYWJlbCIsIlBFTUVuY29kZXIiLCJhc24iLCJUaW1lIiwidXRjVGltZSIsInV0Y3RpbWUiLCJnZW5lcmFsVGltZSIsImdlbnRpbWUiLCJBdHRyaWJ1dGVUeXBlVmFsdWUiLCJTdWJqZWN0UHVibGljS2V5SW5mbyIsIlJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUiLCJzZXRvZiIsIlJETlNlcXVlbmNlIiwic2Vxb2YiLCJOYW1lIiwicmRuU2VxdWVuY2UiLCJWYWxpZGl0eSIsIkV4dGVuc2lvbiIsImJvb2wiLCJUQlNDZXJ0aWZpY2F0ZSIsIlg1MDlDZXJ0aWZpY2F0ZSIsImZpbmRQcm9jIiwic3RhcnRSZWdleCIsImZ1bGxSZWdleCIsImV2cCIsIm9rZXkiLCJkZWNyeXB0ZWQiLCJjaXBoZXJLZXkiLCJtYXRjaDIiLCJjaGVja1ZhbHVlIiwicHVia2V5IiwiZWNWZXJpZnkiLCJ1bnBhY2tlZCIsIm1vbnRwIiwiZHNhVmVyaWZ5IiwicGFkTnVtIiwiRUNESCIsImFsaWFzZXMiLCJzZWNwMjU2azEiLCJzZWNwMjI0cjEiLCJwcmltZTI1NnYxIiwicHJpbWUxOTJ2MSIsImVkMjU1MTkiLCJzZWNwMzg0cjEiLCJzZWNwNTIxcjEiLCJjdXJ2ZVR5cGUiLCJwMjU2Iiwic2VjcDI1NnIxIiwic2VjcDE5MnIxIiwicDM4NCIsInA1MjEiLCJmb3JtYXQiLCJpbmVuYyIsIm1nZiIsIndpdGhQdWJsaWMiLCJwdWJsaWNLZXkiLCJpSGFzaCIsImhMZW4yIiwicHMiLCJkYmxlbiIsIm1hc2tlZERiIiwibWFza2VkU2VlZCIsIm9hZXAiLCJjdXIiLCJub25aZXJvIiwicGtjczEiLCJ6QnVmZmVyIiwiZGIiLCJkaWYiLCJvbGRCcm93c2VyIiwic2FmZUJ1ZmZlciIsInJhbmRvbWJ5dGVzIiwia0J1ZmZlck1heExlbmd0aCIsImtNYXhVaW50MzIiLCJhc3NlcnRPZmZzZXQiLCJhY3R1YWxGaWxsIiwib3VyQnVmIiwidWludCIsIm1lc3NhZ2VzIiwiaW5pdENvbXByZXNzZWRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsIkNPTVBSRVNTRURfVFlQRV9JTlZBTElEIiwicHJpdmF0ZUtleVZlcmlmeSIsIkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRCIsInByaXZhdGVLZXlFeHBvcnQiLCJjb21wcmVzc2VkIiwiaXNCdWZmZXJMZW5ndGgiLCJFQ19QUklWQVRFX0tFWV9MRU5HVEhfSU5WQUxJRCIsInByaXZhdGVLZXlJbXBvcnQiLCJFQ19QUklWQVRFX0tFWV9JTVBPUlRfREVSX0ZBSUwiLCJwcml2YXRlS2V5TmVnYXRlIiwicHJpdmF0ZUtleU1vZEludmVyc2UiLCJwcml2YXRlS2V5VHdlYWtBZGQiLCJ0d2VhayIsIlRXRUFLX1RZUEVfSU5WQUxJRCIsIlRXRUFLX0xFTkdUSF9JTlZBTElEIiwicHJpdmF0ZUtleVR3ZWFrTXVsIiwicHVibGljS2V5Q3JlYXRlIiwicHVibGljS2V5Q29udmVydCIsIkVDX1BVQkxJQ19LRVlfVFlQRV9JTlZBTElEIiwiaXNCdWZmZXJMZW5ndGgyIiwiRUNfUFVCTElDX0tFWV9MRU5HVEhfSU5WQUxJRCIsInB1YmxpY0tleVZlcmlmeSIsInB1YmxpY0tleVR3ZWFrQWRkIiwicHVibGljS2V5VHdlYWtNdWwiLCJwdWJsaWNLZXlDb21iaW5lIiwicHVibGljS2V5cyIsIkVDX1BVQkxJQ19LRVlTX1RZUEVfSU5WQUxJRCIsImlzTGVuZ3RoR1RaZXJvIiwiRUNfUFVCTElDX0tFWVNfTEVOR1RIX0lOVkFMSUQiLCJzaWduYXR1cmVOb3JtYWxpemUiLCJFQ0RTQV9TSUdOQVRVUkVfVFlQRV9JTlZBTElEIiwiRUNEU0FfU0lHTkFUVVJFX0xFTkdUSF9JTlZBTElEIiwic2lnbmF0dXJlRXhwb3J0Iiwic2lnT2JqIiwic2lnbmF0dXJlSW1wb3J0IiwiRUNEU0FfU0lHTkFUVVJFX1BBUlNFX0RFUl9GQUlMIiwic2lnbmF0dXJlSW1wb3J0TGF4IiwiTVNHMzJfVFlQRV9JTlZBTElEIiwiTVNHMzJfTEVOR1RIX0lOVkFMSUQiLCJub25jZWZuIiwiT1BUSU9OU19UWVBFX0lOVkFMSUQiLCJPUFRJT05TX0RBVEFfVFlQRV9JTlZBTElEIiwiT1BUSU9OU19EQVRBX0xFTkdUSF9JTlZBTElEIiwiT1BUSU9OU19OT05DRUZOX1RZUEVfSU5WQUxJRCIsInJlY292ZXIiLCJSRUNPVkVSWV9JRF9UWVBFX0lOVkFMSUQiLCJpc051bWJlckluSW50ZXJ2YWwiLCJSRUNPVkVSWV9JRF9WQUxVRV9JTlZBTElEIiwiZWNkaCIsImVjZGhVbnNhZmUiLCJsZW5ndGgxIiwibGVuZ3RoMiIsImJpcDY2IiwiRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQiLCJFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEIiwibGVuYiIsImxlblIiLCJwb3NSIiwibGVuUyIsInBvc1MiLCJsZW5ieXRlIiwicmluZGV4Iiwic2luZGV4IiwicnZhbHVlIiwic3ZhbHVlIiwiY2hlY2siLCJlY3BhcmFtcyIsImxvYWRQdWJsaWNLZXkiLCJ4QnVmZmVyIiwibG9hZENvbXByZXNzZWRQdWJsaWNLZXkiLCJ5QnVmZmVyIiwieDMiLCJsb2FkVW5jb21wcmVzc2VkUHVibGljS2V5IiwiRUNfUFJJVkFURV9LRVlfRVhQT1JUX0RFUl9GQUlMIiwiRUNfUFJJVkFURV9LRVlfUkFOR0VfSU5WQUxJRCIsIkVDX1BSSVZBVEVfS0VZX1RXRUFLX0FERF9GQUlMIiwiRUNfUFJJVkFURV9LRVlfVFdFQUtfTVVMX0ZBSUwiLCJFQ19QVUJMSUNfS0VZX0NSRUFURV9GQUlMIiwicGFpciIsIkVDX1BVQkxJQ19LRVlfUEFSU0VfRkFJTCIsIkVDX1BVQkxJQ19LRVlfVFdFQUtfQUREX0ZBSUwiLCJFQ19QVUJMSUNfS0VZX1RXRUFLX01VTF9GQUlMIiwicGFpcnMiLCJFQ19QVUJMSUNfS0VZX0NPTUJJTkVfRkFJTCIsIkVDRFNBX1NJR05BVFVSRV9QQVJTRV9GQUlMIiwiZ2V0Tm9uY2UiLCJjb3VudGVyIiwiRUNEU0FfU0lHTl9GQUlMIiwic2lnciIsInNpZ3MiLCJFQ0RT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Q0FDQSxtRUFDQSxvRUFFQSxDQUNBLGtFQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0EsbUVBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLGtFQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxrRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0EsbUVBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLGtFQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxzRUFJQXZDLElBQUEsQ0FDQXhvRCxJQUFBLEVBQ0ErcUQsT0FBQSxDQUNBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0Esa0VBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0EsbUVBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxrRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLGtFQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0EsbUVBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLGtFQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsaUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0Esa0VBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxtRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG9FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNBLG1FQUVBLENBQ0EsbUVBQ0Esb0VBRUEsQ0FDQSxtRUFDQSxvRUFFQSxDQUNBLG1FQUNB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MG1GLEVBQUE3L0UsU0FBQSxVQUFBeEUsTUFBQXMrRSxFQUFBZ0csV0FFQSxPQUFBbm1GLEVBQUFRLEtBQUE0a0YsRUFBQTlsQixJQUFBbjhELElBQUEraUYsR0FBQTNyQyxRQUFBLEVBQUFtbUMiLCJmaWxlIjoieGd0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwieGd0XCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInhndFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJ4Z3RcIl0gPSBmYWN0b3J5KCk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgwKTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbiIsIihmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4IChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciA8PD0gNDtcblxuICAgICAgLy8gJ2EnIC0gJ2YnXG4gICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7XG4gICAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQScgLSAnRidcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7XG4gICAgICAgIHIgfD0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgfD0gYyAmIDB4ZjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0KSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgLy8gU2NhbiAyNC1iaXQgY2h1bmtzIGFuZCBhZGQgdGhlbSB0byB0aGUgbnVtYmVyXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDYsIGogPSAwOyBpID49IHN0YXJ0OyBpIC09IDYpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIC8vIE5PVEU6IGAweDNmZmZmZmAgaXMgaW50ZW50aW9uYWwgaGVyZSwgMjZiaXRzIG1heCBzaGlmdCArIDI0Yml0IGhleCBsaW1iXG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSArIDYgIT09IHN0YXJ0KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIH1cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciArPSBjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9O1xuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZG4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgIGFzc2VydCh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGVuZGlhbiA9PT0gJ2xlJztcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5VHlwZShyZXFMZW5ndGgpO1xuXG4gICAgdmFyIGIsIGk7XG4gICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKCFsaXR0bGVFbmRpYW4pIHtcbiAgICAgIC8vIEFzc3VtZSBiaWctZW5kaWFuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVxTGVuZ3RoIC0gYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tyZXFMZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbaV0gPSBiO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IHJlcUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gJiAoMSA8PCB3Yml0KSkgPj4+IHdiaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPCBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLnN0cmlwKCk7XG4gICAgfVxuICAgIGEuc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICByLnN0cmlwKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkodHlwZW9mIG1vZHVsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbW9kdWxlLCB0aGlzKTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gZXhwb3J0cztcblxuZWxsaXB0aWMudmVyc2lvbiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb247XG5lbGxpcHRpYy51dGlscyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvdXRpbHMnKTtcbmVsbGlwdGljLnJhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5lbGxpcHRpYy5jdXJ2ZSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmUnKTtcbmVsbGlwdGljLmN1cnZlcyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvY3VydmVzJyk7XG5cbi8vIFByb3RvY29sc1xuZWxsaXB0aWMuZWMgPSByZXF1aXJlKCcuL2VsbGlwdGljL2VjJyk7XG5lbGxpcHRpYy5lZGRzYSA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWRkc2EnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xuICAgIGlmICghZW5jKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICAgIHZhciBsbyA9IGMgJiAweGZmO1xuICAgICAgICBpZiAoaGkpXG4gICAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICAgIG1zZyA9IG1zZy5yZXBsYWNlKC9bXmEtejAtOV0rL2lnLCAnJyk7XG4gICAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnRvSGV4ID0gdG9IZXg7XG5cbmZ1bmN0aW9uIGh0b25sKHcpIHtcbiAgdmFyIHJlcyA9ICh3ID4+PiAyNCkgfFxuICAgICAgICAgICAgKCh3ID4+PiA4KSAmIDB4ZmYwMCkgfFxuICAgICAgICAgICAgKCh3IDw8IDgpICYgMHhmZjAwMDApIHxcbiAgICAgICAgICAgICgodyAmIDB4ZmYpIDw8IDI0KTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn1cbmV4cG9ydHMuaHRvbmwgPSBodG9ubDtcblxuZnVuY3Rpb24gdG9IZXgzMihtc2csIGVuZGlhbikge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHcgPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2xpdHRsZScpXG4gICAgICB3ID0gaHRvbmwodyk7XG4gICAgcmVzICs9IHplcm84KHcudG9TdHJpbmcoMTYpKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleDMyID0gdG9IZXgzMjtcblxuZnVuY3Rpb24gemVybzIod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gemVybzgod29yZCkge1xuICBpZiAod29yZC5sZW5ndGggPT09IDcpXG4gICAgcmV0dXJuICcwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA2KVxuICAgIHJldHVybiAnMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDUpXG4gICAgcmV0dXJuICcwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDQpXG4gICAgcmV0dXJuICcwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAzKVxuICAgIHJldHVybiAnMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDIpXG4gICAgcmV0dXJuICcwMDAwMDAnICsgd29yZDtcbiAgZWxzZSBpZiAod29yZC5sZW5ndGggPT09IDEpXG4gICAgcmV0dXJuICcwMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2VcbiAgICByZXR1cm4gd29yZDtcbn1cbmV4cG9ydHMuemVybzggPSB6ZXJvODtcblxuZnVuY3Rpb24gam9pbjMyKG1zZywgc3RhcnQsIGVuZCwgZW5kaWFuKSB7XG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydDtcbiAgYXNzZXJ0KGxlbiAlIDQgPT09IDApO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGxlbiAvIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IHN0YXJ0OyBpIDwgcmVzLmxlbmd0aDsgaSsrLCBrICs9IDQpIHtcbiAgICB2YXIgdztcbiAgICBpZiAoZW5kaWFuID09PSAnYmlnJylcbiAgICAgIHcgPSAobXNnW2tdIDw8IDI0KSB8IChtc2dbayArIDFdIDw8IDE2KSB8IChtc2dbayArIDJdIDw8IDgpIHwgbXNnW2sgKyAzXTtcbiAgICBlbHNlXG4gICAgICB3ID0gKG1zZ1trICsgM10gPDwgMjQpIHwgKG1zZ1trICsgMl0gPDwgMTYpIHwgKG1zZ1trICsgMV0gPDwgOCkgfCBtc2dba107XG4gICAgcmVzW2ldID0gdyA+Pj4gMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5qb2luMzIgPSBqb2luMzI7XG5cbmZ1bmN0aW9uIHNwbGl0MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShtc2cubGVuZ3RoICogNCk7XG4gIGZvciAodmFyIGkgPSAwLCBrID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIG0gPSBtc2dbaV07XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICAgIHJlc1trXSA9IG0gPj4+IDI0O1xuICAgICAgcmVzW2sgKyAxXSA9IChtID4+PiAxNikgJiAweGZmO1xuICAgICAgcmVzW2sgKyAyXSA9IChtID4+PiA4KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDNdID0gbSAmIDB4ZmY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1trICsgM10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2tdID0gbSAmIDB4ZmY7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5leHBvcnRzLnNwbGl0MzIgPSBzcGxpdDMyO1xuXG5mdW5jdGlvbiByb3RyMzIodywgYikge1xuICByZXR1cm4gKHcgPj4+IGIpIHwgKHcgPDwgKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RyMzIgPSByb3RyMzI7XG5cbmZ1bmN0aW9uIHJvdGwzMih3LCBiKSB7XG4gIHJldHVybiAodyA8PCBiKSB8ICh3ID4+PiAoMzIgLSBiKSk7XG59XG5leHBvcnRzLnJvdGwzMiA9IHJvdGwzMjtcblxuZnVuY3Rpb24gc3VtMzIoYSwgYikge1xuICByZXR1cm4gKGEgKyBiKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzIgPSBzdW0zMjtcblxuZnVuY3Rpb24gc3VtMzJfMyhhLCBiLCBjKSB7XG4gIHJldHVybiAoYSArIGIgKyBjKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfMyA9IHN1bTMyXzM7XG5cbmZ1bmN0aW9uIHN1bTMyXzQoYSwgYiwgYywgZCkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl80ID0gc3VtMzJfNDtcblxuZnVuY3Rpb24gc3VtMzJfNShhLCBiLCBjLCBkLCBlKSB7XG4gIHJldHVybiAoYSArIGIgKyBjICsgZCArIGUpID4+PiAwO1xufVxuZXhwb3J0cy5zdW0zMl81ID0gc3VtMzJfNTtcblxuZnVuY3Rpb24gc3VtNjQoYnVmLCBwb3MsIGFoLCBhbCkge1xuICB2YXIgYmggPSBidWZbcG9zXTtcbiAgdmFyIGJsID0gYnVmW3BvcyArIDFdO1xuXG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICBidWZbcG9zXSA9IGhpID4+PiAwO1xuICBidWZbcG9zICsgMV0gPSBsbztcbn1cbmV4cG9ydHMuc3VtNjQgPSBzdW02NDtcblxuZnVuY3Rpb24gc3VtNjRfaGkoYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gKGFsICsgYmwpID4+PiAwO1xuICB2YXIgaGkgPSAobG8gPCBhbCA/IDEgOiAwKSArIGFoICsgYmg7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfaGkgPSBzdW02NF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfbG8oYWgsIGFsLCBiaCwgYmwpIHtcbiAgdmFyIGxvID0gYWwgKyBibDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF9sbyA9IHN1bTY0X2xvO1xuXG5mdW5jdGlvbiBzdW02NF80X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzRfaGkgPSBzdW02NF80X2hpO1xuXG5mdW5jdGlvbiBzdW02NF80X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCkge1xuICB2YXIgbG8gPSBhbCArIGJsICsgY2wgKyBkbDtcbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2xvID0gc3VtNjRfNF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNV9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwsIGVoLCBlbCkge1xuICB2YXIgY2FycnkgPSAwO1xuICB2YXIgbG8gPSBhbDtcbiAgbG8gPSAobG8gKyBibCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgYWwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBjbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgY2wgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBkbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZGwgPyAxIDogMDtcbiAgbG8gPSAobG8gKyBlbCkgPj4+IDA7XG4gIGNhcnJ5ICs9IGxvIDwgZWwgPyAxIDogMDtcblxuICB2YXIgaGkgPSBhaCArIGJoICsgY2ggKyBkaCArIGVoICsgY2Fycnk7XG4gIHJldHVybiBoaSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNV9oaSA9IHN1bTY0XzVfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0XzVfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGwgKyBlbDtcblxuICByZXR1cm4gbG8gPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfbG8gPSBzdW02NF81X2xvO1xuXG5mdW5jdGlvbiByb3RyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWwgPDwgKDMyIC0gbnVtKSkgfCAoYWggPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfaGkgPSByb3RyNjRfaGk7XG5cbmZ1bmN0aW9uIHJvdHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnJvdHI2NF9sbyA9IHJvdHI2NF9sbztcblxuZnVuY3Rpb24gc2hyNjRfaGkoYWgsIGFsLCBudW0pIHtcbiAgcmV0dXJuIGFoID4+PiBudW07XG59XG5leHBvcnRzLnNocjY0X2hpID0gc2hyNjRfaGk7XG5cbmZ1bmN0aW9uIHNocjY0X2xvKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFoIDw8ICgzMiAtIG51bSkpIHwgKGFsID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMuc2hyNjRfbG8gPSBzaHI2NF9sbztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJykuU3RyaW5nRGVjb2RlclxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBDaXBoZXJCYXNlIChoYXNoTW9kZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuICB0aGlzLmhhc2hNb2RlID0gdHlwZW9mIGhhc2hNb2RlID09PSAnc3RyaW5nJ1xuICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgIHRoaXNbaGFzaE1vZGVdID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9IGVsc2Uge1xuICAgIHRoaXMuZmluYWwgPSB0aGlzLl9maW5hbE9yRGlnZXN0XG4gIH1cbiAgaWYgKHRoaXMuX2ZpbmFsKSB7XG4gICAgdGhpcy5fX2ZpbmFsID0gdGhpcy5fZmluYWxcbiAgICB0aGlzLl9maW5hbCA9IG51bGxcbiAgfVxuICB0aGlzLl9kZWNvZGVyID0gbnVsbFxuICB0aGlzLl9lbmNvZGluZyA9IG51bGxcbn1cbmluaGVyaXRzKENpcGhlckJhc2UsIFRyYW5zZm9ybSlcblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGlucHV0RW5jLCBvdXRwdXRFbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBpbnB1dEVuYylcbiAgfVxuXG4gIHZhciBvdXREYXRhID0gdGhpcy5fdXBkYXRlKGRhdGEpXG4gIGlmICh0aGlzLmhhc2hNb2RlKSByZXR1cm4gdGhpc1xuXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jKVxuICB9XG5cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoKSB7fVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QXV0aFRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3RyeWluZyB0byBzZXQgYWFkIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChkYXRhLCBfLCBuZXh0KSB7XG4gIHZhciBlcnJcbiAgdHJ5IHtcbiAgICBpZiAodGhpcy5oYXNoTW9kZSkge1xuICAgICAgdGhpcy5fdXBkYXRlKGRhdGEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHVzaCh0aGlzLl91cGRhdGUoZGF0YSkpXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9IGZpbmFsbHkge1xuICAgIG5leHQoZXJyKVxuICB9XG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmx1c2ggPSBmdW5jdGlvbiAoZG9uZSkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuX19maW5hbCgpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyID0gZVxuICB9XG5cbiAgZG9uZShlcnIpXG59XG5DaXBoZXJCYXNlLnByb3RvdHlwZS5fZmluYWxPckRpZ2VzdCA9IGZ1bmN0aW9uIChvdXRwdXRFbmMpIHtcbiAgdmFyIG91dERhdGEgPSB0aGlzLl9fZmluYWwoKSB8fCBCdWZmZXIuYWxsb2MoMClcbiAgaWYgKG91dHB1dEVuYykge1xuICAgIG91dERhdGEgPSB0aGlzLl90b1N0cmluZyhvdXREYXRhLCBvdXRwdXRFbmMsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG91dERhdGFcbn1cblxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX3RvU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlLCBlbmMsIGZpbikge1xuICBpZiAoIXRoaXMuX2RlY29kZXIpIHtcbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKVxuICAgIHRoaXMuX2VuY29kaW5nID0gZW5jXG4gIH1cblxuICBpZiAodGhpcy5fZW5jb2RpbmcgIT09IGVuYykgdGhyb3cgbmV3IEVycm9yKCdjYW5cXCd0IHN3aXRjaCBlbmNvZGluZ3MnKVxuXG4gIHZhciBvdXQgPSB0aGlzLl9kZWNvZGVyLndyaXRlKHZhbHVlKVxuICBpZiAoZmluKSB7XG4gICAgb3V0ICs9IHRoaXMuX2RlY29kZXIuZW5kKClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXBoZXJCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTsiLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignU2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3Nlci5cXG5Vc2UgQ2hyb21lLCBGaXJlZm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cblxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXNcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gb2xkQnJvd3NlclxufVxuXG5mdW5jdGlvbiByYW5kb21CeXRlcyAoc2l6ZSwgY2IpIHtcbiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93XG4gIGlmIChzaXplID4gNjU1MzYpIHRocm93IG5ldyBFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpXG4gIC8vIGluIGNhc2UgYnJvd3NlcmlmeSAgaXNuJ3QgdXNpbmcgdGhlIFVpbnQ4QXJyYXkgdmVyc2lvblxuICB2YXIgcmF3Qnl0ZXMgPSBuZXcgZ2xvYmFsLlVpbnQ4QXJyYXkoc2l6ZSlcblxuICAvLyBUaGlzIHdpbGwgbm90IHdvcmsgaW4gb2xkZXIgYnJvd3NlcnMuXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgaWYgKHNpemUgPiAwKSB7ICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFpbHMgb24gSUUgaWYgc2l6ZSA9PSAwXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYXdCeXRlcylcbiAgfVxuXG4gIC8vIFhYWDogcGhhbnRvbWpzIGRvZXNuJ3QgbGlrZSBhIGJ1ZmZlciBiZWluZyBwYXNzZWQgaGVyZVxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuZnJvbShyYXdCeXRlcy5idWZmZXIpXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2ggKGhhc2gpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2ggPSBoYXNoXG59XG5cbmluaGVyaXRzKEhhc2gsIEJhc2UpXG5cbkhhc2gucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IYXNoLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9oYXNoLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSGFzaCAoYWxnKSB7XG4gIGFsZyA9IGFsZy50b0xvd2VyQ2FzZSgpXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbmV3IE1ENSgpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgUklQRU1EMTYwKClcblxuICByZXR1cm4gbmV3IEhhc2goc2hhKGFsZykpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuLy8gcHJvdG90eXBlIGNsYXNzIGZvciBoYXNoIGZ1bmN0aW9uc1xuZnVuY3Rpb24gSGFzaCAoYmxvY2tTaXplLCBmaW5hbFNpemUpIHtcbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2MoYmxvY2tTaXplKVxuICB0aGlzLl9maW5hbFNpemUgPSBmaW5hbFNpemVcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2xlbiA9IDBcbn1cblxuSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmMpXG4gIH1cblxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgYmxvY2tTaXplID0gdGhpcy5fYmxvY2tTaXplXG4gIHZhciBsZW5ndGggPSBkYXRhLmxlbmd0aFxuICB2YXIgYWNjdW0gPSB0aGlzLl9sZW5cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBsZW5ndGg7KSB7XG4gICAgdmFyIGFzc2lnbmVkID0gYWNjdW0gJSBibG9ja1NpemVcbiAgICB2YXIgcmVtYWluZGVyID0gTWF0aC5taW4obGVuZ3RoIC0gb2Zmc2V0LCBibG9ja1NpemUgLSBhc3NpZ25lZClcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtYWluZGVyOyBpKyspIHtcbiAgICAgIGJsb2NrW2Fzc2lnbmVkICsgaV0gPSBkYXRhW29mZnNldCArIGldXG4gICAgfVxuXG4gICAgYWNjdW0gKz0gcmVtYWluZGVyXG4gICAgb2Zmc2V0ICs9IHJlbWFpbmRlclxuXG4gICAgaWYgKChhY2N1bSAlIGJsb2NrU2l6ZSkgPT09IDApIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShibG9jaylcbiAgICB9XG4gIH1cblxuICB0aGlzLl9sZW4gKz0gbGVuZ3RoXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2gucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgdmFyIHJlbSA9IHRoaXMuX2xlbiAlIHRoaXMuX2Jsb2NrU2l6ZVxuXG4gIHRoaXMuX2Jsb2NrW3JlbV0gPSAweDgwXG5cbiAgLy8gemVybyAocmVtICsgMSkgdHJhaWxpbmcgYml0cywgd2hlcmUgKHJlbSArIDEpIGlzIHRoZSBzbWFsbGVzdFxuICAvLyBub24tbmVnYXRpdmUgc29sdXRpb24gdG8gdGhlIGVxdWF0aW9uIChsZW5ndGggKyAxICsgKHJlbSArIDEpKSA9PT0gZmluYWxTaXplIG1vZCBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2suZmlsbCgwLCByZW0gKyAxKVxuXG4gIGlmIChyZW0gPj0gdGhpcy5fZmluYWxTaXplKSB7XG4gICAgdGhpcy5fdXBkYXRlKHRoaXMuX2Jsb2NrKVxuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgfVxuXG4gIHZhciBiaXRzID0gdGhpcy5fbGVuICogOFxuXG4gIC8vIHVpbnQzMlxuICBpZiAoYml0cyA8PSAweGZmZmZmZmZmKSB7XG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShiaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA0KVxuXG4gIC8vIHVpbnQ2NFxuICB9IGVsc2Uge1xuICAgIHZhciBsb3dCaXRzID0gKGJpdHMgJiAweGZmZmZmZmZmKSA+Pj4gMFxuICAgIHZhciBoaWdoQml0cyA9IChiaXRzIC0gbG93Qml0cykgLyAweDEwMDAwMDAwMFxuXG4gICAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJCRShoaWdoQml0cywgdGhpcy5fYmxvY2tTaXplIC0gOClcbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGxvd0JpdHMsIHRoaXMuX2Jsb2NrU2l6ZSAtIDQpXG4gIH1cblxuICB0aGlzLl91cGRhdGUodGhpcy5fYmxvY2spXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaCgpXG5cbiAgcmV0dXJuIGVuYyA/IGhhc2gudG9TdHJpbmcoZW5jKSA6IGhhc2hcbn1cblxuSGFzaC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdXBkYXRlIG11c3QgYmUgaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3MnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geG9yIChhLCBiKSB7XG4gIHZhciBsZW5ndGggPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKGxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnVmZmVyW2ldID0gYVtpXSBeIGJbaV1cbiAgfVxuXG4gIHJldHVybiBidWZmZXJcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iLCJ2YXIgYXNuMSA9IGV4cG9ydHM7XG5cbmFzbjEuYmlnbnVtID0gcmVxdWlyZSgnYm4uanMnKTtcblxuYXNuMS5kZWZpbmUgPSByZXF1aXJlKCcuL2FzbjEvYXBpJykuZGVmaW5lO1xuYXNuMS5iYXNlID0gcmVxdWlyZSgnLi9hc24xL2Jhc2UnKTtcbmFzbjEuY29uc3RhbnRzID0gcmVxdWlyZSgnLi9hc24xL2NvbnN0YW50cycpO1xuYXNuMS5kZWNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9kZWNvZGVycycpO1xuYXNuMS5lbmNvZGVycyA9IHJlcXVpcmUoJy4vYXNuMS9lbmNvZGVycycpO1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8vIGJhc2VkIG9uIHRoZSBhZXMgaW1wbGltZW50YXRpb24gaW4gdHJpcGxlIHNlY1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2tleWJhc2UvdHJpcGxlc2VjXG4vLyB3aGljaCBpcyBpbiB0dXJuIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBjcnlwdG8tanNcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gYXNVSW50MzJBcnJheSAoYnVmKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcblxuICB2YXIgbGVuID0gKGJ1Zi5sZW5ndGggLyA0KSB8IDBcbiAgdmFyIG91dCA9IG5ldyBBcnJheShsZW4pXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dFtpXSA9IGJ1Zi5yZWFkVUludDMyQkUoaSAqIDQpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNjcnViVmVjICh2KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IHYrKykge1xuICAgIHZbaV0gPSAwXG4gIH1cbn1cblxuZnVuY3Rpb24gY3J5cHRCbG9jayAoTSwga2V5U2NoZWR1bGUsIFNVQl9NSVgsIFNCT1gsIG5Sb3VuZHMpIHtcbiAgdmFyIFNVQl9NSVgwID0gU1VCX01JWFswXVxuICB2YXIgU1VCX01JWDEgPSBTVUJfTUlYWzFdXG4gIHZhciBTVUJfTUlYMiA9IFNVQl9NSVhbMl1cbiAgdmFyIFNVQl9NSVgzID0gU1VCX01JWFszXVxuXG4gIHZhciBzMCA9IE1bMF0gXiBrZXlTY2hlZHVsZVswXVxuICB2YXIgczEgPSBNWzFdIF4ga2V5U2NoZWR1bGVbMV1cbiAgdmFyIHMyID0gTVsyXSBeIGtleVNjaGVkdWxlWzJdXG4gIHZhciBzMyA9IE1bM10gXiBrZXlTY2hlZHVsZVszXVxuICB2YXIgdDAsIHQxLCB0MiwgdDNcbiAgdmFyIGtzUm93ID0gNFxuXG4gIGZvciAodmFyIHJvdW5kID0gMTsgcm91bmQgPCBuUm91bmRzOyByb3VuZCsrKSB7XG4gICAgdDAgPSBTVUJfTUlYMFtzMCA+Pj4gMjRdIF4gU1VCX01JWDFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMiA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MzICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQxID0gU1VCX01JWDBbczEgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMiA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MiA9IFNVQl9NSVgwW3MyID4+PiAyNF0gXiBTVUJfTUlYMVsoczMgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDMgPSBTVUJfTUlYMFtzMyA+Pj4gMjRdIF4gU1VCX01JWDFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMSA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MyICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHMwID0gdDBcbiAgICBzMSA9IHQxXG4gICAgczIgPSB0MlxuICAgIHMzID0gdDNcbiAgfVxuXG4gIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDEgPSAoKFNCT1hbczEgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczIgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMyA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczAgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MiA9ICgoU0JPWFtzMiA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMyA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMwID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMSAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDAgPSB0MCA+Pj4gMFxuICB0MSA9IHQxID4+PiAwXG4gIHQyID0gdDIgPj4+IDBcbiAgdDMgPSB0MyA+Pj4gMFxuXG4gIHJldHVybiBbdDAsIHQxLCB0MiwgdDNdXG59XG5cbi8vIEFFUyBjb25zdGFudHNcbnZhciBSQ09OID0gWzB4MDAsIDB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODAsIDB4MWIsIDB4MzZdXG52YXIgRyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENvbXB1dGUgZG91YmxlIHRhYmxlXG4gIHZhciBkID0gbmV3IEFycmF5KDI1NilcbiAgZm9yICh2YXIgaiA9IDA7IGogPCAyNTY7IGorKykge1xuICAgIGlmIChqIDwgMTI4KSB7XG4gICAgICBkW2pdID0gaiA8PCAxXG4gICAgfSBlbHNlIHtcbiAgICAgIGRbal0gPSAoaiA8PCAxKSBeIDB4MTFiXG4gICAgfVxuICB9XG5cbiAgdmFyIFNCT1ggPSBbXVxuICB2YXIgSU5WX1NCT1ggPSBbXVxuICB2YXIgU1VCX01JWCA9IFtbXSwgW10sIFtdLCBbXV1cbiAgdmFyIElOVl9TVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuXG4gIC8vIFdhbGsgR0YoMl44KVxuICB2YXIgeCA9IDBcbiAgdmFyIHhpID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgLy8gQ29tcHV0ZSBzYm94XG4gICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNClcbiAgICBzeCA9IChzeCA+Pj4gOCkgXiAoc3ggJiAweGZmKSBeIDB4NjNcbiAgICBTQk9YW3hdID0gc3hcbiAgICBJTlZfU0JPWFtzeF0gPSB4XG5cbiAgICAvLyBDb21wdXRlIG11bHRpcGxpY2F0aW9uXG4gICAgdmFyIHgyID0gZFt4XVxuICAgIHZhciB4NCA9IGRbeDJdXG4gICAgdmFyIHg4ID0gZFt4NF1cblxuICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcbiAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcbiAgICBTVUJfTUlYWzBdW3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXG4gICAgU1VCX01JWFsxXVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBTVUJfTUlYWzJdW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgU1VCX01JWFszXVt4XSA9IHRcblxuICAgIC8vIENvbXB1dGUgaW52IHN1YiBieXRlcywgaW52IG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHQgPSAoeDggKiAweDEwMTAxMDEpIF4gKHg0ICogMHgxMDAwMSkgXiAoeDIgKiAweDEwMSkgXiAoeCAqIDB4MTAxMDEwMClcbiAgICBJTlZfU1VCX01JWFswXVtzeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBJTlZfU1VCX01JWFsxXVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXG4gICAgSU5WX1NVQl9NSVhbMl1bc3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXG4gICAgSU5WX1NVQl9NSVhbM11bc3hdID0gdFxuXG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIHggPSB4aSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxuICAgICAgeGkgXj0gZFtkW3hpXV1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFNCT1g6IFNCT1gsXG4gICAgSU5WX1NCT1g6IElOVl9TQk9YLFxuICAgIFNVQl9NSVg6IFNVQl9NSVgsXG4gICAgSU5WX1NVQl9NSVg6IElOVl9TVUJfTUlYXG4gIH1cbn0pKClcblxuZnVuY3Rpb24gQUVTIChrZXkpIHtcbiAgdGhpcy5fa2V5ID0gYXNVSW50MzJBcnJheShrZXkpXG4gIHRoaXMuX3Jlc2V0KClcbn1cblxuQUVTLmJsb2NrU2l6ZSA9IDQgKiA0XG5BRVMua2V5U2l6ZSA9IDI1NiAvIDhcbkFFUy5wcm90b3R5cGUuYmxvY2tTaXplID0gQUVTLmJsb2NrU2l6ZVxuQUVTLnByb3RvdHlwZS5rZXlTaXplID0gQUVTLmtleVNpemVcbkFFUy5wcm90b3R5cGUuX3Jlc2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIga2V5V29yZHMgPSB0aGlzLl9rZXlcbiAgdmFyIGtleVNpemUgPSBrZXlXb3Jkcy5sZW5ndGhcbiAgdmFyIG5Sb3VuZHMgPSBrZXlTaXplICsgNlxuICB2YXIga3NSb3dzID0gKG5Sb3VuZHMgKyAxKSAqIDRcblxuICB2YXIga2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBrID0gMDsgayA8IGtleVNpemU7IGsrKykge1xuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5V29yZHNba11cbiAgfVxuXG4gIGZvciAoayA9IGtleVNpemU7IGsgPCBrc1Jvd3M7IGsrKykge1xuICAgIHZhciB0ID0ga2V5U2NoZWR1bGVbayAtIDFdXG5cbiAgICBpZiAoayAlIGtleVNpemUgPT09IDApIHtcbiAgICAgIHQgPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG5cbiAgICAgIHQgXj0gUkNPTlsoayAvIGtleVNpemUpIHwgMF0gPDwgMjRcbiAgICB9IGVsc2UgaWYgKGtleVNpemUgPiA2ICYmIGsgJSBrZXlTaXplID09PSA0KSB7XG4gICAgICB0ID1cbiAgICAgICAgKEcuU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHxcbiAgICAgICAgKEcuU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8XG4gICAgICAgIChHLlNCT1hbdCAmIDB4ZmZdKVxuICAgIH1cblxuICAgIGtleVNjaGVkdWxlW2tdID0ga2V5U2NoZWR1bGVbayAtIGtleVNpemVdIF4gdFxuICB9XG5cbiAgdmFyIGludktleVNjaGVkdWxlID0gW11cbiAgZm9yICh2YXIgaWsgPSAwOyBpayA8IGtzUm93czsgaWsrKykge1xuICAgIHZhciBrc1IgPSBrc1Jvd3MgLSBpa1xuICAgIHZhciB0dCA9IGtleVNjaGVkdWxlW2tzUiAtIChpayAlIDQgPyAwIDogNCldXG5cbiAgICBpZiAoaWsgPCA0IHx8IGtzUiA8PSA0KSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPSB0dFxuICAgIH0gZWxzZSB7XG4gICAgICBpbnZLZXlTY2hlZHVsZVtpa10gPVxuICAgICAgICBHLklOVl9TVUJfTUlYWzBdW0cuU0JPWFt0dCA+Pj4gMjRdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMV1bRy5TQk9YWyh0dCA+Pj4gMTYpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsyXVtHLlNCT1hbKHR0ID4+PiA4KSAmIDB4ZmZdXSBeXG4gICAgICAgIEcuSU5WX1NVQl9NSVhbM11bRy5TQk9YW3R0ICYgMHhmZl1dXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fblJvdW5kcyA9IG5Sb3VuZHNcbiAgdGhpcy5fa2V5U2NoZWR1bGUgPSBrZXlTY2hlZHVsZVxuICB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IGludktleVNjaGVkdWxlXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrUmF3ID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcbiAgcmV0dXJuIGNyeXB0QmxvY2soTSwgdGhpcy5fa2V5U2NoZWR1bGUsIEcuU1VCX01JWCwgRy5TQk9YLCB0aGlzLl9uUm91bmRzKVxufVxuXG5BRVMucHJvdG90eXBlLmVuY3J5cHRCbG9jayA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBvdXQgPSB0aGlzLmVuY3J5cHRCbG9ja1JhdyhNKVxuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0sIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbkFFUy5wcm90b3R5cGUuZGVjcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgTSA9IGFzVUludDMyQXJyYXkoTSlcblxuICAvLyBzd2FwXG4gIHZhciBtMSA9IE1bMV1cbiAgTVsxXSA9IE1bM11cbiAgTVszXSA9IG0xXG5cbiAgdmFyIG91dCA9IGNyeXB0QmxvY2soTSwgdGhpcy5faW52S2V5U2NoZWR1bGUsIEcuSU5WX1NVQl9NSVgsIEcuSU5WX1NCT1gsIHRoaXMuX25Sb3VuZHMpXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5zY3J1YiA9IGZ1bmN0aW9uICgpIHtcbiAgc2NydWJWZWModGhpcy5fa2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2ludktleVNjaGVkdWxlKVxuICBzY3J1YlZlYyh0aGlzLl9rZXkpXG59XG5cbm1vZHVsZS5leHBvcnRzLkFFUyA9IEFFU1xuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxuLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG5mdW5jdGlvbiBFVlBfQnl0ZXNUb0tleSAocGFzc3dvcmQsIHNhbHQsIGtleUJpdHMsIGl2TGVuKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgJ2JpbmFyeScpXG4gIGlmIChzYWx0KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCAnYmluYXJ5JylcbiAgICBpZiAoc2FsdC5sZW5ndGggIT09IDgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzYWx0IHNob3VsZCBiZSBCdWZmZXIgd2l0aCA4IGJ5dGUgbGVuZ3RoJylcbiAgfVxuXG4gIHZhciBrZXlMZW4gPSBrZXlCaXRzIC8gOFxuICB2YXIga2V5ID0gQnVmZmVyLmFsbG9jKGtleUxlbilcbiAgdmFyIGl2ID0gQnVmZmVyLmFsbG9jKGl2TGVuIHx8IDApXG4gIHZhciB0bXAgPSBCdWZmZXIuYWxsb2MoMClcblxuICB3aGlsZSAoa2V5TGVuID4gMCB8fCBpdkxlbiA+IDApIHtcbiAgICB2YXIgaGFzaCA9IG5ldyBNRDUoKVxuICAgIGhhc2gudXBkYXRlKHRtcClcbiAgICBoYXNoLnVwZGF0ZShwYXNzd29yZClcbiAgICBpZiAoc2FsdCkgaGFzaC51cGRhdGUoc2FsdClcbiAgICB0bXAgPSBoYXNoLmRpZ2VzdCgpXG5cbiAgICB2YXIgdXNlZCA9IDBcblxuICAgIGlmIChrZXlMZW4gPiAwKSB7XG4gICAgICB2YXIga2V5U3RhcnQgPSBrZXkubGVuZ3RoIC0ga2V5TGVuXG4gICAgICB1c2VkID0gTWF0aC5taW4oa2V5TGVuLCB0bXAubGVuZ3RoKVxuICAgICAgdG1wLmNvcHkoa2V5LCBrZXlTdGFydCwgMCwgdXNlZClcbiAgICAgIGtleUxlbiAtPSB1c2VkXG4gICAgfVxuXG4gICAgaWYgKHVzZWQgPCB0bXAubGVuZ3RoICYmIGl2TGVuID4gMCkge1xuICAgICAgdmFyIGl2U3RhcnQgPSBpdi5sZW5ndGggLSBpdkxlblxuICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGl2TGVuLCB0bXAubGVuZ3RoIC0gdXNlZClcbiAgICAgIHRtcC5jb3B5KGl2LCBpdlN0YXJ0LCB1c2VkLCB1c2VkICsgbGVuZ3RoKVxuICAgICAgaXZMZW4gLT0gbGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdG1wLmZpbGwoMClcbiAgcmV0dXJuIHsga2V5OiBrZXksIGl2OiBpdiB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVZQX0J5dGVzVG9LZXlcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iLCJ2YXIgYXNuMSA9IHJlcXVpcmUoJy4vYXNuMScpXG52YXIgYWVzaWQgPSByZXF1aXJlKCcuL2Flc2lkLmpzb24nKVxudmFyIGZpeFByb2MgPSByZXF1aXJlKCcuL2ZpeFByb2MnKVxudmFyIGNpcGhlcnMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcycpXG52YXIgY29tcGF0ID0gcmVxdWlyZSgncGJrZGYyJylcbm1vZHVsZS5leHBvcnRzID0gcGFyc2VLZXlzXG5cbmZ1bmN0aW9uIHBhcnNlS2V5cyAoYnVmZmVyKSB7XG4gIHZhciBwYXNzd29yZFxuICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ29iamVjdCcgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWZmZXIpKSB7XG4gICAgcGFzc3dvcmQgPSBidWZmZXIucGFzc3BocmFzZVxuICAgIGJ1ZmZlciA9IGJ1ZmZlci5rZXlcbiAgfVxuICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICBidWZmZXIgPSBuZXcgQnVmZmVyKGJ1ZmZlcilcbiAgfVxuXG4gIHZhciBzdHJpcHBlZCA9IGZpeFByb2MoYnVmZmVyLCBwYXNzd29yZClcblxuICB2YXIgdHlwZSA9IHN0cmlwcGVkLnRhZ1xuICB2YXIgZGF0YSA9IHN0cmlwcGVkLmRhdGFcbiAgdmFyIHN1YnR5cGUsIG5kYXRhXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0NFUlRJRklDQVRFJzpcbiAgICAgIG5kYXRhID0gYXNuMS5jZXJ0aWZpY2F0ZS5kZWNvZGUoZGF0YSwgJ2RlcicpLnRic0NlcnRpZmljYXRlLnN1YmplY3RQdWJsaWNLZXlJbmZvXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFVCTElDIEtFWSc6XG4gICAgICBpZiAoIW5kYXRhKSB7XG4gICAgICAgIG5kYXRhID0gYXNuMS5QdWJsaWNLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUobmRhdGEuc3ViamVjdFB1YmxpY0tleS5kYXRhLCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIG5kYXRhLnN1YmplY3RQcml2YXRlS2V5ID0gbmRhdGEuc3ViamVjdFB1YmxpY0tleVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZWMnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGFcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJzEuMi44NDAuMTAwNDAuNC4xJzpcbiAgICAgICAgICBuZGF0YS5hbGdvcml0aG0ucGFyYW1zLnB1Yl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgICAgIGRhdGE6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnRU5DUllQVEVEIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVuY3J5cHRlZFByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgZGF0YSA9IGRlY3J5cHQoZGF0YSwgcGFzc3dvcmQpXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgY2FzZSAnUFJJVkFURSBLRVknOlxuICAgICAgbmRhdGEgPSBhc24xLlByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgc3VidHlwZSA9IG5kYXRhLmFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpXG4gICAgICBzd2l0Y2ggKHN1YnR5cGUpIHtcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMTM1NDkuMS4xLjEnOlxuICAgICAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0NS4yLjEnOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJ2ZTogbmRhdGEuYWxnb3JpdGhtLmN1cnZlLFxuICAgICAgICAgICAgcHJpdmF0ZUtleTogYXNuMS5FQ1ByaXZhdGVLZXkuZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJykucHJpdmF0ZUtleVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHJpdl9rZXkgPSBhc24xLkRTQXBhcmFtLmRlY29kZShuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgcGFyYW1zOiBuZGF0YS5hbGdvcml0aG0ucGFyYW1zXG4gICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IGlkICcgKyBzdWJ0eXBlKVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSB0eXBlICcgKyB0eXBlKVxuICAgIGNhc2UgJ1JTQSBQVUJMSUMgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnUlNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiBhc24xLlJTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgIGNhc2UgJ0RTQSBQUklWQVRFIEtFWSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnZHNhJyxcbiAgICAgICAgcGFyYW1zOiBhc24xLkRTQVByaXZhdGVLZXkuZGVjb2RlKGRhdGEsICdkZXInKVxuICAgICAgfVxuICAgIGNhc2UgJ0VDIFBSSVZBVEUgS0VZJzpcbiAgICAgIGRhdGEgPSBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJ2ZTogZGF0YS5wYXJhbWV0ZXJzLnZhbHVlLFxuICAgICAgICBwcml2YXRlS2V5OiBkYXRhLnByaXZhdGVLZXlcbiAgICAgIH1cbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gIH1cbn1cbnBhcnNlS2V5cy5zaWduYXR1cmUgPSBhc24xLnNpZ25hdHVyZVxuZnVuY3Rpb24gZGVjcnlwdCAoZGF0YSwgcGFzc3dvcmQpIHtcbiAgdmFyIHNhbHQgPSBkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuc2FsdFxuICB2YXIgaXRlcnMgPSBwYXJzZUludChkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmtkZS5rZGVwYXJhbXMuaXRlcnMudG9TdHJpbmcoKSwgMTApXG4gIHZhciBhbGdvID0gYWVzaWRbZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuYWxnby5qb2luKCcuJyldXG4gIHZhciBpdiA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQuY2lwaGVyLml2XG4gIHZhciBjaXBoZXJUZXh0ID0gZGF0YS5zdWJqZWN0UHJpdmF0ZUtleVxuICB2YXIga2V5bGVuID0gcGFyc2VJbnQoYWxnby5zcGxpdCgnLScpWzFdLCAxMCkgLyA4XG4gIHZhciBrZXkgPSBjb21wYXQucGJrZGYyU3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcnMsIGtleWxlbilcbiAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihhbGdvLCBrZXksIGl2KVxuICB2YXIgb3V0ID0gW11cbiAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgb3V0LnB1c2goY2lwaGVyLmZpbmFsKCkpXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaEJhc2UgPSByZXF1aXJlKCdoYXNoLWJhc2UnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG5mdW5jdGlvbiBNRDUgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG59XG5cbmluaGVyaXRzKE1ENSwgSGFzaEJhc2UpXG5cbk1ENS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIE0gPSBBUlJBWTE2XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgTVtpXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGkgKiA0KVxuXG4gIHZhciBhID0gdGhpcy5fYVxuICB2YXIgYiA9IHRoaXMuX2JcbiAgdmFyIGMgPSB0aGlzLl9jXG4gIHZhciBkID0gdGhpcy5fZFxuXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVswXSwgMHhkNzZhYTQ3OCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzFdLCAweGU4YzdiNzU2LCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzJdLCAweDI0MjA3MGRiLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzNdLCAweGMxYmRjZWVlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzRdLCAweGY1N2MwZmFmLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bNV0sIDB4NDc4N2M2MmEsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTgzMDQ2MTMsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bN10sIDB4ZmQ0Njk1MDEsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bOF0sIDB4Njk4MDk4ZDgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs5XSwgMHg4YjQ0ZjdhZiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZmZjViYjEsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTFdLCAweDg5NWNkN2JlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzEyXSwgMHg2YjkwMTEyMiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzEzXSwgMHhmZDk4NzE5MywgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxNF0sIDB4YTY3OTQzOGUsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTVdLCAweDQ5YjQwODIxLCAyMilcblxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMV0sIDB4ZjYxZTI1NjIsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVs2XSwgMHhjMDQwYjM0MCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzExXSwgMHgyNjVlNWE1MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVswXSwgMHhlOWI2YzdhYSwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs1XSwgMHhkNjJmMTA1ZCwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzEwXSwgMHgwMjQ0MTQ1MywgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzE1XSwgMHhkOGExZTY4MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs0XSwgMHhlN2QzZmJjOCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs5XSwgMHgyMWUxY2RlNiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzE0XSwgMHhjMzM3MDdkNiwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzNdLCAweGY0ZDUwZDg3LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzhdLCAweDQ1NWExNGVkLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzEzXSwgMHhhOWUzZTkwNSwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzJdLCAweGZjZWZhM2Y4LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bN10sIDB4Njc2ZjAyZDksIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMTJdLCAweDhkMmE0YzhhLCAyMClcblxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZmZmYTM5NDIsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs4XSwgMHg4NzcxZjY4MSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxMV0sIDB4NmQ5ZDYxMjIsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTRdLCAweGZkZTUzODBjLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzFdLCAweGE0YmVlYTQ0LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bNF0sIDB4NGJkZWNmYTksIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bN10sIDB4ZjZiYjRiNjAsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTBdLCAweGJlYmZiYzcwLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzEzXSwgMHgyODliN2VjNiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzBdLCAweGVhYTEyN2ZhLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzNdLCAweGQ0ZWYzMDg1LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzZdLCAweDA0ODgxZDA1LCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzldLCAweGQ5ZDRkMDM5LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMTJdLCAweGU2ZGI5OWU1LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzE1XSwgMHgxZmEyN2NmOCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsyXSwgMHhjNGFjNTY2NSwgMjMpXG5cbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzBdLCAweGY0MjkyMjQ0LCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bN10sIDB4NDMyYWZmOTcsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTRdLCAweGFiOTQyM2E3LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzVdLCAweGZjOTNhMDM5LCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzEyXSwgMHg2NTViNTljMywgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzNdLCAweDhmMGNjYzkyLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmVmZjQ3ZCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxXSwgMHg4NTg0NWRkMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs4XSwgMHg2ZmE4N2U0ZiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzE1XSwgMHhmZTJjZTZlMCwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVs2XSwgMHhhMzAxNDMxNCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxM10sIDB4NGUwODExYTEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bNF0sIDB4Zjc1MzdlODIsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxMV0sIDB4YmQzYWYyMzUsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMl0sIDB4MmFkN2QyYmIsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bOV0sIDB4ZWI4NmQzOTEsIDIxKVxuXG4gIHRoaXMuX2EgPSAodGhpcy5fYSArIGEpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2IgKyBiKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9jICsgYykgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZCArIGQpIHwgMFxufVxuXG5NRDUucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNyZWF0ZSBwYWRkaW5nIGFuZCBoYW5kbGUgYmxvY2tzXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MFxuICBpZiAodGhpcy5fYmxvY2tPZmZzZXQgPiA1Nikge1xuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cblxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApXG4gIHRoaXMuX3VwZGF0ZSgpXG5cbiAgLy8gcHJvZHVjZSByZXN1bHRcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9hLCAwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2IsIDQpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYywgOClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9kLCAxMilcbiAgcmV0dXJuIGJ1ZmZlclxufVxuXG5mdW5jdGlvbiByb3RsICh4LCBuKSB7XG4gIHJldHVybiAoeCA8PCBuKSB8ICh4ID4+PiAoMzIgLSBuKSlcbn1cblxuZnVuY3Rpb24gZm5GIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGMpIHwgKCh+YikgJiBkKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkcgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgZCkgfCAoYyAmICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuSCAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoYiBeIGMgXiBkKSArIG0gKyBrKSB8IDAsIHMpICsgYikgfCAwXG59XG5cbmZ1bmN0aW9uIGZuSSAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGMgXiAoYiB8ICh+ZCkpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1ENVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhTdHJlYW0sIEVFKTtcblN0cmVhbS5SZWFkYWJsZSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcycpO1xuU3RyZWFtLldyaXRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJyk7XG5TdHJlYW0uRHVwbGV4ID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL2R1cGxleC5qcycpO1xuU3RyZWFtLlRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnKTtcblN0cmVhbS5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbS9wYXNzdGhyb3VnaC5qcycpO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueFxuU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTtcblxuXG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IGV4cG9ydHM7XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiJ3VzZSBzdHJpY3QnXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaEJhc2UgPSByZXF1aXJlKCdoYXNoLWJhc2UnKVxuXG52YXIgQVJSQVkxNiA9IG5ldyBBcnJheSgxNilcblxudmFyIHpsID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dXG5cbnZhciB6ciA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXVxuXG52YXIgc2wgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dXG5cbnZhciBzciA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl1cblxudmFyIGhsID0gWzB4MDAwMDAwMDAsIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4YTk1M2ZkNGVdXG52YXIgaHIgPSBbMHg1MGEyOGJlNiwgMHg1YzRkZDEyNCwgMHg2ZDcwM2VmMywgMHg3YTZkNzZlOSwgMHgwMDAwMDAwMF1cblxuZnVuY3Rpb24gUklQRU1EMTYwICgpIHtcbiAgSGFzaEJhc2UuY2FsbCh0aGlzLCA2NClcblxuICAvLyBzdGF0ZVxuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxufVxuXG5pbmhlcml0cyhSSVBFTUQxNjAsIEhhc2hCYXNlKVxuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB3b3JkcyA9IEFSUkFZMTZcbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB3b3Jkc1tqXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGogKiA0KVxuXG4gIHZhciBhbCA9IHRoaXMuX2EgfCAwXG4gIHZhciBibCA9IHRoaXMuX2IgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2MgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlbCA9IHRoaXMuX2UgfCAwXG5cbiAgdmFyIGFyID0gdGhpcy5fYSB8IDBcbiAgdmFyIGJyID0gdGhpcy5fYiB8IDBcbiAgdmFyIGNyID0gdGhpcy5fYyB8IDBcbiAgdmFyIGRyID0gdGhpcy5fZCB8IDBcbiAgdmFyIGVyID0gdGhpcy5fZSB8IDBcblxuICAvLyBjb21wdXRhdGlvblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpICs9IDEpIHtcbiAgICB2YXIgdGxcbiAgICB2YXIgdHJcbiAgICBpZiAoaSA8IDE2KSB7XG4gICAgICB0bCA9IGZuMShhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbMF0sIHNsW2ldKVxuICAgICAgdHIgPSBmbjUoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzBdLCBzcltpXSlcbiAgICB9IGVsc2UgaWYgKGkgPCAzMikge1xuICAgICAgdGwgPSBmbjIoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzFdLCBzbFtpXSlcbiAgICAgIHRyID0gZm40KGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBoclsxXSwgc3JbaV0pXG4gICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcbiAgICAgIHRsID0gZm4zKGFsLCBibCwgY2wsIGRsLCBlbCwgd29yZHNbemxbaV1dLCBobFsyXSwgc2xbaV0pXG4gICAgICB0ciA9IGZuMyhhciwgYnIsIGNyLCBkciwgZXIsIHdvcmRzW3pyW2ldXSwgaHJbMl0sIHNyW2ldKVxuICAgIH0gZWxzZSBpZiAoaSA8IDY0KSB7XG4gICAgICB0bCA9IGZuNChhbCwgYmwsIGNsLCBkbCwgZWwsIHdvcmRzW3psW2ldXSwgaGxbM10sIHNsW2ldKVxuICAgICAgdHIgPSBmbjIoYXIsIGJyLCBjciwgZHIsIGVyLCB3b3Jkc1t6cltpXV0sIGhyWzNdLCBzcltpXSlcbiAgICB9IGVsc2UgeyAvLyBpZiAoaTw4MCkge1xuICAgICAgdGwgPSBmbjUoYWwsIGJsLCBjbCwgZGwsIGVsLCB3b3Jkc1t6bFtpXV0sIGhsWzRdLCBzbFtpXSlcbiAgICAgIHRyID0gZm4xKGFyLCBiciwgY3IsIGRyLCBlciwgd29yZHNbenJbaV1dLCBocls0XSwgc3JbaV0pXG4gICAgfVxuXG4gICAgYWwgPSBlbFxuICAgIGVsID0gZGxcbiAgICBkbCA9IHJvdGwoY2wsIDEwKVxuICAgIGNsID0gYmxcbiAgICBibCA9IHRsXG5cbiAgICBhciA9IGVyXG4gICAgZXIgPSBkclxuICAgIGRyID0gcm90bChjciwgMTApXG4gICAgY3IgPSBiclxuICAgIGJyID0gdHJcbiAgfVxuXG4gIC8vIHVwZGF0ZSBzdGF0ZVxuICB2YXIgdCA9ICh0aGlzLl9iICsgY2wgKyBkcikgfCAwXG4gIHRoaXMuX2IgPSAodGhpcy5fYyArIGRsICsgZXIpIHwgMFxuICB0aGlzLl9jID0gKHRoaXMuX2QgKyBlbCArIGFyKSB8IDBcbiAgdGhpcy5fZCA9ICh0aGlzLl9lICsgYWwgKyBicikgfCAwXG4gIHRoaXMuX2UgPSAodGhpcy5fYSArIGJsICsgY3IpIHwgMFxuICB0aGlzLl9hID0gdFxufVxuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNyZWF0ZSBwYWRkaW5nIGFuZCBoYW5kbGUgYmxvY2tzXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MFxuICBpZiAodGhpcy5fYmxvY2tPZmZzZXQgPiA1Nikge1xuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cblxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApXG4gIHRoaXMuX3VwZGF0ZSgpXG5cbiAgLy8gcHJvZHVjZSByZXN1bHRcbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyA/IEJ1ZmZlci5hbGxvYygyMCkgOiBuZXcgQnVmZmVyKDIwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2UsIDE2KVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbjEgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjIgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMyAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgfCAofmMpKSBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm40IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjUgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiAoYyB8ICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUklQRU1EMTYwXG4iLCJ2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU0hBIChhbGdvcml0aG0pIHtcbiAgYWxnb3JpdGhtID0gYWxnb3JpdGhtLnRvTG93ZXJDYXNlKClcblxuICB2YXIgQWxnb3JpdGhtID0gZXhwb3J0c1thbGdvcml0aG1dXG4gIGlmICghQWxnb3JpdGhtKSB0aHJvdyBuZXcgRXJyb3IoYWxnb3JpdGhtICsgJyBpcyBub3Qgc3VwcG9ydGVkICh3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cyknKVxuXG4gIHJldHVybiBuZXcgQWxnb3JpdGhtKClcbn1cblxuZXhwb3J0cy5zaGEgPSByZXF1aXJlKCcuL3NoYScpXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKVxuZXhwb3J0cy5zaGEyMjQgPSByZXF1aXJlKCcuL3NoYTIyNCcpXG5leHBvcnRzLnNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEzODQnKVxuZXhwb3J0cy5zaGE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMudXRpbHMgPSByZXF1aXJlKCcuL2Rlcy91dGlscycpO1xuZXhwb3J0cy5DaXBoZXIgPSByZXF1aXJlKCcuL2Rlcy9jaXBoZXInKTtcbmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7XG5leHBvcnRzLkNCQyA9IHJlcXVpcmUoJy4vZGVzL2NiYycpO1xuZXhwb3J0cy5FREUgPSByZXF1aXJlKCcuL2Rlcy9lZGUnKTtcbiIsInZhciBjaXBoZXJzID0gcmVxdWlyZSgnLi9lbmNyeXB0ZXInKVxudmFyIGRlY2lwaGVycyA9IHJlcXVpcmUoJy4vZGVjcnlwdGVyJylcbnZhciBtb2RlcyA9IHJlcXVpcmUoJy4vbW9kZXMvbGlzdC5qc29uJylcblxuZnVuY3Rpb24gZ2V0Q2lwaGVycyAoKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhtb2Rlcylcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNpcGhlcnMuY3JlYXRlQ2lwaGVyaXZcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBleHBvcnRzLkRlY2lwaGVyID0gZGVjaXBoZXJzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBtb2RlTW9kdWxlcyA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL2N0cicpXG59XG5cbnZhciBtb2RlcyA9IHJlcXVpcmUoJy4vbGlzdC5qc29uJylcblxuZm9yICh2YXIga2V5IGluIG1vZGVzKSB7XG4gIG1vZGVzW2tleV0ubW9kdWxlID0gbW9kZU1vZHVsZXNbbW9kZXNba2V5XS5tb2RlXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGVzXG4iLCJ2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gY3J0O1xuZnVuY3Rpb24gYmxpbmQocHJpdikge1xuICB2YXIgciA9IGdldHIocHJpdik7XG4gIHZhciBibGluZGVyID0gci50b1JlZChibi5tb250KHByaXYubW9kdWx1cykpXG4gIC5yZWRQb3cobmV3IGJuKHByaXYucHVibGljRXhwb25lbnQpKS5mcm9tUmVkKCk7XG4gIHJldHVybiB7XG4gICAgYmxpbmRlcjogYmxpbmRlcixcbiAgICB1bmJsaW5kZXI6ci5pbnZtKHByaXYubW9kdWx1cylcbiAgfTtcbn1cbmZ1bmN0aW9uIGNydChtc2csIHByaXYpIHtcbiAgdmFyIGJsaW5kcyA9IGJsaW5kKHByaXYpO1xuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgdmFyIG1vZCA9IGJuLm1vbnQocHJpdi5tb2R1bHVzKTtcbiAgdmFyIGJsaW5kZWQgPSBuZXcgYm4obXNnKS5tdWwoYmxpbmRzLmJsaW5kZXIpLnVtb2QocHJpdi5tb2R1bHVzKTtcbiAgdmFyIGMxID0gYmxpbmRlZC50b1JlZChibi5tb250KHByaXYucHJpbWUxKSk7XG4gIHZhciBjMiA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMikpO1xuICB2YXIgcWludiA9IHByaXYuY29lZmZpY2llbnQ7XG4gIHZhciBwID0gcHJpdi5wcmltZTE7XG4gIHZhciBxID0gcHJpdi5wcmltZTI7XG4gIHZhciBtMSA9IGMxLnJlZFBvdyhwcml2LmV4cG9uZW50MSk7XG4gIHZhciBtMiA9IGMyLnJlZFBvdyhwcml2LmV4cG9uZW50Mik7XG4gIG0xID0gbTEuZnJvbVJlZCgpO1xuICBtMiA9IG0yLmZyb21SZWQoKTtcbiAgdmFyIGggPSBtMS5pc3ViKG0yKS5pbXVsKHFpbnYpLnVtb2QocCk7XG4gIGguaW11bChxKTtcbiAgbTIuaWFkZChoKTtcbiAgcmV0dXJuIG5ldyBCdWZmZXIobTIuaW11bChibGluZHMudW5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cykudG9BcnJheShmYWxzZSwgbGVuKSk7XG59XG5jcnQuZ2V0ciA9IGdldHI7XG5mdW5jdGlvbiBnZXRyKHByaXYpIHtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB3aGlsZSAoci5jbXAocHJpdi5tb2R1bHVzKSA+PSAgMCB8fCAhci51bW9kKHByaXYucHJpbWUxKSB8fCAhci51bW9kKHByaXYucHJpbWUyKSkge1xuICAgIHIgPSBuZXcgYm4ocmFuZG9tQnl0ZXMobGVuKSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG4iLCJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcblxuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIgKHZhbCwgcHJlZml4KSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHZhbCkgJiYgdHlwZW9mIHZhbCAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHByZWZpeCArICcgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIH1cbn1cblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2NrU2l6ZSlcbiAgdGhpcy5fYmxvY2tTaXplID0gYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB0aGlzLl9sZW5ndGggPSBbMCwgMCwgMCwgMF1cblxuICB0aGlzLl9maW5hbGl6ZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhIYXNoQmFzZSwgVHJhbnNmb3JtKVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnVwZGF0ZShjaHVuaywgZW5jb2RpbmcpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgdGhpcy5wdXNoKHRoaXMuZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICB0aHJvd0lmTm90U3RyaW5nT3JCdWZmZXIoZGF0YSwgJ0RhdGEnKVxuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jb2RpbmcpXG5cbiAgLy8gY29uc3VtZSBkYXRhXG4gIHZhciBibG9jayA9IHRoaXMuX2Jsb2NrXG4gIHZhciBvZmZzZXQgPSAwXG4gIHdoaWxlICh0aGlzLl9ibG9ja09mZnNldCArIGRhdGEubGVuZ3RoIC0gb2Zmc2V0ID49IHRoaXMuX2Jsb2NrU2l6ZSkge1xuICAgIGZvciAodmFyIGkgPSB0aGlzLl9ibG9ja09mZnNldDsgaSA8IHRoaXMuX2Jsb2NrU2l6ZTspIGJsb2NrW2krK10gPSBkYXRhW29mZnNldCsrXVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cbiAgd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoKSBibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IGRhdGFbb2Zmc2V0KytdXG5cbiAgLy8gdXBkYXRlIGxlbmd0aFxuICBmb3IgKHZhciBqID0gMCwgY2FycnkgPSBkYXRhLmxlbmd0aCAqIDg7IGNhcnJ5ID4gMDsgKytqKSB7XG4gICAgdGhpcy5fbGVuZ3RoW2pdICs9IGNhcnJ5XG4gICAgY2FycnkgPSAodGhpcy5fbGVuZ3RoW2pdIC8gMHgwMTAwMDAwMDAwKSB8IDBcbiAgICBpZiAoY2FycnkgPiAwKSB0aGlzLl9sZW5ndGhbal0gLT0gMHgwMTAwMDAwMDAwICogY2FycnlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBpZiAodGhpcy5fZmluYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoJ0RpZ2VzdCBhbHJlYWR5IGNhbGxlZCcpXG4gIHRoaXMuX2ZpbmFsaXplZCA9IHRydWVcblxuICB2YXIgZGlnZXN0ID0gdGhpcy5fZGlnZXN0KClcbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIGRpZ2VzdCA9IGRpZ2VzdC50b1N0cmluZyhlbmNvZGluZylcblxuICAvLyByZXNldCBzdGF0ZVxuICB0aGlzLl9ibG9jay5maWxsKDApXG4gIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7ICsraSkgdGhpcy5fbGVuZ3RoW2ldID0gMFxuXG4gIHJldHVybiBkaWdlc3Rcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX2RpZ2VzdCBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2hCYXNlXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgZGVidWdVdGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0Jyk7XG52YXIgZGVzdHJveUltcGwgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveScpO1xudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbnZhciBrUHJveHlFdmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pO2Vsc2UgaWYgKGlzQXJyYXkoZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkpIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0udW5zaGlmdChmbik7ZWxzZSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbn1cblxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHJlYWRhYmxlSHdtID0gb3B0aW9ucy5yZWFkYWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAocmVhZGFibGVId20gfHwgcmVhZGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSByZWFkYWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXJMaXN0KCk7XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IG51bGw7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihvcHRpb25zLmVuY29kaW5nKTtcbiAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMucHVzaChudWxsKTtcbiAgY2IoZXJyKTtcbn07XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgc2tpcENodW5rQ2hlY2s7XG5cbiAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG4gICAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBlbmNvZGluZywgZmFsc2UsIHNraXBDaHVua0NoZWNrKTtcbn07XG5cbi8vIFVuc2hpZnQgc2hvdWxkICphbHdheXMqIGJlIHNvbWV0aGluZyBkaXJlY3RseSBvdXQgb2YgcmVhZCgpXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgICBpZiAoZXIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGNodW5rKSAhPT0gQnVmZmVyLnByb3RvdHlwZSkge1xuICAgICAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBhZGRUb0Zyb250KSB7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykge1xuICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9IGVsc2Uge1xuICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG5cbiAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKSBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgfVxuICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlcjtcbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8qKlxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTZWN1cmUgSGFzaCBBbGdvcml0aG0sIFNIQS0yNTYsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgMTgwLTJcbiAqIFZlcnNpb24gMi4yLWJldGEgQ29weXJpZ2h0IEFuZ2VsIE1hcmluLCBQYXVsIEpvaG5zdG9uIDIwMDAgLSAyMDA5LlxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICpcbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4QTJGOTgsIDB4NzEzNzQ0OTEsIDB4QjVDMEZCQ0YsIDB4RTlCNURCQTUsXG4gIDB4Mzk1NkMyNUIsIDB4NTlGMTExRjEsIDB4OTIzRjgyQTQsIDB4QUIxQzVFRDUsXG4gIDB4RDgwN0FBOTgsIDB4MTI4MzVCMDEsIDB4MjQzMTg1QkUsIDB4NTUwQzdEQzMsXG4gIDB4NzJCRTVENzQsIDB4ODBERUIxRkUsIDB4OUJEQzA2QTcsIDB4QzE5QkYxNzQsXG4gIDB4RTQ5QjY5QzEsIDB4RUZCRTQ3ODYsIDB4MEZDMTlEQzYsIDB4MjQwQ0ExQ0MsXG4gIDB4MkRFOTJDNkYsIDB4NEE3NDg0QUEsIDB4NUNCMEE5REMsIDB4NzZGOTg4REEsXG4gIDB4OTgzRTUxNTIsIDB4QTgzMUM2NkQsIDB4QjAwMzI3QzgsIDB4QkY1OTdGQzcsXG4gIDB4QzZFMDBCRjMsIDB4RDVBNzkxNDcsIDB4MDZDQTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdCNzBBODUsIDB4MkUxQjIxMzgsIDB4NEQyQzZERkMsIDB4NTMzODBEMTMsXG4gIDB4NjUwQTczNTQsIDB4NzY2QTBBQkIsIDB4ODFDMkM5MkUsIDB4OTI3MjJDODUsXG4gIDB4QTJCRkU4QTEsIDB4QTgxQTY2NEIsIDB4QzI0QjhCNzAsIDB4Qzc2QzUxQTMsXG4gIDB4RDE5MkU4MTksIDB4RDY5OTA2MjQsIDB4RjQwRTM1ODUsIDB4MTA2QUEwNzAsXG4gIDB4MTlBNEMxMTYsIDB4MUUzNzZDMDgsIDB4Mjc0ODc3NEMsIDB4MzRCMEJDQjUsXG4gIDB4MzkxQzBDQjMsIDB4NEVEOEFBNEEsIDB4NUI5Q0NBNEYsIDB4NjgyRTZGRjMsXG4gIDB4NzQ4RjgyRUUsIDB4NzhBNTYzNkYsIDB4ODRDODc4MTQsIDB4OENDNzAyMDgsXG4gIDB4OTBCRUZGRkEsIDB4QTQ1MDZDRUIsIDB4QkVGOUEzRjcsIDB4QzY3MTc4RjJcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTI1NiAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTI1NiwgSGFzaClcblxuU2hhMjU2LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iID0gMHhiYjY3YWU4NVxuICB0aGlzLl9jID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kID0gMHhhNTRmZjUzYVxuICB0aGlzLl9lID0gMHg1MTBlNTI3ZlxuICB0aGlzLl9mID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9nID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oID0gMHg1YmUwY2QxOVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGNoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDIgfCB4IDw8IDMwKSBeICh4ID4+PiAxMyB8IHggPDwgMTkpIF4gKHggPj4+IDIyIHwgeCA8PCAxMClcbn1cblxuZnVuY3Rpb24gc2lnbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNiB8IHggPDwgMjYpIF4gKHggPj4+IDExIHwgeCA8PCAyMSkgXiAoeCA+Pj4gMjUgfCB4IDw8IDcpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMCAoeCkge1xuICByZXR1cm4gKHggPj4+IDcgfCB4IDw8IDI1KSBeICh4ID4+PiAxOCB8IHggPDwgMTQpIF4gKHggPj4+IDMpXG59XG5cbmZ1bmN0aW9uIGdhbW1hMSAoeCkge1xuICByZXR1cm4gKHggPj4+IDE3IHwgeCA8PCAxNSkgXiAoeCA+Pj4gMTkgfCB4IDw8IDEzKSBeICh4ID4+PiAxMClcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG4gIHZhciBmID0gdGhpcy5fZiB8IDBcbiAgdmFyIGcgPSB0aGlzLl9nIHwgMFxuICB2YXIgaCA9IHRoaXMuX2ggfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA2NDsgKytpKSBXW2ldID0gKGdhbW1hMShXW2kgLSAyXSkgKyBXW2kgLSA3XSArIGdhbW1hMChXW2kgLSAxNV0pICsgV1tpIC0gMTZdKSB8IDBcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDY0OyArK2opIHtcbiAgICB2YXIgVDEgPSAoaCArIHNpZ21hMShlKSArIGNoKGUsIGYsIGcpICsgS1tqXSArIFdbal0pIHwgMFxuICAgIHZhciBUMiA9IChzaWdtYTAoYSkgKyBtYWooYSwgYiwgYykpIHwgMFxuXG4gICAgaCA9IGdcbiAgICBnID0gZlxuICAgIGYgPSBlXG4gICAgZSA9IChkICsgVDEpIHwgMFxuICAgIGQgPSBjXG4gICAgYyA9IGJcbiAgICBiID0gYVxuICAgIGEgPSAoVDEgKyBUMikgfCAwXG4gIH1cblxuICB0aGlzLl9hID0gKGEgKyB0aGlzLl9hKSB8IDBcbiAgdGhpcy5fYiA9IChiICsgdGhpcy5fYikgfCAwXG4gIHRoaXMuX2MgPSAoYyArIHRoaXMuX2MpIHwgMFxuICB0aGlzLl9kID0gKGQgKyB0aGlzLl9kKSB8IDBcbiAgdGhpcy5fZSA9IChlICsgdGhpcy5fZSkgfCAwXG4gIHRoaXMuX2YgPSAoZiArIHRoaXMuX2YpIHwgMFxuICB0aGlzLl9nID0gKGcgKyB0aGlzLl9nKSB8IDBcbiAgdGhpcy5faCA9IChoICsgdGhpcy5faCkgfCAwXG59XG5cblNoYTI1Ni5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDMyKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lLCAxNilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZiwgMjApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2csIDI0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9oLCAyOClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTI1NlxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDQyOGEyZjk4LCAweGQ3MjhhZTIyLCAweDcxMzc0NDkxLCAweDIzZWY2NWNkLFxuICAweGI1YzBmYmNmLCAweGVjNGQzYjJmLCAweGU5YjVkYmE1LCAweDgxODlkYmJjLFxuICAweDM5NTZjMjViLCAweGYzNDhiNTM4LCAweDU5ZjExMWYxLCAweGI2MDVkMDE5LFxuICAweDkyM2Y4MmE0LCAweGFmMTk0ZjliLCAweGFiMWM1ZWQ1LCAweGRhNmQ4MTE4LFxuICAweGQ4MDdhYTk4LCAweGEzMDMwMjQyLCAweDEyODM1YjAxLCAweDQ1NzA2ZmJlLFxuICAweDI0MzE4NWJlLCAweDRlZTRiMjhjLCAweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyLFxuICAweDcyYmU1ZDc0LCAweGYyN2I4OTZmLCAweDgwZGViMWZlLCAweDNiMTY5NmIxLFxuICAweDliZGMwNmE3LCAweDI1YzcxMjM1LCAweGMxOWJmMTc0LCAweGNmNjkyNjk0LFxuICAweGU0OWI2OWMxLCAweDllZjE0YWQyLCAweGVmYmU0Nzg2LCAweDM4NGYyNWUzLFxuICAweDBmYzE5ZGM2LCAweDhiOGNkNWI1LCAweDI0MGNhMWNjLCAweDc3YWM5YzY1LFxuICAweDJkZTkyYzZmLCAweDU5MmIwMjc1LCAweDRhNzQ4NGFhLCAweDZlYTZlNDgzLFxuICAweDVjYjBhOWRjLCAweGJkNDFmYmQ0LCAweDc2Zjk4OGRhLCAweDgzMTE1M2I1LFxuICAweDk4M2U1MTUyLCAweGVlNjZkZmFiLCAweGE4MzFjNjZkLCAweDJkYjQzMjEwLFxuICAweGIwMDMyN2M4LCAweDk4ZmIyMTNmLCAweGJmNTk3ZmM3LCAweGJlZWYwZWU0LFxuICAweGM2ZTAwYmYzLCAweDNkYTg4ZmMyLCAweGQ1YTc5MTQ3LCAweDkzMGFhNzI1LFxuICAweDA2Y2E2MzUxLCAweGUwMDM4MjZmLCAweDE0MjkyOTY3LCAweDBhMGU2ZTcwLFxuICAweDI3YjcwYTg1LCAweDQ2ZDIyZmZjLCAweDJlMWIyMTM4LCAweDVjMjZjOTI2LFxuICAweDRkMmM2ZGZjLCAweDVhYzQyYWVkLCAweDUzMzgwZDEzLCAweDlkOTViM2RmLFxuICAweDY1MGE3MzU0LCAweDhiYWY2M2RlLCAweDc2NmEwYWJiLCAweDNjNzdiMmE4LFxuICAweDgxYzJjOTJlLCAweDQ3ZWRhZWU2LCAweDkyNzIyYzg1LCAweDE0ODIzNTNiLFxuICAweGEyYmZlOGExLCAweDRjZjEwMzY0LCAweGE4MWE2NjRiLCAweGJjNDIzMDAxLFxuICAweGMyNGI4YjcwLCAweGQwZjg5NzkxLCAweGM3NmM1MWEzLCAweDA2NTRiZTMwLFxuICAweGQxOTJlODE5LCAweGQ2ZWY1MjE4LCAweGQ2OTkwNjI0LCAweDU1NjVhOTEwLFxuICAweGY0MGUzNTg1LCAweDU3NzEyMDJhLCAweDEwNmFhMDcwLCAweDMyYmJkMWI4LFxuICAweDE5YTRjMTE2LCAweGI4ZDJkMGM4LCAweDFlMzc2YzA4LCAweDUxNDFhYjUzLFxuICAweDI3NDg3NzRjLCAweGRmOGVlYjk5LCAweDM0YjBiY2I1LCAweGUxOWI0OGE4LFxuICAweDM5MWMwY2IzLCAweGM1Yzk1YTYzLCAweDRlZDhhYTRhLCAweGUzNDE4YWNiLFxuICAweDViOWNjYTRmLCAweDc3NjNlMzczLCAweDY4MmU2ZmYzLCAweGQ2YjJiOGEzLFxuICAweDc0OGY4MmVlLCAweDVkZWZiMmZjLCAweDc4YTU2MzZmLCAweDQzMTcyZjYwLFxuICAweDg0Yzg3ODE0LCAweGExZjBhYjcyLCAweDhjYzcwMjA4LCAweDFhNjQzOWVjLFxuICAweDkwYmVmZmZhLCAweDIzNjMxZTI4LCAweGE0NTA2Y2ViLCAweGRlODJiZGU5LFxuICAweGJlZjlhM2Y3LCAweGIyYzY3OTE1LCAweGM2NzE3OGYyLCAweGUzNzI1MzJiLFxuICAweGNhMjczZWNlLCAweGVhMjY2MTljLCAweGQxODZiOGM3LCAweDIxYzBjMjA3LFxuICAweGVhZGE3ZGQ2LCAweGNkZTBlYjFlLCAweGY1N2Q0ZjdmLCAweGVlNmVkMTc4LFxuICAweDA2ZjA2N2FhLCAweDcyMTc2ZmJhLCAweDBhNjM3ZGM1LCAweGEyYzg5OGE2LFxuICAweDExM2Y5ODA0LCAweGJlZjkwZGFlLCAweDFiNzEwYjM1LCAweDEzMWM0NzFiLFxuICAweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0LCAweDMyY2FhYjdiLCAweDQwYzcyNDkzLFxuICAweDNjOWViZTBhLCAweDE1YzliZWJjLCAweDQzMWQ2N2M0LCAweDljMTAwZDRjLFxuICAweDRjYzVkNGJlLCAweGNiM2U0MmI2LCAweDU5N2YyOTljLCAweGZjNjU3ZTJhLFxuICAweDVmY2I2ZmFiLCAweDNhZDZmYWVjLCAweDZjNDQxOThjLCAweDRhNDc1ODE3XG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhNTEyICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTUxMiwgSGFzaClcblxuU2hhNTEyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9haCA9IDB4NmEwOWU2NjdcbiAgdGhpcy5fYmggPSAweGJiNjdhZTg1XG4gIHRoaXMuX2NoID0gMHgzYzZlZjM3MlxuICB0aGlzLl9kaCA9IDB4YTU0ZmY1M2FcbiAgdGhpcy5fZWggPSAweDUxMGU1MjdmXG4gIHRoaXMuX2ZoID0gMHg5YjA1Njg4Y1xuICB0aGlzLl9naCA9IDB4MWY4M2Q5YWJcbiAgdGhpcy5faGggPSAweDViZTBjZDE5XG5cbiAgdGhpcy5fYWwgPSAweGYzYmNjOTA4XG4gIHRoaXMuX2JsID0gMHg4NGNhYTczYlxuICB0aGlzLl9jbCA9IDB4ZmU5NGY4MmJcbiAgdGhpcy5fZGwgPSAweDVmMWQzNmYxXG4gIHRoaXMuX2VsID0gMHhhZGU2ODJkMVxuICB0aGlzLl9mbCA9IDB4MmIzZTZjMWZcbiAgdGhpcy5fZ2wgPSAweGZiNDFiZDZiXG4gIHRoaXMuX2hsID0gMHgxMzdlMjE3OVxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIENoICh4LCB5LCB6KSB7XG4gIHJldHVybiB6IF4gKHggJiAoeSBeIHopKVxufVxuXG5mdW5jdGlvbiBtYWogKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgfCAoeiAmICh4IHwgeSkpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAyOCB8IHhsIDw8IDQpIF4gKHhsID4+PiAyIHwgeCA8PCAzMCkgXiAoeGwgPj4+IDcgfCB4IDw8IDI1KVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTQgfCB4bCA8PCAxOCkgXiAoeCA+Pj4gMTggfCB4bCA8PCAxNCkgXiAoeGwgPj4+IDkgfCB4IDw8IDIzKVxufVxuXG5mdW5jdGlvbiBHYW1tYTAgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMGwgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMSB8IHhsIDw8IDMxKSBeICh4ID4+PiA4IHwgeGwgPDwgMjQpIF4gKHggPj4+IDcgfCB4bCA8PCAyNSlcbn1cblxuZnVuY3Rpb24gR2FtbWExICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNilcbn1cblxuZnVuY3Rpb24gR2FtbWExbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxOSB8IHhsIDw8IDEzKSBeICh4bCA+Pj4gMjkgfCB4IDw8IDMpIF4gKHggPj4+IDYgfCB4bCA8PCAyNilcbn1cblxuZnVuY3Rpb24gZ2V0Q2FycnkgKGEsIGIpIHtcbiAgcmV0dXJuIChhID4+PiAwKSA8IChiID4+PiAwKSA/IDEgOiAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhaCA9IHRoaXMuX2FoIHwgMFxuICB2YXIgYmggPSB0aGlzLl9iaCB8IDBcbiAgdmFyIGNoID0gdGhpcy5fY2ggfCAwXG4gIHZhciBkaCA9IHRoaXMuX2RoIHwgMFxuICB2YXIgZWggPSB0aGlzLl9laCB8IDBcbiAgdmFyIGZoID0gdGhpcy5fZmggfCAwXG4gIHZhciBnaCA9IHRoaXMuX2doIHwgMFxuICB2YXIgaGggPSB0aGlzLl9oaCB8IDBcblxuICB2YXIgYWwgPSB0aGlzLl9hbCB8IDBcbiAgdmFyIGJsID0gdGhpcy5fYmwgfCAwXG4gIHZhciBjbCA9IHRoaXMuX2NsIHwgMFxuICB2YXIgZGwgPSB0aGlzLl9kbCB8IDBcbiAgdmFyIGVsID0gdGhpcy5fZWwgfCAwXG4gIHZhciBmbCA9IHRoaXMuX2ZsIHwgMFxuICB2YXIgZ2wgPSB0aGlzLl9nbCB8IDBcbiAgdmFyIGhsID0gdGhpcy5faGwgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgaSArPSAyKSB7XG4gICAgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gICAgV1tpICsgMV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0ICsgNClcbiAgfVxuICBmb3IgKDsgaSA8IDE2MDsgaSArPSAyKSB7XG4gICAgdmFyIHhoID0gV1tpIC0gMTUgKiAyXVxuICAgIHZhciB4bCA9IFdbaSAtIDE1ICogMiArIDFdXG4gICAgdmFyIGdhbW1hMCA9IEdhbW1hMCh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMGwgPSBHYW1tYTBsKHhsLCB4aClcblxuICAgIHhoID0gV1tpIC0gMiAqIDJdXG4gICAgeGwgPSBXW2kgLSAyICogMiArIDFdXG4gICAgdmFyIGdhbW1hMSA9IEdhbW1hMSh4aCwgeGwpXG4gICAgdmFyIGdhbW1hMWwgPSBHYW1tYTFsKHhsLCB4aClcblxuICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuICAgIHZhciBXaTdoID0gV1tpIC0gNyAqIDJdXG4gICAgdmFyIFdpN2wgPSBXW2kgLSA3ICogMiArIDFdXG5cbiAgICB2YXIgV2kxNmggPSBXW2kgLSAxNiAqIDJdXG4gICAgdmFyIFdpMTZsID0gV1tpIC0gMTYgKiAyICsgMV1cblxuICAgIHZhciBXaWwgPSAoZ2FtbWEwbCArIFdpN2wpIHwgMFxuICAgIHZhciBXaWggPSAoZ2FtbWEwICsgV2k3aCArIGdldENhcnJ5KFdpbCwgZ2FtbWEwbCkpIHwgMFxuICAgIFdpbCA9IChXaWwgKyBnYW1tYTFsKSB8IDBcbiAgICBXaWggPSAoV2loICsgZ2FtbWExICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTFsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIFdpMTZsKSB8IDBcbiAgICBXaWggPSAoV2loICsgV2kxNmggKyBnZXRDYXJyeShXaWwsIFdpMTZsKSkgfCAwXG5cbiAgICBXW2ldID0gV2loXG4gICAgV1tpICsgMV0gPSBXaWxcbiAgfVxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgMTYwOyBqICs9IDIpIHtcbiAgICBXaWggPSBXW2pdXG4gICAgV2lsID0gV1tqICsgMV1cblxuICAgIHZhciBtYWpoID0gbWFqKGFoLCBiaCwgY2gpXG4gICAgdmFyIG1hamwgPSBtYWooYWwsIGJsLCBjbClcblxuICAgIHZhciBzaWdtYTBoID0gc2lnbWEwKGFoLCBhbClcbiAgICB2YXIgc2lnbWEwbCA9IHNpZ21hMChhbCwgYWgpXG4gICAgdmFyIHNpZ21hMWggPSBzaWdtYTEoZWgsIGVsKVxuICAgIHZhciBzaWdtYTFsID0gc2lnbWExKGVsLCBlaClcblxuICAgIC8vIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tqXSArIFdbal1cbiAgICB2YXIgS2loID0gS1tqXVxuICAgIHZhciBLaWwgPSBLW2ogKyAxXVxuXG4gICAgdmFyIGNoaCA9IENoKGVoLCBmaCwgZ2gpXG4gICAgdmFyIGNobCA9IENoKGVsLCBmbCwgZ2wpXG5cbiAgICB2YXIgdDFsID0gKGhsICsgc2lnbWExbCkgfCAwXG4gICAgdmFyIHQxaCA9IChoaCArIHNpZ21hMWggKyBnZXRDYXJyeSh0MWwsIGhsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIGNobCkgfCAwXG4gICAgdDFoID0gKHQxaCArIGNoaCArIGdldENhcnJ5KHQxbCwgY2hsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIEtpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIEtpaCArIGdldENhcnJ5KHQxbCwgS2lsKSkgfCAwXG4gICAgdDFsID0gKHQxbCArIFdpbCkgfCAwXG4gICAgdDFoID0gKHQxaCArIFdpaCArIGdldENhcnJ5KHQxbCwgV2lsKSkgfCAwXG5cbiAgICAvLyB0MiA9IHNpZ21hMCArIG1halxuICAgIHZhciB0MmwgPSAoc2lnbWEwbCArIG1hamwpIHwgMFxuICAgIHZhciB0MmggPSAoc2lnbWEwaCArIG1hamggKyBnZXRDYXJyeSh0MmwsIHNpZ21hMGwpKSB8IDBcblxuICAgIGhoID0gZ2hcbiAgICBobCA9IGdsXG4gICAgZ2ggPSBmaFxuICAgIGdsID0gZmxcbiAgICBmaCA9IGVoXG4gICAgZmwgPSBlbFxuICAgIGVsID0gKGRsICsgdDFsKSB8IDBcbiAgICBlaCA9IChkaCArIHQxaCArIGdldENhcnJ5KGVsLCBkbCkpIHwgMFxuICAgIGRoID0gY2hcbiAgICBkbCA9IGNsXG4gICAgY2ggPSBiaFxuICAgIGNsID0gYmxcbiAgICBiaCA9IGFoXG4gICAgYmwgPSBhbFxuICAgIGFsID0gKHQxbCArIHQybCkgfCAwXG4gICAgYWggPSAodDFoICsgdDJoICsgZ2V0Q2FycnkoYWwsIHQxbCkpIHwgMFxuICB9XG5cbiAgdGhpcy5fYWwgPSAodGhpcy5fYWwgKyBhbCkgfCAwXG4gIHRoaXMuX2JsID0gKHRoaXMuX2JsICsgYmwpIHwgMFxuICB0aGlzLl9jbCA9ICh0aGlzLl9jbCArIGNsKSB8IDBcbiAgdGhpcy5fZGwgPSAodGhpcy5fZGwgKyBkbCkgfCAwXG4gIHRoaXMuX2VsID0gKHRoaXMuX2VsICsgZWwpIHwgMFxuICB0aGlzLl9mbCA9ICh0aGlzLl9mbCArIGZsKSB8IDBcbiAgdGhpcy5fZ2wgPSAodGhpcy5fZ2wgKyBnbCkgfCAwXG4gIHRoaXMuX2hsID0gKHRoaXMuX2hsICsgaGwpIHwgMFxuXG4gIHRoaXMuX2FoID0gKHRoaXMuX2FoICsgYWggKyBnZXRDYXJyeSh0aGlzLl9hbCwgYWwpKSB8IDBcbiAgdGhpcy5fYmggPSAodGhpcy5fYmggKyBiaCArIGdldENhcnJ5KHRoaXMuX2JsLCBibCkpIHwgMFxuICB0aGlzLl9jaCA9ICh0aGlzLl9jaCArIGNoICsgZ2V0Q2FycnkodGhpcy5fY2wsIGNsKSkgfCAwXG4gIHRoaXMuX2RoID0gKHRoaXMuX2RoICsgZGggKyBnZXRDYXJyeSh0aGlzLl9kbCwgZGwpKSB8IDBcbiAgdGhpcy5fZWggPSAodGhpcy5fZWggKyBlaCArIGdldENhcnJ5KHRoaXMuX2VsLCBlbCkpIHwgMFxuICB0aGlzLl9maCA9ICh0aGlzLl9maCArIGZoICsgZ2V0Q2FycnkodGhpcy5fZmwsIGZsKSkgfCAwXG4gIHRoaXMuX2doID0gKHRoaXMuX2doICsgZ2ggKyBnZXRDYXJyeSh0aGlzLl9nbCwgZ2wpKSB8IDBcbiAgdGhpcy5faGggPSAodGhpcy5faGggKyBoaCArIGdldENhcnJ5KHRoaXMuX2hsLCBobCkpIHwgMFxufVxuXG5TaGE1MTIucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg2NClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9naCwgdGhpcy5fZ2wsIDQ4KVxuICB3cml0ZUludDY0QkUodGhpcy5faGgsIHRoaXMuX2hsLCA1NilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTUxMlxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgTGVnYWN5ID0gcmVxdWlyZSgnLi9sZWdhY3knKVxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBtZDUgPSByZXF1aXJlKCdjcmVhdGUtaGFzaC9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG5cbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxuXG5mdW5jdGlvbiBIbWFjIChhbGcsIGtleSkge1xuICBCYXNlLmNhbGwodGhpcywgJ2RpZ2VzdCcpXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgIGtleSA9IEJ1ZmZlci5mcm9tKGtleSlcbiAgfVxuXG4gIHZhciBibG9ja3NpemUgPSAoYWxnID09PSAnc2hhNTEyJyB8fCBhbGcgPT09ICdzaGEzODQnKSA/IDEyOCA6IDY0XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIHZhciBoYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gICAga2V5ID0gaGFzaC51cGRhdGUoa2V5KS5kaWdlc3QoKVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG4gIHRoaXMuX2hhc2ggPSBhbGcgPT09ICdybWQxNjAnID8gbmV3IFJJUEVNRDE2MCgpIDogc2hhKGFsZylcbiAgdGhpcy5faGFzaC51cGRhdGUoaXBhZClcbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHZhciBoYXNoID0gdGhpcy5fYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYSh0aGlzLl9hbGcpXG4gIHJldHVybiBoYXNoLnVwZGF0ZSh0aGlzLl9vcGFkKS51cGRhdGUoaCkuZGlnZXN0KClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVIbWFjIChhbGcsIGtleSkge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAncm1kMTYwJyB8fCBhbGcgPT09ICdyaXBlbWQxNjAnKSB7XG4gICAgcmV0dXJuIG5ldyBIbWFjKCdybWQxNjAnLCBrZXkpXG4gIH1cbiAgaWYgKGFsZyA9PT0gJ21kNScpIHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeShtZDUsIGtleSlcbiAgfVxuICByZXR1cm4gbmV3IEhtYWMoYWxnLCBrZXkpXG59XG4iLCJ2YXIgTUQ1ID0gcmVxdWlyZSgnbWQ1LmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBuZXcgTUQ1KCkudXBkYXRlKGJ1ZmZlcikuZGlnZXN0KClcbn1cbiIsImV4cG9ydHMucGJrZGYyID0gcmVxdWlyZSgnLi9saWIvYXN5bmMnKVxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcmVxdWlyZSgnLi9saWIvc3luYycpXG4iLCJ2YXIgTUFYX0FMTE9DID0gTWF0aC5wb3coMiwgMzApIC0gMSAvLyBkZWZhdWx0IGluIGlvanNcblxuZnVuY3Rpb24gY2hlY2tCdWZmZXIgKGJ1ZiwgbmFtZSkge1xuICBpZiAodHlwZW9mIGJ1ZiAhPT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihuYW1lICsgJyBtdXN0IGJlIGEgYnVmZmVyIG9yIHN0cmluZycpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbikge1xuICBjaGVja0J1ZmZlcihwYXNzd29yZCwgJ1Bhc3N3b3JkJylcbiAgY2hlY2tCdWZmZXIoc2FsdCwgJ1NhbHQnKVxuXG4gIGlmICh0eXBlb2YgaXRlcmF0aW9ucyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJdGVyYXRpb25zIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXRlcmF0aW9ucyA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCYWQgaXRlcmF0aW9ucycpXG4gIH1cblxuICBpZiAodHlwZW9mIGtleWxlbiAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdLZXkgbGVuZ3RoIG5vdCBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoa2V5bGVuIDwgMCB8fCBrZXlsZW4gPiBNQVhfQUxMT0MgfHwga2V5bGVuICE9PSBrZXlsZW4pIHsgLyogZXNsaW50IG5vLXNlbGYtY29tcGFyZTogMCAqL1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBrZXkgbGVuZ3RoJylcbiAgfVxufVxuIiwidmFyIGRlZmF1bHRFbmNvZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZGVmYXVsdEVuY29kaW5nID0gJ3V0Zi04J1xufSBlbHNlIHtcbiAgdmFyIHBWZXJzaW9uTWFqb3IgPSBwYXJzZUludChwcm9jZXNzLnZlcnNpb24uc3BsaXQoJy4nKVswXS5zbGljZSgxKSwgMTApXG5cbiAgZGVmYXVsdEVuY29kaW5nID0gcFZlcnNpb25NYWpvciA+PSA2ID8gJ3V0Zi04JyA6ICdiaW5hcnknXG59XG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRFbmNvZGluZ1xuIiwidmFyIG1kNSA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoL21kNScpXG52YXIgUklQRU1EMTYwID0gcmVxdWlyZSgncmlwZW1kMTYwJylcbnZhciBzaGEgPSByZXF1aXJlKCdzaGEuanMnKVxuXG52YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgc2l6ZXMgPSB7XG4gIG1kNTogMTYsXG4gIHNoYTE6IDIwLFxuICBzaGEyMjQ6IDI4LFxuICBzaGEyNTY6IDMyLFxuICBzaGEzODQ6IDQ4LFxuICBzaGE1MTI6IDY0LFxuICBybWQxNjA6IDIwLFxuICByaXBlbWQxNjA6IDIwXG59XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5LCBzYWx0TGVuKSB7XG4gIHZhciBoYXNoID0gZ2V0RGlnZXN0KGFsZylcbiAgdmFyIGJsb2Nrc2l6ZSA9IChhbGcgPT09ICdzaGE1MTInIHx8IGFsZyA9PT0gJ3NoYTM4NCcpID8gMTI4IDogNjRcblxuICBpZiAoa2V5Lmxlbmd0aCA+IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IGhhc2goa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgdmFyIG9wYWQgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tzaXplICsgc2l6ZXNbYWxnXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHZhciBpcGFkMSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzYWx0TGVuICsgNClcbiAgaXBhZC5jb3B5KGlwYWQxLCAwLCAwLCBibG9ja3NpemUpXG4gIHRoaXMuaXBhZDEgPSBpcGFkMVxuICB0aGlzLmlwYWQyID0gaXBhZFxuICB0aGlzLm9wYWQgPSBvcGFkXG4gIHRoaXMuYWxnID0gYWxnXG4gIHRoaXMuYmxvY2tzaXplID0gYmxvY2tzaXplXG4gIHRoaXMuaGFzaCA9IGhhc2hcbiAgdGhpcy5zaXplID0gc2l6ZXNbYWxnXVxufVxuXG5IbWFjLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoZGF0YSwgaXBhZCkge1xuICBkYXRhLmNvcHkoaXBhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHZhciBoID0gdGhpcy5oYXNoKGlwYWQpXG4gIGguY29weSh0aGlzLm9wYWQsIHRoaXMuYmxvY2tzaXplKVxuICByZXR1cm4gdGhpcy5oYXNoKHRoaXMub3BhZClcbn1cblxuZnVuY3Rpb24gZ2V0RGlnZXN0IChhbGcpIHtcbiAgZnVuY3Rpb24gc2hhRnVuYyAoZGF0YSkge1xuICAgIHJldHVybiBzaGEoYWxnKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuICBmdW5jdGlvbiBybWQxNjBGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKS51cGRhdGUoZGF0YSkuZGlnZXN0KClcbiAgfVxuXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBybWQxNjBGdW5jXG4gIGlmIChhbGcgPT09ICdtZDUnKSByZXR1cm4gbWQ1XG4gIHJldHVybiBzaGFGdW5jXG59XG5cbmZ1bmN0aW9uIHBia2RmMiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KSB7XG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgdmFyIGhtYWMgPSBuZXcgSG1hYyhkaWdlc3QsIHBhc3N3b3JkLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgREsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIGRlc3RQb3MgPSAwXG4gIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XVxuICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGw7IGkrKykge1xuICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgdmFyIFQgPSBobWFjLnJ1bihibG9jazEsIGhtYWMuaXBhZDEpXG4gICAgdmFyIFUgPSBUXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykgVFtrXSBePSBVW2tdXG4gICAgfVxuXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zKVxuICAgIGRlc3RQb3MgKz0gaExlblxuICB9XG5cbiAgcmV0dXJuIERLXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGJrZGYyXG4iLCJ2YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBpbmNyMzIgPSByZXF1aXJlKCcuLi9pbmNyMzInKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9ja1JhdyhzZWxmLl9wcmV2KVxuICBpbmNyMzIoc2VsZi5fcHJldilcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgYmxvY2tTaXplID0gMTZcbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaykge1xuICB2YXIgY2h1bmtOdW0gPSBNYXRoLmNlaWwoY2h1bmsubGVuZ3RoIC8gYmxvY2tTaXplKVxuICB2YXIgc3RhcnQgPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgc2VsZi5fY2FjaGUgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9jYWNoZSxcbiAgICBCdWZmZXIuYWxsb2NVbnNhZmUoY2h1bmtOdW0gKiBibG9ja1NpemUpXG4gIF0pXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmtOdW07IGkrKykge1xuICAgIHZhciBvdXQgPSBnZXRCbG9jayhzZWxmKVxuICAgIHZhciBvZmZzZXQgPSBzdGFydCArIGkgKiBibG9ja1NpemVcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFswXSwgb2Zmc2V0ICsgMClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsxXSwgb2Zmc2V0ICsgNClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFsyXSwgb2Zmc2V0ICsgOClcbiAgICBzZWxmLl9jYWNoZS53cml0ZVVJbnQzMkJFKG91dFszXSwgb2Zmc2V0ICsgMTIpXG4gIH1cbiAgdmFyIHBhZCA9IHNlbGYuX2NhY2hlLnNsaWNlKDAsIGNodW5rLmxlbmd0aClcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShjaHVuay5sZW5ndGgpXG4gIHJldHVybiB4b3IoY2h1bmssIHBhZClcbn1cbiIsImZ1bmN0aW9uIGluY3IzMiAoaXYpIHtcbiAgdmFyIGxlbiA9IGl2Lmxlbmd0aFxuICB2YXIgaXRlbVxuICB3aGlsZSAobGVuLS0pIHtcbiAgICBpdGVtID0gaXYucmVhZFVJbnQ4KGxlbilcbiAgICBpZiAoaXRlbSA9PT0gMjU1KSB7XG4gICAgICBpdi53cml0ZVVJbnQ4KDAsIGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlbSsrXG4gICAgICBpdi53cml0ZVVJbnQ4KGl0ZW0sIGxlbilcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY3IzMlxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBHSEFTSCA9IHJlcXVpcmUoJy4vZ2hhc2gnKVxudmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxudmFyIGluY3IzMiA9IHJlcXVpcmUoJy4vaW5jcjMyJylcblxuZnVuY3Rpb24geG9yVGVzdCAoYSwgYikge1xuICB2YXIgb3V0ID0gMFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSBvdXQrK1xuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBvdXQgKz0gKGFbaV0gXiBiW2ldKVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBjYWxjSXYgKHNlbGYsIGl2LCBjaykge1xuICBpZiAoaXYubGVuZ3RoID09PSAxMikge1xuICAgIHNlbGYuX2ZpbklEID0gQnVmZmVyLmNvbmNhdChbaXYsIEJ1ZmZlci5mcm9tKFswLCAwLCAwLCAxXSldKVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDJdKV0pXG4gIH1cbiAgdmFyIGdoYXNoID0gbmV3IEdIQVNIKGNrKVxuICB2YXIgbGVuID0gaXYubGVuZ3RoXG4gIHZhciB0b1BhZCA9IGxlbiAlIDE2XG4gIGdoYXNoLnVwZGF0ZShpdilcbiAgaWYgKHRvUGFkKSB7XG4gICAgdG9QYWQgPSAxNiAtIHRvUGFkXG4gICAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyh0b1BhZCwgMCkpXG4gIH1cbiAgZ2hhc2gudXBkYXRlKEJ1ZmZlci5hbGxvYyg4LCAwKSlcbiAgdmFyIGl2Qml0cyA9IGxlbiAqIDhcbiAgdmFyIHRhaWwgPSBCdWZmZXIuYWxsb2MoOClcbiAgdGFpbC53cml0ZVVJbnRCRShpdkJpdHMsIDAsIDgpXG4gIGdoYXNoLnVwZGF0ZSh0YWlsKVxuICBzZWxmLl9maW5JRCA9IGdoYXNoLnN0YXRlXG4gIHZhciBvdXQgPSBCdWZmZXIuZnJvbShzZWxmLl9maW5JRClcbiAgaW5jcjMyKG91dClcbiAgcmV0dXJuIG91dFxufVxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdmFyIGggPSBCdWZmZXIuYWxsb2MoNCwgMClcblxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHZhciBjayA9IHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2soaClcbiAgdGhpcy5fZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIGl2ID0gY2FsY0l2KHRoaXMsIGl2LCBjaylcblxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX2FsZW4gPSAwXG4gIHRoaXMuX2xlbiA9IDBcbiAgdGhpcy5fbW9kZSA9IG1vZGVcblxuICB0aGlzLl9hdXRoVGFnID0gbnVsbFxuICB0aGlzLl9jYWxsZWQgPSBmYWxzZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIGlmICghdGhpcy5fY2FsbGVkICYmIHRoaXMuX2FsZW4pIHtcbiAgICB2YXIgcnVtcCA9IDE2IC0gKHRoaXMuX2FsZW4gJSAxNilcbiAgICBpZiAocnVtcCA8IDE2KSB7XG4gICAgICBydW1wID0gQnVmZmVyLmFsbG9jKHJ1bXAsIDApXG4gICAgICB0aGlzLl9naGFzaC51cGRhdGUocnVtcClcbiAgICB9XG4gIH1cblxuICB0aGlzLl9jYWxsZWQgPSB0cnVlXG4gIHZhciBvdXQgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gIGlmICh0aGlzLl9kZWNyeXB0KSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKGNodW5rKVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2doYXNoLnVwZGF0ZShvdXQpXG4gIH1cbiAgdGhpcy5fbGVuICs9IGNodW5rLmxlbmd0aFxuICByZXR1cm4gb3V0XG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCAmJiAhdGhpcy5fYXV0aFRhZykgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzdGF0ZSBvciB1bmFibGUgdG8gYXV0aGVudGljYXRlIGRhdGEnKVxuXG4gIHZhciB0YWcgPSB4b3IodGhpcy5fZ2hhc2guZmluYWwodGhpcy5fYWxlbiAqIDgsIHRoaXMuX2xlbiAqIDgpLCB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHRoaXMuX2ZpbklEKSlcbiAgaWYgKHRoaXMuX2RlY3J5cHQgJiYgeG9yVGVzdCh0YWcsIHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiBnZXRBdXRoVGFnICgpIHtcbiAgaWYgKHRoaXMuX2RlY3J5cHQgfHwgIUJ1ZmZlci5pc0J1ZmZlcih0aGlzLl9hdXRoVGFnKSkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgcmV0dXJuIHRoaXMuX2F1dGhUYWdcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRoVGFnID0gZnVuY3Rpb24gc2V0QXV0aFRhZyAodGFnKSB7XG4gIGlmICghdGhpcy5fZGVjcnlwdCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG5cbiAgdGhpcy5fYXV0aFRhZyA9IHRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uIHNldEFBRCAoYnVmKSB7XG4gIGlmICh0aGlzLl9jYWxsZWQpIHRocm93IG5ldyBFcnJvcignQXR0ZW1wdGluZyB0byBzZXQgQUFEIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9naGFzaC51cGRhdGUoYnVmKVxuICB0aGlzLl9hbGVuICs9IGJ1Zi5sZW5ndGhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW1DaXBoZXJcbiIsInZhciBhZXMgPSByZXF1aXJlKCcuL2FlcycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIFN0cmVhbUNpcGhlciAobW9kZSwga2V5LCBpdiwgZGVjcnlwdCkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdGhpcy5fcHJldiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB0aGlzLl9jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9zZWNDYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB0aGlzLl9kZWNyeXB0ID0gZGVjcnlwdFxuICB0aGlzLl9tb2RlID0gbW9kZVxufVxuXG5pbmhlcml0cyhTdHJlYW1DaXBoZXIsIFRyYW5zZm9ybSlcblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmssIHRoaXMuX2RlY3J5cHQpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaXBoZXIuc2NydWIoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZmluZFByaW1lO1xuZmluZFByaW1lLnNpbXBsZVNpZXZlID0gc2ltcGxlU2lldmU7XG5maW5kUHJpbWUuZmVybWF0VGVzdCA9IGZlcm1hdFRlc3Q7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIFRXRU5UWUZPVVIgPSBuZXcgQk4oMjQpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBPTkUgPSBuZXcgQk4oMSk7XG52YXIgVFdPID0gbmV3IEJOKDIpO1xudmFyIEZJVkUgPSBuZXcgQk4oNSk7XG52YXIgU0lYVEVFTiA9IG5ldyBCTigxNik7XG52YXIgRUlHSFQgPSBuZXcgQk4oOCk7XG52YXIgVEVOID0gbmV3IEJOKDEwKTtcbnZhciBUSFJFRSA9IG5ldyBCTigzKTtcbnZhciBTRVZFTiA9IG5ldyBCTig3KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIEZPVVIgPSBuZXcgQk4oNCk7XG52YXIgVFdFTFZFID0gbmV3IEJOKDEyKTtcbnZhciBwcmltZXMgPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UHJpbWVzKCkge1xuICBpZiAocHJpbWVzICE9PSBudWxsKVxuICAgIHJldHVybiBwcmltZXM7XG5cbiAgdmFyIGxpbWl0ID0gMHgxMDAwMDA7XG4gIHZhciByZXMgPSBbXTtcbiAgcmVzWzBdID0gMjtcbiAgZm9yICh2YXIgaSA9IDEsIGsgPSAzOyBrIDwgbGltaXQ7IGsgKz0gMikge1xuICAgIHZhciBzcXJ0ID0gTWF0aC5jZWlsKE1hdGguc3FydChrKSk7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBpICYmIHJlc1tqXSA8PSBzcXJ0OyBqKyspXG4gICAgICBpZiAoayAlIHJlc1tqXSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAoaSAhPT0gaiAmJiByZXNbal0gPD0gc3FydClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcmVzW2krK10gPSBrO1xuICB9XG4gIHByaW1lcyA9IHJlcztcbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gc2ltcGxlU2lldmUocCkge1xuICB2YXIgcHJpbWVzID0gX2dldFByaW1lcygpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpbWVzLmxlbmd0aDsgaSsrKVxuICAgIGlmIChwLm1vZG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgaWYgKHAuY21wbihwcmltZXNbaV0pID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZmVybWF0VGVzdChwKSB7XG4gIHZhciByZWQgPSBCTi5tb250KHApO1xuICByZXR1cm4gVFdPLnRvUmVkKHJlZCkucmVkUG93KHAuc3VibigxKSkuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmltZShiaXRzLCBnZW4pIHtcbiAgaWYgKGJpdHMgPCAxNikge1xuICAgIC8vIHRoaXMgaXMgd2hhdCBvcGVuc3NsIGRvZXNcbiAgICBpZiAoZ2VuID09PSAyIHx8IGdlbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHg3Yl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IEJOKFsweDhjLCAweDI3XSk7XG4gICAgfVxuICB9XG4gIGdlbiA9IG5ldyBCTihnZW4pO1xuXG4gIHZhciBudW0sIG4yO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbnVtID0gbmV3IEJOKHJhbmRvbUJ5dGVzKE1hdGguY2VpbChiaXRzIC8gOCkpKTtcbiAgICB3aGlsZSAobnVtLmJpdExlbmd0aCgpID4gYml0cykge1xuICAgICAgbnVtLmlzaHJuKDEpO1xuICAgIH1cbiAgICBpZiAobnVtLmlzRXZlbigpKSB7XG4gICAgICBudW0uaWFkZChPTkUpO1xuICAgIH1cbiAgICBpZiAoIW51bS50ZXN0bigxKSkge1xuICAgICAgbnVtLmlhZGQoVFdPKTtcbiAgICB9XG4gICAgaWYgKCFnZW4uY21wKFRXTykpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRXRU5UWUZPVVIpLmNtcChFTEVWRU4pKSB7XG4gICAgICAgIG51bS5pYWRkKEZPVVIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWdlbi5jbXAoRklWRSkpIHtcbiAgICAgIHdoaWxlIChudW0ubW9kKFRFTikuY21wKFRIUkVFKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbjIgPSBudW0uc2hybigxKTtcbiAgICBpZiAoc2ltcGxlU2lldmUobjIpICYmIHNpbXBsZVNpZXZlKG51bSkgJiZcbiAgICAgIGZlcm1hdFRlc3QobjIpICYmIGZlcm1hdFRlc3QobnVtKSAmJlxuICAgICAgbWlsbGVyUmFiaW4udGVzdChuMikgJiYgbWlsbGVyUmFiaW4udGVzdChudW0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgfVxuXG59XG4iLCJ2YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGJyb3JhbmQgPSByZXF1aXJlKCdicm9yYW5kJyk7XG5cbmZ1bmN0aW9uIE1pbGxlclJhYmluKHJhbmQpIHtcbiAgdGhpcy5yYW5kID0gcmFuZCB8fCBuZXcgYnJvcmFuZC5SYW5kKCk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IE1pbGxlclJhYmluO1xuXG5NaWxsZXJSYWJpbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocmFuZCkge1xuICByZXR1cm4gbmV3IE1pbGxlclJhYmluKHJhbmQpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kYmVsb3cgPSBmdW5jdGlvbiBfcmFuZGJlbG93KG4pIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciBtaW5fYnl0ZXMgPSBNYXRoLmNlaWwobGVuIC8gOCk7XG5cbiAgLy8gR2VuZXJhZ2UgcmFuZG9tIGJ5dGVzIHVudGlsIGEgbnVtYmVyIGxlc3MgdGhhbiBuIGlzIGZvdW5kLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCAwLi5uLTEgaGF2ZSBhbiBlcXVhbCBwcm9iYWJpbGl0eSBvZiBiZWluZyBzZWxlY3RlZC5cbiAgZG9cbiAgICB2YXIgYSA9IG5ldyBibih0aGlzLnJhbmQuZ2VuZXJhdGUobWluX2J5dGVzKSk7XG4gIHdoaWxlIChhLmNtcChuKSA+PSAwKTtcblxuICByZXR1cm4gYTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS5fcmFuZHJhbmdlID0gZnVuY3Rpb24gX3JhbmRyYW5nZShzdGFydCwgc3RvcCkge1xuICAvLyBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHN0YXJ0IGFuZCBsZXNzIHRoYW4gc3RvcC5cbiAgdmFyIHNpemUgPSBzdG9wLnN1YihzdGFydCk7XG4gIHJldHVybiBzdGFydC5hZGQodGhpcy5fcmFuZGJlbG93KHNpemUpKTtcbn07XG5cbk1pbGxlclJhYmluLnByb3RvdHlwZS50ZXN0ID0gZnVuY3Rpb24gdGVzdChuLCBrLCBjYikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICB2YXIgcHJpbWUgPSB0cnVlO1xuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuICAgIGlmIChjYilcbiAgICAgIGNiKGEpO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHByaW1lO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLmdldERpdmlzb3IgPSBmdW5jdGlvbiBnZXREaXZpc29yKG4sIGspIHtcbiAgdmFyIGxlbiA9IG4uYml0TGVuZ3RoKCk7XG4gIHZhciByZWQgPSBibi5tb250KG4pO1xuICB2YXIgcm9uZSA9IG5ldyBibigxKS50b1JlZChyZWQpO1xuXG4gIGlmICghaylcbiAgICBrID0gTWF0aC5tYXgoMSwgKGxlbiAvIDQ4KSB8IDApO1xuXG4gIC8vIEZpbmQgZCBhbmQgcywgKG4gLSAxKSA9ICgyIF4gcykgKiBkO1xuICB2YXIgbjEgPSBuLnN1Ym4oMSk7XG4gIGZvciAodmFyIHMgPSAwOyAhbjEudGVzdG4ocyk7IHMrKykge31cbiAgdmFyIGQgPSBuLnNocm4ocyk7XG5cbiAgdmFyIHJuMSA9IG4xLnRvUmVkKHJlZCk7XG5cbiAgZm9yICg7IGsgPiAwOyBrLS0pIHtcbiAgICB2YXIgYSA9IHRoaXMuX3JhbmRyYW5nZShuZXcgYm4oMiksIG4xKTtcblxuICAgIHZhciBnID0gbi5nY2QoYSk7XG4gICAgaWYgKGcuY21wbigxKSAhPT0gMClcbiAgICAgIHJldHVybiBnO1xuXG4gICAgdmFyIHggPSBhLnRvUmVkKHJlZCkucmVkUG93KGQpO1xuICAgIGlmICh4LmNtcChyb25lKSA9PT0gMCB8fCB4LmNtcChybjEpID09PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7IGkrKykge1xuICAgICAgeCA9IHgucmVkU3FyKCk7XG5cbiAgICAgIGlmICh4LmNtcChyb25lKSA9PT0gMClcbiAgICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgICAgaWYgKHguY21wKHJuMSkgPT09IDApXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpID09PSBzKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcbiAgICAgIHJldHVybiB4LmZyb21SZWQoKS5zdWJuKDEpLmdjZChuKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgIT09ICdzdHJpbmcnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgICByZXNbaV0gPSBtc2dbaV0gfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKGVuYyA9PT0gJ2hleCcpIHtcbiAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgIGlmIChtc2cubGVuZ3RoICUgMiAhPT0gMClcbiAgICAgIG1zZyA9ICcwJyArIG1zZztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlcy5wdXNoKHBhcnNlSW50KG1zZ1tpXSArIG1zZ1tpICsgMV0sIDE2KSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICB2YXIgaGkgPSBjID4+IDg7XG4gICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgIGlmIChoaSlcbiAgICAgICAgcmVzLnB1c2goaGksIGxvKTtcbiAgICAgIGVsc2VcbiAgICAgICAgcmVzLnB1c2gobG8pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9BcnJheSA9IHRvQXJyYXk7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG51dGlscy56ZXJvMiA9IHplcm8yO1xuXG5mdW5jdGlvbiB0b0hleChtc2cpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKylcbiAgICByZXMgKz0gemVybzIobXNnW2ldLnRvU3RyaW5nKDE2KSk7XG4gIHJldHVybiByZXM7XG59XG51dGlscy50b0hleCA9IHRvSGV4O1xuXG51dGlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoYXJyLCBlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHRvSGV4KGFycik7XG4gIGVsc2VcbiAgICByZXR1cm4gYXJyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciByb3RyMzIgPSB1dGlscy5yb3RyMzI7XG5cbmZ1bmN0aW9uIGZ0XzEocywgeCwgeSwgeikge1xuICBpZiAocyA9PT0gMClcbiAgICByZXR1cm4gY2gzMih4LCB5LCB6KTtcbiAgaWYgKHMgPT09IDEgfHwgcyA9PT0gMylcbiAgICByZXR1cm4gcDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMilcbiAgICByZXR1cm4gbWFqMzIoeCwgeSwgeik7XG59XG5leHBvcnRzLmZ0XzEgPSBmdF8xO1xuXG5mdW5jdGlvbiBjaDMyKHgsIHksIHopIHtcbiAgcmV0dXJuICh4ICYgeSkgXiAoKH54KSAmIHopO1xufVxuZXhwb3J0cy5jaDMyID0gY2gzMjtcblxuZnVuY3Rpb24gbWFqMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICh4ICYgeikgXiAoeSAmIHopO1xufVxuZXhwb3J0cy5tYWozMiA9IG1hajMyO1xuXG5mdW5jdGlvbiBwMzIoeCwgeSwgeikge1xuICByZXR1cm4geCBeIHkgXiB6O1xufVxuZXhwb3J0cy5wMzIgPSBwMzI7XG5cbmZ1bmN0aW9uIHMwXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgMikgXiByb3RyMzIoeCwgMTMpIF4gcm90cjMyKHgsIDIyKTtcbn1cbmV4cG9ydHMuczBfMjU2ID0gczBfMjU2O1xuXG5mdW5jdGlvbiBzMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDYpIF4gcm90cjMyKHgsIDExKSBeIHJvdHIzMih4LCAyNSk7XG59XG5leHBvcnRzLnMxXzI1NiA9IHMxXzI1NjtcblxuZnVuY3Rpb24gZzBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCA3KSBeIHJvdHIzMih4LCAxOCkgXiAoeCA+Pj4gMyk7XG59XG5leHBvcnRzLmcwXzI1NiA9IGcwXzI1NjtcblxuZnVuY3Rpb24gZzFfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAxNykgXiByb3RyMzIoeCwgMTkpIF4gKHggPj4+IDEwKTtcbn1cbmV4cG9ydHMuZzFfMjU2ID0gZzFfMjU2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBjaDMyID0gc2hhQ29tbW9uLmNoMzI7XG52YXIgbWFqMzIgPSBzaGFDb21tb24ubWFqMzI7XG52YXIgczBfMjU2ID0gc2hhQ29tbW9uLnMwXzI1NjtcbnZhciBzMV8yNTYgPSBzaGFDb21tb24uczFfMjU2O1xudmFyIGcwXzI1NiA9IHNoYUNvbW1vbi5nMF8yNTY7XG52YXIgZzFfMjU2ID0gc2hhQ29tbW9uLmcxXzI1NjtcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGEyNTZfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHg3MTM3NDQ5MSwgMHhiNWMwZmJjZiwgMHhlOWI1ZGJhNSxcbiAgMHgzOTU2YzI1YiwgMHg1OWYxMTFmMSwgMHg5MjNmODJhNCwgMHhhYjFjNWVkNSxcbiAgMHhkODA3YWE5OCwgMHgxMjgzNWIwMSwgMHgyNDMxODViZSwgMHg1NTBjN2RjMyxcbiAgMHg3MmJlNWQ3NCwgMHg4MGRlYjFmZSwgMHg5YmRjMDZhNywgMHhjMTliZjE3NCxcbiAgMHhlNDliNjljMSwgMHhlZmJlNDc4NiwgMHgwZmMxOWRjNiwgMHgyNDBjYTFjYyxcbiAgMHgyZGU5MmM2ZiwgMHg0YTc0ODRhYSwgMHg1Y2IwYTlkYywgMHg3NmY5ODhkYSxcbiAgMHg5ODNlNTE1MiwgMHhhODMxYzY2ZCwgMHhiMDAzMjdjOCwgMHhiZjU5N2ZjNyxcbiAgMHhjNmUwMGJmMywgMHhkNWE3OTE0NywgMHgwNmNhNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN2I3MGE4NSwgMHgyZTFiMjEzOCwgMHg0ZDJjNmRmYywgMHg1MzM4MGQxMyxcbiAgMHg2NTBhNzM1NCwgMHg3NjZhMGFiYiwgMHg4MWMyYzkyZSwgMHg5MjcyMmM4NSxcbiAgMHhhMmJmZThhMSwgMHhhODFhNjY0YiwgMHhjMjRiOGI3MCwgMHhjNzZjNTFhMyxcbiAgMHhkMTkyZTgxOSwgMHhkNjk5MDYyNCwgMHhmNDBlMzU4NSwgMHgxMDZhYTA3MCxcbiAgMHgxOWE0YzExNiwgMHgxZTM3NmMwOCwgMHgyNzQ4Nzc0YywgMHgzNGIwYmNiNSxcbiAgMHgzOTFjMGNiMywgMHg0ZWQ4YWE0YSwgMHg1YjljY2E0ZiwgMHg2ODJlNmZmMyxcbiAgMHg3NDhmODJlZSwgMHg3OGE1NjM2ZiwgMHg4NGM4NzgxNCwgMHg4Y2M3MDIwOCxcbiAgMHg5MGJlZmZmYSwgMHhhNDUwNmNlYiwgMHhiZWY5YTNmNywgMHhjNjcxNzhmMlxuXTtcblxuZnVuY3Rpb24gU0hBMjU2KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMjU2KSlcbiAgICByZXR1cm4gbmV3IFNIQTI1NigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhiYjY3YWU4NSwgMHgzYzZlZjM3MiwgMHhhNTRmZjUzYSxcbiAgICAweDUxMGU1MjdmLCAweDliMDU2ODhjLCAweDFmODNkOWFiLCAweDViZTBjZDE5XG4gIF07XG4gIHRoaXMuayA9IHNoYTI1Nl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoNjQpO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjU2LCBCbG9ja0hhc2gpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyNTY7XG5cblNIQTI1Ni5ibG9ja1NpemUgPSA1MTI7XG5TSEEyNTYub3V0U2l6ZSA9IDI1NjtcblNIQTI1Ni5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyNTYucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTI1Ni5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspXG4gICAgV1tpXSA9IG1zZ1tzdGFydCArIGldO1xuICBmb3IgKDsgaSA8IFcubGVuZ3RoOyBpKyspXG4gICAgV1tpXSA9IHN1bTMyXzQoZzFfMjU2KFdbaSAtIDJdKSwgV1tpIC0gN10sIGcwXzI1NihXW2kgLSAxNV0pLCBXW2kgLSAxNl0pO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcbiAgdmFyIGYgPSB0aGlzLmhbNV07XG4gIHZhciBnID0gdGhpcy5oWzZdO1xuICB2YXIgaCA9IHRoaXMuaFs3XTtcblxuICBhc3NlcnQodGhpcy5rLmxlbmd0aCA9PT0gVy5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBUMSA9IHN1bTMyXzUoaCwgczFfMjU2KGUpLCBjaDMyKGUsIGYsIGcpLCB0aGlzLmtbaV0sIFdbaV0pO1xuICAgIHZhciBUMiA9IHN1bTMyKHMwXzI1NihhKSwgbWFqMzIoYSwgYiwgYykpO1xuICAgIGggPSBnO1xuICAgIGcgPSBmO1xuICAgIGYgPSBlO1xuICAgIGUgPSBzdW0zMihkLCBUMSk7XG4gICAgZCA9IGM7XG4gICAgYyA9IGI7XG4gICAgYiA9IGE7XG4gICAgYSA9IHN1bTMyKFQxLCBUMik7XG4gIH1cblxuICB0aGlzLmhbMF0gPSBzdW0zMih0aGlzLmhbMF0sIGEpO1xuICB0aGlzLmhbMV0gPSBzdW0zMih0aGlzLmhbMV0sIGIpO1xuICB0aGlzLmhbMl0gPSBzdW0zMih0aGlzLmhbMl0sIGMpO1xuICB0aGlzLmhbM10gPSBzdW0zMih0aGlzLmhbM10sIGQpO1xuICB0aGlzLmhbNF0gPSBzdW0zMih0aGlzLmhbNF0sIGUpO1xuICB0aGlzLmhbNV0gPSBzdW0zMih0aGlzLmhbNV0sIGYpO1xuICB0aGlzLmhbNl0gPSBzdW0zMih0aGlzLmhbNl0sIGcpO1xuICB0aGlzLmhbN10gPSBzdW0zMih0aGlzLmhbN10sIGgpO1xufTtcblxuU0hBMjU2LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciByb3RyNjRfaGkgPSB1dGlscy5yb3RyNjRfaGk7XG52YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvO1xudmFyIHNocjY0X2hpID0gdXRpbHMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscy5zaHI2NF9sbztcbnZhciBzdW02NCA9IHV0aWxzLnN1bTY0O1xudmFyIHN1bTY0X2hpID0gdXRpbHMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscy5zdW02NF9sbztcbnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTtcbnZhciBzdW02NF80X2xvID0gdXRpbHMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMuc3VtNjRfNV9oaTtcbnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbztcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGE1MTJfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXTtcblxuZnVuY3Rpb24gU0hBNTEyKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSlcbiAgICByZXR1cm4gbmV3IFNIQTUxMigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCxcbiAgICAweGJiNjdhZTg1LCAweDg0Y2FhNzNiLFxuICAgIDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIsXG4gICAgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSxcbiAgICAweDUxMGU1MjdmLCAweGFkZTY4MmQxLFxuICAgIDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYsXG4gICAgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YixcbiAgICAweDViZTBjZDE5LCAweDEzN2UyMTc5IF07XG4gIHRoaXMuayA9IHNoYTUxMl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoMTYwKTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBNTEyO1xuXG5TSEE1MTIuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMi5vdXRTaXplID0gNTEyO1xuU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTUxMi5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICAvLyAzMiB4IDMyYml0IHdvcmRzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGcxXzUxMl9oaShXW2kgLSA0XSwgV1tpIC0gM10pOyAgLy8gaSAtIDJcbiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTtcbiAgICB2YXIgYzFfaGkgPSBXW2kgLSAxNF07ICAvLyBpIC0gN1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAgLy8gaSAtIDE1XG4gICAgdmFyIGMyX2xvID0gZzBfNTEyX2xvKFdbaSAtIDMwXSwgV1tpIC0gMjldKTtcbiAgICB2YXIgYzNfaGkgPSBXW2kgLSAzMl07ICAvLyBpIC0gMTZcbiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07XG5cbiAgICBXW2ldID0gc3VtNjRfNF9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgfVxufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHRoaXMuX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KTtcblxuICB2YXIgVyA9IHRoaXMuVztcblxuICB2YXIgYWggPSB0aGlzLmhbMF07XG4gIHZhciBhbCA9IHRoaXMuaFsxXTtcbiAgdmFyIGJoID0gdGhpcy5oWzJdO1xuICB2YXIgYmwgPSB0aGlzLmhbM107XG4gIHZhciBjaCA9IHRoaXMuaFs0XTtcbiAgdmFyIGNsID0gdGhpcy5oWzVdO1xuICB2YXIgZGggPSB0aGlzLmhbNl07XG4gIHZhciBkbCA9IHRoaXMuaFs3XTtcbiAgdmFyIGVoID0gdGhpcy5oWzhdO1xuICB2YXIgZWwgPSB0aGlzLmhbOV07XG4gIHZhciBmaCA9IHRoaXMuaFsxMF07XG4gIHZhciBmbCA9IHRoaXMuaFsxMV07XG4gIHZhciBnaCA9IHRoaXMuaFsxMl07XG4gIHZhciBnbCA9IHRoaXMuaFsxM107XG4gIHZhciBoaCA9IHRoaXMuaFsxNF07XG4gIHZhciBobCA9IHRoaXMuaFsxNV07XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gaGg7XG4gICAgdmFyIGMwX2xvID0gaGw7XG4gICAgdmFyIGMxX2hpID0gczFfNTEyX2hpKGVoLCBlbCk7XG4gICAgdmFyIGMxX2xvID0gczFfNTEyX2xvKGVoLCBlbCk7XG4gICAgdmFyIGMyX2hpID0gY2g2NF9oaShlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzJfbG8gPSBjaDY0X2xvKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjM19oaSA9IHRoaXMua1tpXTtcbiAgICB2YXIgYzNfbG8gPSB0aGlzLmtbaSArIDFdO1xuICAgIHZhciBjNF9oaSA9IFdbaV07XG4gICAgdmFyIGM0X2xvID0gV1tpICsgMV07XG5cbiAgICB2YXIgVDFfaGkgPSBzdW02NF81X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcbiAgICB2YXIgVDFfbG8gPSBzdW02NF81X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIGMwX2hpID0gczBfNTEyX2hpKGFoLCBhbCk7XG4gICAgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTtcbiAgICBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIGMxX2xvID0gbWFqNjRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG5cbiAgICB2YXIgVDJfaGkgPSBzdW02NF9oaShjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG4gICAgdmFyIFQyX2xvID0gc3VtNjRfbG8oYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuXG4gICAgaGggPSBnaDtcbiAgICBobCA9IGdsO1xuXG4gICAgZ2ggPSBmaDtcbiAgICBnbCA9IGZsO1xuXG4gICAgZmggPSBlaDtcbiAgICBmbCA9IGVsO1xuXG4gICAgZWggPSBzdW02NF9oaShkaCwgZGwsIFQxX2hpLCBUMV9sbyk7XG4gICAgZWwgPSBzdW02NF9sbyhkbCwgZGwsIFQxX2hpLCBUMV9sbyk7XG5cbiAgICBkaCA9IGNoO1xuICAgIGRsID0gY2w7XG5cbiAgICBjaCA9IGJoO1xuICAgIGNsID0gYmw7XG5cbiAgICBiaCA9IGFoO1xuICAgIGJsID0gYWw7XG5cbiAgICBhaCA9IHN1bTY0X2hpKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgICBhbCA9IHN1bTY0X2xvKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgfVxuXG4gIHN1bTY0KHRoaXMuaCwgMCwgYWgsIGFsKTtcbiAgc3VtNjQodGhpcy5oLCAyLCBiaCwgYmwpO1xuICBzdW02NCh0aGlzLmgsIDQsIGNoLCBjbCk7XG4gIHN1bTY0KHRoaXMuaCwgNiwgZGgsIGRsKTtcbiAgc3VtNjQodGhpcy5oLCA4LCBlaCwgZWwpO1xuICBzdW02NCh0aGlzLmgsIDEwLCBmaCwgZmwpO1xuICBzdW02NCh0aGlzLmgsIDEyLCBnaCwgZ2wpO1xuICBzdW02NCh0aGlzLmgsIDE0LCBoaCwgaGwpO1xufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoKH54aCkgJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gY2g2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKCh+eGwpICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICh4aCAmIHpoKSBeICh5aCAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKHhsICYgemwpIF4gKHlsICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDEpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIERlY29kZXJCdWZmZXIoYmFzZSwgb3B0aW9ucykge1xuICBSZXBvcnRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiYXNlKSkge1xuICAgIHRoaXMuZXJyb3IoJ0lucHV0IG5vdCBCdWZmZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJhc2UgPSBiYXNlO1xuICB0aGlzLm9mZnNldCA9IDA7XG4gIHRoaXMubGVuZ3RoID0gYmFzZS5sZW5ndGg7XG59XG5pbmhlcml0cyhEZWNvZGVyQnVmZmVyLCBSZXBvcnRlcik7XG5leHBvcnRzLkRlY29kZXJCdWZmZXIgPSBEZWNvZGVyQnVmZmVyO1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgcmV0dXJuIHsgb2Zmc2V0OiB0aGlzLm9mZnNldCwgcmVwb3J0ZXI6IFJlcG9ydGVyLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcykgfTtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKHNhdmUpIHtcbiAgLy8gUmV0dXJuIHNraXBwZWQgZGF0YVxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcbiAgcmVzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQ7XG5cbiAgdGhpcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gIHJldHVybiB0aGlzLm9mZnNldCA9PT0gdGhpcy5sZW5ndGg7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgoZmFpbCkge1xuICBpZiAodGhpcy5vZmZzZXQgKyAxIDw9IHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmJhc2UucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KyssIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGJ5dGVzLCBmYWlsKSB7XG4gIGlmICghKHRoaXMub2Zmc2V0ICsgYnl0ZXMgPD0gdGhpcy5sZW5ndGgpKVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xuXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuXG4gIC8vIFNoYXJlIHJlcG9ydGVyIHN0YXRlXG4gIHJlcy5fcmVwb3J0ZXJTdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmVzLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlcztcbiAgdGhpcy5vZmZzZXQgKz0gYnl0ZXM7XG4gIHJldHVybiByZXM7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIHJhdyhzYXZlKSB7XG4gIHJldHVybiB0aGlzLmJhc2Uuc2xpY2Uoc2F2ZSA/IHNhdmUub2Zmc2V0IDogdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gRW5jb2RlckJ1ZmZlcih2YWx1ZSwgcmVwb3J0ZXIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIEVuY29kZXJCdWZmZXIpKVxuICAgICAgICBpdGVtID0gbmV3IEVuY29kZXJCdWZmZXIoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgdGhpcy5sZW5ndGggKz0gaXRlbS5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCEoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAweGZmKSlcbiAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5zdXBwb3J0ZWQgdHlwZTogJyArIHR5cGVvZiB2YWx1ZSk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlckJ1ZmZlciA9IEVuY29kZXJCdWZmZXI7XG5cbkVuY29kZXJCdWZmZXIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKG91dCwgb2Zmc2V0KSB7XG4gIGlmICghb3V0KVxuICAgIG91dCA9IG5ldyBCdWZmZXIodGhpcy5sZW5ndGgpO1xuICBpZiAoIW9mZnNldClcbiAgICBvZmZzZXQgPSAwO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gb3V0O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uam9pbihvdXQsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gaXRlbS5sZW5ndGg7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIG91dFtvZmZzZXRdID0gdGhpcy52YWx1ZTtcbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICBvdXQud3JpdGUodGhpcy52YWx1ZSwgb2Zmc2V0KTtcbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpcy52YWx1ZSkpXG4gICAgICB0aGlzLnZhbHVlLmNvcHkob3V0LCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSB0aGlzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuIiwidmFyIGNvbnN0YW50cyA9IGV4cG9ydHM7XG5cbi8vIEhlbHBlclxuY29uc3RhbnRzLl9yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZShtYXApIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAvLyBDb252ZXJ0IGtleSB0byBpbnRlZ2VyIGlmIGl0IGlzIHN0cmluZ2lmaWVkXG4gICAgaWYgKChrZXkgfCAwKSA9PSBrZXkpXG4gICAgICBrZXkgPSBrZXkgfCAwO1xuXG4gICAgdmFyIHZhbHVlID0gbWFwW2tleV07XG4gICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmNvbnN0YW50cy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFzbjEgPSByZXF1aXJlKCcuLi8uLi9hc24xJyk7XG52YXIgYmFzZSA9IGFzbjEuYmFzZTtcbnZhciBiaWdudW0gPSBhc24xLmJpZ251bTtcblxuLy8gSW1wb3J0IERFUiBjb25zdGFudHNcbnZhciBkZXIgPSBhc24xLmNvbnN0YW50cy5kZXI7XG5cbmZ1bmN0aW9uIERFUkRlY29kZXIoZW50aXR5KSB7XG4gIHRoaXMuZW5jID0gJ2Rlcic7XG4gIHRoaXMubmFtZSA9IGVudGl0eS5uYW1lO1xuICB0aGlzLmVudGl0eSA9IGVudGl0eTtcblxuICAvLyBDb25zdHJ1Y3QgYmFzZSB0cmVlXG4gIHRoaXMudHJlZSA9IG5ldyBERVJOb2RlKCk7XG4gIHRoaXMudHJlZS5faW5pdChlbnRpdHkuYm9keSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBERVJEZWNvZGVyO1xuXG5ERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICBpZiAoIShkYXRhIGluc3RhbmNlb2YgYmFzZS5EZWNvZGVyQnVmZmVyKSlcbiAgICBkYXRhID0gbmV3IGJhc2UuRGVjb2RlckJ1ZmZlcihkYXRhLCBvcHRpb25zKTtcblxuICByZXR1cm4gdGhpcy50cmVlLl9kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG4vLyBUcmVlIG1ldGhvZHNcblxuZnVuY3Rpb24gREVSTm9kZShwYXJlbnQpIHtcbiAgYmFzZS5Ob2RlLmNhbGwodGhpcywgJ2RlcicsIHBhcmVudCk7XG59XG5pbmhlcml0cyhERVJOb2RlLCBiYXNlLk5vZGUpO1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fcGVla1RhZyA9IGZ1bmN0aW9uIHBlZWtUYWcoYnVmZmVyLCB0YWcsIGFueSkge1xuICBpZiAoYnVmZmVyLmlzRW1wdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLCAnRmFpbGVkIHRvIHBlZWsgdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGRlY29kZWRUYWcpKVxuICAgIHJldHVybiBkZWNvZGVkVGFnO1xuXG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcblxuICByZXR1cm4gZGVjb2RlZFRhZy50YWcgPT09IHRhZyB8fCBkZWNvZGVkVGFnLnRhZ1N0ciA9PT0gdGFnIHx8XG4gICAgKGRlY29kZWRUYWcudGFnU3RyICsgJ29mJykgPT09IHRhZyB8fCBhbnk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGFnID0gZnVuY3Rpb24gZGVjb2RlVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgdmFyIGRlY29kZWRUYWcgPSBkZXJEZWNvZGVUYWcoYnVmZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGRlY29kZSB0YWcgb2YgXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVkVGFnLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAnRmFpbGVkIHRvIGdldCBsZW5ndGggb2YgXCInICsgdGFnICsgJ1wiJyk7XG5cbiAgLy8gRmFpbHVyZVxuICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIGlmICghYW55ICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZyAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciAhPT0gdGFnICYmXG4gICAgICBkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicgIT09IHRhZykge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0ZhaWxlZCB0byBtYXRjaCB0YWc6IFwiJyArIHRhZyArICdcIicpO1xuICB9XG5cbiAgaWYgKGRlY29kZWRUYWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEluZGVmaW5pdGUgbGVuZ3RoLi4uIGZpbmQgRU5EIHRhZ1xuICB2YXIgc3RhdGUgPSBidWZmZXIuc2F2ZSgpO1xuICB2YXIgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKFxuICAgICAgYnVmZmVyLFxuICAgICAgJ0ZhaWxlZCB0byBza2lwIGluZGVmaW5pdGUgbGVuZ3RoIGJvZHk6IFwiJyArIHRoaXMudGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG5cbiAgbGVuID0gYnVmZmVyLm9mZnNldCAtIHN0YXRlLm9mZnNldDtcbiAgYnVmZmVyLnJlc3RvcmUoc3RhdGUpO1xuICByZXR1cm4gYnVmZmVyLnNraXAobGVuLCAnRmFpbGVkIHRvIG1hdGNoIGJvZHkgb2Y6IFwiJyArIHRhZyArICdcIicpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBVbnRpbEVuZCA9IGZ1bmN0aW9uIHNraXBVbnRpbEVuZChidWZmZXIsIGZhaWwpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgdGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHRhZykpXG4gICAgICByZXR1cm4gdGFnO1xuICAgIHZhciBsZW4gPSBkZXJEZWNvZGVMZW4oYnVmZmVyLCB0YWcucHJpbWl0aXZlLCBmYWlsKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IobGVuKSlcbiAgICAgIHJldHVybiBsZW47XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0YWcucHJpbWl0aXZlIHx8IGxlbiAhPT0gbnVsbClcbiAgICAgIHJlcyA9IGJ1ZmZlci5za2lwKGxlbilcbiAgICBlbHNlXG4gICAgICByZXMgPSB0aGlzLl9za2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKTtcblxuICAgIC8vIEZhaWx1cmVcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICAgIHJldHVybiByZXM7XG5cbiAgICBpZiAodGFnLnRhZ1N0ciA9PT0gJ2VuZCcpXG4gICAgICBicmVhaztcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUxpc3QgPSBmdW5jdGlvbiBkZWNvZGVMaXN0KGJ1ZmZlciwgdGFnLCBkZWNvZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgcG9zc2libGVFbmQgPSB0aGlzLl9wZWVrVGFnKGJ1ZmZlciwgJ2VuZCcpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihwb3NzaWJsZUVuZCkpXG4gICAgICByZXR1cm4gcG9zc2libGVFbmQ7XG5cbiAgICB2YXIgcmVzID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLCAnZGVyJywgb3B0aW9ucyk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykgJiYgcG9zc2libGVFbmQpXG4gICAgICBicmVhaztcbiAgICByZXN1bHQucHVzaChyZXMpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlU3RyID0gZnVuY3Rpb24gZGVjb2RlU3RyKGJ1ZmZlciwgdGFnKSB7XG4gIGlmICh0YWcgPT09ICdiaXRzdHInKSB7XG4gICAgdmFyIHVudXNlZCA9IGJ1ZmZlci5yZWFkVUludDgoKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IodW51c2VkKSlcbiAgICAgIHJldHVybiB1bnVzZWQ7XG4gICAgcmV0dXJuIHsgdW51c2VkOiB1bnVzZWQsIGRhdGE6IGJ1ZmZlci5yYXcoKSB9O1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICAgIGlmIChyYXcubGVuZ3RoICUgMiA9PT0gMSlcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiBibXBzdHIgbGVuZ3RoIG1pc21hdGNoJyk7XG5cbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXcubGVuZ3RoIC8gMjsgaSsrKSB7XG4gICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShyYXcucmVhZFVJbnQxNkJFKGkgKiAyKSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIHZhciBudW1zdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc051bXN0cihudW1zdHIpKSB7XG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdudW1zdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29jdHN0cicpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdwcmludHN0cicpIHtcbiAgICB2YXIgcHJpbnRzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoJ2FzY2lpJyk7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHByaW50c3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAncHJpbnRzdHIgdW5zdXBwb3J0ZWQgY2hhcmFjdGVycycpO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbnRzdHI7XG4gIH0gZWxzZSBpZiAoL3N0ciQvLnRlc3QodGFnKSkge1xuICAgIHJldHVybiBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogJyArIHRhZyArICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZU9iamlkID0gZnVuY3Rpb24gZGVjb2RlT2JqaWQoYnVmZmVyLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICB2YXIgaWRlbnQgPSAwO1xuICB3aGlsZSAoIWJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICB2YXIgc3ViaWRlbnQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWRlbnQgPDw9IDc7XG4gICAgaWRlbnQgfD0gc3ViaWRlbnQgJiAweDdmO1xuICAgIGlmICgoc3ViaWRlbnQgJiAweDgwKSA9PT0gMCkge1xuICAgICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG4gICAgICBpZGVudCA9IDA7XG4gICAgfVxuICB9XG4gIGlmIChzdWJpZGVudCAmIDB4ODApXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudCk7XG5cbiAgdmFyIGZpcnN0ID0gKGlkZW50aWZpZXJzWzBdIC8gNDApIHwgMDtcbiAgdmFyIHNlY29uZCA9IGlkZW50aWZpZXJzWzBdICUgNDA7XG5cbiAgaWYgKHJlbGF0aXZlKVxuICAgIHJlc3VsdCA9IGlkZW50aWZpZXJzO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gW2ZpcnN0LCBzZWNvbmRdLmNvbmNhdChpZGVudGlmaWVycy5zbGljZSgxKSk7XG5cbiAgaWYgKHZhbHVlcykge1xuICAgIHZhciB0bXAgPSB2YWx1ZXNbcmVzdWx0LmpvaW4oJyAnKV07XG4gICAgaWYgKHRtcCA9PT0gdW5kZWZpbmVkKVxuICAgICAgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcuJyldO1xuICAgIGlmICh0bXAgIT09IHVuZGVmaW5lZClcbiAgICAgIHJlc3VsdCA9IHRtcDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlVGltZSA9IGZ1bmN0aW9uIGRlY29kZVRpbWUoYnVmZmVyLCB0YWcpIHtcbiAgdmFyIHN0ciA9IGJ1ZmZlci5yYXcoKS50b1N0cmluZygpO1xuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCA0KSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg2LCA4KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIHZhciBzZWMgPSBzdHIuc2xpY2UoMTIsIDE0KSB8IDA7XG4gIH0gZWxzZSBpZiAodGFnID09PSAndXRjdGltZScpIHtcbiAgICB2YXIgeWVhciA9IHN0ci5zbGljZSgwLCAyKSB8IDA7XG4gICAgdmFyIG1vbiA9IHN0ci5zbGljZSgyLCA0KSB8IDA7XG4gICAgdmFyIGRheSA9IHN0ci5zbGljZSg0LCA2KSB8IDA7XG4gICAgdmFyIGhvdXIgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBtaW4gPSBzdHIuc2xpY2UoOCwgMTApIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEwLCAxMikgfCAwO1xuICAgIGlmICh5ZWFyIDwgNzApXG4gICAgICB5ZWFyID0gMjAwMCArIHllYXI7XG4gICAgZWxzZVxuICAgICAgeWVhciA9IDE5MDAgKyB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiBEYXRlLlVUQyh5ZWFyLCBtb24gLSAxLCBkYXksIGhvdXIsIG1pbiwgc2VjLCAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVOdWxsID0gZnVuY3Rpb24gZGVjb2RlTnVsbChidWZmZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlQm9vbCA9IGZ1bmN0aW9uIGRlY29kZUJvb2woYnVmZmVyKSB7XG4gIHZhciByZXMgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihyZXMpKVxuICAgIHJldHVybiByZXM7XG4gIGVsc2VcbiAgICByZXR1cm4gcmVzICE9PSAwO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUludCA9IGZ1bmN0aW9uIGRlY29kZUludChidWZmZXIsIHZhbHVlcykge1xuICAvLyBCaWdpbnQsIHJldHVybiBhcyBpdCBpcyAoYXNzdW1lIGJpZyBlbmRpYW4pXG4gIHZhciByYXcgPSBidWZmZXIucmF3KCk7XG4gIHZhciByZXMgPSBuZXcgYmlnbnVtKHJhdyk7XG5cbiAgaWYgKHZhbHVlcylcbiAgICByZXMgPSB2YWx1ZXNbcmVzLnRvU3RyaW5nKDEwKV0gfHwgcmVzO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXREZWNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGRlckRlY29kZVRhZyhidWYsIGZhaWwpIHtcbiAgdmFyIHRhZyA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcih0YWcpKVxuICAgIHJldHVybiB0YWc7XG5cbiAgdmFyIGNscyA9IGRlci50YWdDbGFzc1t0YWcgPj4gNl07XG4gIHZhciBwcmltaXRpdmUgPSAodGFnICYgMHgyMCkgPT09IDA7XG5cbiAgLy8gTXVsdGktb2N0ZXQgdGFnIC0gbG9hZFxuICBpZiAoKHRhZyAmIDB4MWYpID09PSAweDFmKSB7XG4gICAgdmFyIG9jdCA9IHRhZztcbiAgICB0YWcgPSAwO1xuICAgIHdoaWxlICgob2N0ICYgMHg4MCkgPT09IDB4ODApIHtcbiAgICAgIG9jdCA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gICAgICBpZiAoYnVmLmlzRXJyb3Iob2N0KSlcbiAgICAgICAgcmV0dXJuIG9jdDtcblxuICAgICAgdGFnIDw8PSA3O1xuICAgICAgdGFnIHw9IG9jdCAmIDB4N2Y7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRhZyAmPSAweDFmO1xuICB9XG4gIHZhciB0YWdTdHIgPSBkZXIudGFnW3RhZ107XG5cbiAgcmV0dXJuIHtcbiAgICBjbHM6IGNscyxcbiAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICB0YWc6IHRhZyxcbiAgICB0YWdTdHI6IHRhZ1N0clxuICB9O1xufVxuXG5mdW5jdGlvbiBkZXJEZWNvZGVMZW4oYnVmLCBwcmltaXRpdmUsIGZhaWwpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5yZWFkVUludDgoZmFpbCk7XG4gIGlmIChidWYuaXNFcnJvcihsZW4pKVxuICAgIHJldHVybiBsZW47XG5cbiAgLy8gSW5kZWZpbml0ZSBmb3JtXG4gIGlmICghcHJpbWl0aXZlICYmIGxlbiA9PT0gMHg4MClcbiAgICByZXR1cm4gbnVsbDtcblxuICAvLyBEZWZpbml0ZSBmb3JtXG4gIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAvLyBTaG9ydCBmb3JtXG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIC8vIExvbmcgZm9ybVxuICB2YXIgbnVtID0gbGVuICYgMHg3ZjtcbiAgaWYgKG51bSA+IDQpXG4gICAgcmV0dXJuIGJ1Zi5lcnJvcignbGVuZ3RoIG9jdGVjdCBpcyB0b28gbG9uZycpO1xuXG4gIGxlbiA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICBsZW4gPDw9IDg7XG4gICAgdmFyIGogPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgIGlmIChidWYuaXNFcnJvcihqKSlcbiAgICAgIHJldHVybiBqO1xuICAgIGxlbiB8PSBqO1xuICB9XG5cbiAgcmV0dXJuIGxlbjtcbn1cbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgYXNuMSA9IHJlcXVpcmUoJy4uLy4uL2FzbjEnKTtcbnZhciBiYXNlID0gYXNuMS5iYXNlO1xuXG4vLyBJbXBvcnQgREVSIGNvbnN0YW50c1xudmFyIGRlciA9IGFzbjEuY29uc3RhbnRzLmRlcjtcblxuZnVuY3Rpb24gREVSRW5jb2RlcihlbnRpdHkpIHtcbiAgdGhpcy5lbmMgPSAnZGVyJztcbiAgdGhpcy5uYW1lID0gZW50aXR5Lm5hbWU7XG4gIHRoaXMuZW50aXR5ID0gZW50aXR5O1xuXG4gIC8vIENvbnN0cnVjdCBiYXNlIHRyZWVcbiAgdGhpcy50cmVlID0gbmV3IERFUk5vZGUoKTtcbiAgdGhpcy50cmVlLl9pbml0KGVudGl0eS5ib2R5KTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERFUkVuY29kZXI7XG5cbkRFUkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy50cmVlLl9lbmNvZGUoZGF0YSwgcmVwb3J0ZXIpLmpvaW4oKTtcbn07XG5cbi8vIFRyZWUgbWV0aG9kc1xuXG5mdW5jdGlvbiBERVJOb2RlKHBhcmVudCkge1xuICBiYXNlLk5vZGUuY2FsbCh0aGlzLCAnZGVyJywgcGFyZW50KTtcbn1cbmluaGVyaXRzKERFUk5vZGUsIGJhc2UuTm9kZSk7XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVDb21wb3NpdGUgPSBmdW5jdGlvbiBlbmNvZGVDb21wb3NpdGUodGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCkge1xuICB2YXIgZW5jb2RlZFRhZyA9IGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCB0aGlzLnJlcG9ydGVyKTtcblxuICAvLyBTaG9ydCBmb3JtXG4gIGlmIChjb250ZW50Lmxlbmd0aCA8IDB4ODApIHtcbiAgICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigyKTtcbiAgICBoZWFkZXJbMF0gPSBlbmNvZGVkVGFnO1xuICAgIGhlYWRlclsxXSA9IGNvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xuICB9XG5cbiAgLy8gTG9uZyBmb3JtXG4gIC8vIENvdW50IG9jdGV0cyByZXF1aXJlZCB0byBzdG9yZSBsZW5ndGhcbiAgdmFyIGxlbk9jdGV0cyA9IDE7XG4gIGZvciAodmFyIGkgPSBjb250ZW50Lmxlbmd0aDsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBsZW5PY3RldHMrKztcblxuICB2YXIgaGVhZGVyID0gbmV3IEJ1ZmZlcigxICsgMSArIGxlbk9jdGV0cyk7XG4gIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gIGhlYWRlclsxXSA9IDB4ODAgfCBsZW5PY3RldHM7XG5cbiAgZm9yICh2YXIgaSA9IDEgKyBsZW5PY3RldHMsIGogPSBjb250ZW50Lmxlbmd0aDsgaiA+IDA7IGktLSwgaiA+Pj0gOClcbiAgICBoZWFkZXJbaV0gPSBqICYgMHhmZjtcblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIGhlYWRlciwgY29udGVudCBdKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVTdHIgPSBmdW5jdGlvbiBlbmNvZGVTdHIoc3RyLCB0YWcpIHtcbiAgaWYgKHRhZyA9PT0gJ2JpdHN0cicpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbIHN0ci51bnVzZWQgfCAwLCBzdHIuZGF0YSBdKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoc3RyLmxlbmd0aCAqIDIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBidWYud3JpdGVVSW50MTZCRShzdHIuY2hhckNvZGVBdChpKSwgaSAqIDIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihidWYpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICBpZiAoIXRoaXMuX2lzTnVtc3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogbnVtc3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgZGlnaXRzIGFuZCBzcGFjZScpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3ByaW50c3RyJykge1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihzdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6IHByaW50c3RyIHN1cHBvcnRzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29ubHkgbGF0aW4gdXBwZXIgYW5kIGxvd2VyIGNhc2UgbGV0dGVycywgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGlnaXRzLCBzcGFjZSwgYXBvc3Ryb3BoZSwgbGVmdCBhbmQgcmlndGggJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyZW50aGVzaXMsIHBsdXMgc2lnbiwgY29tbWEsIGh5cGhlbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZG90LCBzbGFzaCwgY29sb24sIGVxdWFsIHNpZ24sICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3F1ZXN0aW9uIG1hcmsnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICgvc3RyJC8udGVzdCh0YWcpKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICsgdGFnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVPYmppZCA9IGZ1bmN0aW9uIGVuY29kZU9iamlkKGlkLCB2YWx1ZXMsIHJlbGF0aXZlKSB7XG4gIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignc3RyaW5nIG9iamlkIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCBmb3VuZCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KGlkKSlcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCBub3QgZm91bmQgaW4gdmFsdWVzIG1hcCcpO1xuICAgIGlkID0gdmFsdWVzW2lkXS5zcGxpdCgvW1xcc1xcLl0rL2cpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgaWQgPSBpZC5zbGljZSgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWQubGVuZ3RoOyBpKyspXG4gICAgICBpZFtpXSB8PSAwO1xuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGlkKSkge1xuICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdvYmppZCgpIHNob3VsZCBiZSBlaXRoZXIgYXJyYXkgb3Igc3RyaW5nLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ290OiAnICsgSlNPTi5zdHJpbmdpZnkoaWQpKTtcbiAgfVxuXG4gIGlmICghcmVsYXRpdmUpIHtcbiAgICBpZiAoaWRbMV0gPj0gNDApXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU2Vjb25kIG9iamlkIGlkZW50aWZpZXIgT09CJyk7XG4gICAgaWQuc3BsaWNlKDAsIDIsIGlkWzBdICogNDAgKyBpZFsxXSk7XG4gIH1cblxuICAvLyBDb3VudCBudW1iZXIgb2Ygb2N0ZXRzXG4gIHZhciBzaXplID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIGZvciAoc2l6ZSsrOyBpZGVudCA+PSAweDgwOyBpZGVudCA+Pj0gNylcbiAgICAgIHNpemUrKztcbiAgfVxuXG4gIHZhciBvYmppZCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gIHZhciBvZmZzZXQgPSBvYmppZC5sZW5ndGggLSAxO1xuICBmb3IgKHZhciBpID0gaWQubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgaWRlbnQgPSBpZFtpXTtcbiAgICBvYmppZFtvZmZzZXQtLV0gPSBpZGVudCAmIDB4N2Y7XG4gICAgd2hpbGUgKChpZGVudCA+Pj0gNykgPiAwKVxuICAgICAgb2JqaWRbb2Zmc2V0LS1dID0gMHg4MCB8IChpZGVudCAmIDB4N2YpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIob2JqaWQpO1xufTtcblxuZnVuY3Rpb24gdHdvKG51bSkge1xuICBpZiAobnVtIDwgMTApXG4gICAgcmV0dXJuICcwJyArIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiBudW07XG59XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVUaW1lID0gZnVuY3Rpb24gZW5jb2RlVGltZSh0aW1lLCB0YWcpIHtcbiAgdmFyIHN0cjtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aW1lKTtcblxuICBpZiAodGFnID09PSAnZ2VudGltZScpIHtcbiAgICBzdHIgPSBbXG4gICAgICB0d28oZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0RhdGUoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENIb3VycygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ01pbnV0ZXMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENTZWNvbmRzKCkpLFxuICAgICAgJ1onXG4gICAgXS5qb2luKCcnKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICd1dGN0aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkgJSAxMDApLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nICcgKyB0YWcgKyAnIHRpbWUgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoc3RyLCAnb2N0c3RyJyk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlTnVsbCA9IGZ1bmN0aW9uIGVuY29kZU51bGwoKSB7XG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKCcnKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBudW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCF2YWx1ZXMpXG4gICAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignU3RyaW5nIGludCBvciBlbnVtIGdpdmVuLCBidXQgbm8gdmFsdWVzIG1hcCcpO1xuICAgIGlmICghdmFsdWVzLmhhc093blByb3BlcnR5KG51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdWYWx1ZXMgbWFwIGRvZXNuXFwndCBjb250YWluOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG51bSkpO1xuICAgIH1cbiAgICBudW0gPSB2YWx1ZXNbbnVtXTtcbiAgfVxuXG4gIC8vIEJpZ251bSwgYXNzdW1lIGJpZyBlbmRpYW5cbiAgaWYgKHR5cGVvZiBudW0gIT09ICdudW1iZXInICYmICFCdWZmZXIuaXNCdWZmZXIobnVtKSkge1xuICAgIHZhciBudW1BcnJheSA9IG51bS50b0FycmF5KCk7XG4gICAgaWYgKCFudW0uc2lnbiAmJiBudW1BcnJheVswXSAmIDB4ODApIHtcbiAgICAgIG51bUFycmF5LnVuc2hpZnQoMCk7XG4gICAgfVxuICAgIG51bSA9IG5ldyBCdWZmZXIobnVtQXJyYXkpO1xuICB9XG5cbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIHNpemUgPSBudW0ubGVuZ3RoO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgc2l6ZSsrO1xuXG4gICAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2l6ZSk7XG4gICAgbnVtLmNvcHkob3V0KTtcbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMClcbiAgICAgIG91dFswXSA9IDBcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvdXQpO1xuICB9XG5cbiAgaWYgKG51bSA8IDB4ODApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobnVtKTtcblxuICBpZiAobnVtIDwgMHgxMDApXG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWzAsIG51bV0pO1xuXG4gIHZhciBzaXplID0gMTtcbiAgZm9yICh2YXIgaSA9IG51bTsgaSA+PSAweDEwMDsgaSA+Pj0gOClcbiAgICBzaXplKys7XG5cbiAgdmFyIG91dCA9IG5ldyBBcnJheShzaXplKTtcbiAgZm9yICh2YXIgaSA9IG91dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIG91dFtpXSA9IG51bSAmIDB4ZmY7XG4gICAgbnVtID4+PSA4O1xuICB9XG4gIGlmKG91dFswXSAmIDB4ODApIHtcbiAgICBvdXQudW5zaGlmdCgwKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG5ldyBCdWZmZXIob3V0KSk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZW5jb2RlQm9vbCA9IGZ1bmN0aW9uIGVuY29kZUJvb2wodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIodmFsdWUgPyAweGZmIDogMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fdXNlID0gZnVuY3Rpb24gdXNlKGVudGl0eSwgb2JqKSB7XG4gIGlmICh0eXBlb2YgZW50aXR5ID09PSAnZnVuY3Rpb24nKVxuICAgIGVudGl0eSA9IGVudGl0eShvYmopO1xuICByZXR1cm4gZW50aXR5Ll9nZXRFbmNvZGVyKCdkZXInKS50cmVlO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3NraXBEZWZhdWx0ID0gZnVuY3Rpb24gc2tpcERlZmF1bHQoZGF0YUJ1ZmZlciwgcmVwb3J0ZXIsIHBhcmVudCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBpO1xuICBpZiAoc3RhdGVbJ2RlZmF1bHQnXSA9PT0gbnVsbClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIGRhdGEgPSBkYXRhQnVmZmVyLmpvaW4oKTtcbiAgaWYgKHN0YXRlLmRlZmF1bHRCdWZmZXIgPT09IHVuZGVmaW5lZClcbiAgICBzdGF0ZS5kZWZhdWx0QnVmZmVyID0gdGhpcy5fZW5jb2RlVmFsdWUoc3RhdGVbJ2RlZmF1bHQnXSwgcmVwb3J0ZXIsIHBhcmVudCkuam9pbigpO1xuXG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlci5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAoaT0wOyBpIDwgZGF0YS5sZW5ndGg7IGkrKylcbiAgICBpZiAoZGF0YVtpXSAhPT0gc3RhdGUuZGVmYXVsdEJ1ZmZlcltpXSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBlbmNvZGVUYWcodGFnLCBwcmltaXRpdmUsIGNscywgcmVwb3J0ZXIpIHtcbiAgdmFyIHJlcztcblxuICBpZiAodGFnID09PSAnc2Vxb2YnKVxuICAgIHRhZyA9ICdzZXEnO1xuICBlbHNlIGlmICh0YWcgPT09ICdzZXRvZicpXG4gICAgdGFnID0gJ3NldCc7XG5cbiAgaWYgKGRlci50YWdCeU5hbWUuaGFzT3duUHJvcGVydHkodGFnKSlcbiAgICByZXMgPSBkZXIudGFnQnlOYW1lW3RhZ107XG4gIGVsc2UgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInICYmICh0YWcgfCAwKSA9PT0gdGFnKVxuICAgIHJlcyA9IHRhZztcbiAgZWxzZVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5rbm93biB0YWc6ICcgKyB0YWcpO1xuXG4gIGlmIChyZXMgPj0gMHgxZilcbiAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ011bHRpLW9jdGV0IHRhZyBlbmNvZGluZyB1bnN1cHBvcnRlZCcpO1xuXG4gIGlmICghcHJpbWl0aXZlKVxuICAgIHJlcyB8PSAweDIwO1xuXG4gIHJlcyB8PSAoZGVyLnRhZ0NsYXNzQnlOYW1lW2NscyB8fCAndW5pdmVyc2FsJ10gPDwgNik7XG5cbiAgcmV0dXJuIHJlcztcbn1cbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlZWQsIGxlbikge1xuICB2YXIgdCA9IEJ1ZmZlci5hbGxvYygwKVxuICB2YXIgaSA9IDBcbiAgdmFyIGNcbiAgd2hpbGUgKHQubGVuZ3RoIDwgbGVuKSB7XG4gICAgYyA9IGkyb3BzKGkrKylcbiAgICB0ID0gQnVmZmVyLmNvbmNhdChbdCwgY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShzZWVkKS51cGRhdGUoYykuZGlnZXN0KCldKVxuICB9XG4gIHJldHVybiB0LnNsaWNlKDAsIGxlbilcbn1cblxuZnVuY3Rpb24gaTJvcHMgKGMpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0KVxuICBvdXQud3JpdGVVSW50MzJCRShjLCAwKVxuICByZXR1cm4gb3V0XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhvciAoYSwgYikge1xuICB2YXIgbGVuID0gYS5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgYVtpXSBePSBiW2ldXG4gIH1cbiAgcmV0dXJuIGFcbn1cbiIsInZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiB3aXRoUHVibGljIChwYWRkZWRNc2csIGtleSkge1xuICByZXR1cm4gQnVmZmVyLmZyb20ocGFkZGVkTXNnXG4gICAgLnRvUmVkKEJOLm1vbnQoa2V5Lm1vZHVsdXMpKVxuICAgIC5yZWRQb3cobmV3IEJOKGtleS5wdWJsaWNFeHBvbmVudCkpXG4gICAgLmZyb21SZWQoKVxuICAgIC50b0FycmF5KCkpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2l0aFB1YmxpY1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBiczU4IGZyb20gJ2JzNTgnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBzZWNwMjU2azEgZnJvbSAnc2VjcDI1NmsxJztcblxuZnVuY3Rpb24gc2hhMjU2KGlucHV0KSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKGlucHV0KS5kaWdlc3QoKTtcbn1cblxuY2xhc3MgUHJpdmF0ZUtleSB7XG4gIGNvbnN0cnVjdG9yKGtleSkge1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICB9XG5cbiAgc3RhdGljIGZyb21XaWYod2lmKSB7XG4gICAgLy8gY29uc3QgYnVmZmVyID0gYnM1OC5kZWNvZGUod2lmKTtcbiAgICAvLyAvLyBjb25zdCBjaGVja3N1bSA9IGJ1ZmZlci5zbGljZSgtNCk7XG4gICAgLy8gY29uc3Qga2V5ID0gYnVmZmVyLnNsaWNlKDAsIC00KTtcbiAgICAvLyAvLyBjb25zdCBjaGVja3N1bVZlcmlmeSA9IHNoYTI1NihzaGEyNTYoa2V5KSkuc2xpY2UoMCwgNCk7XG5cbiAgICAvLyAvLyBhc3NlcnQuZGVlcEVxdWFsKGNoZWNrc3VtVmVyaWZ5LCBjaGVja3N1bSwgJ3ByaXZhdGUga2V5IGNoZWNrc3VtIG1pc21hdGNoJyk7XG4gICAgLy8gcmV0dXJuIG5ldyBQcml2YXRlS2V5KGtleS5zbGljZSgxKSk7XG5cbiAgICB2YXIgcHJpdmF0ZV93aWYgPSBuZXcgQnVmZmVyKGJzNTguZGVjb2RlKHdpZikpO1xuICAgIHZhciB2ZXJzaW9uID0gcHJpdmF0ZV93aWYucmVhZFVJbnQ4KDApO1xuICAgIGlmICh2ZXJzaW9uICE9PSAweDgwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHZlcnNpb24gJyArIDB4ODAgKyAnLCBpbnN0ZWFkIGdvdCAnICsgdmVyc2lvbik7XG4gICAgfVxuICAgIHZhciBwcml2YXRlX2tleSA9IHByaXZhdGVfd2lmLnNsaWNlKDAsIC00KTtcbiAgICB2YXIgY2hlY2tzdW0gPSBwcml2YXRlX3dpZi5zbGljZSgtNCk7XG4gICAgdmFyIG5ld19jaGVja3N1bSA9IHNoYTI1Nihwcml2YXRlX2tleSk7XG4gICAgbmV3X2NoZWNrc3VtID0gc2hhMjU2KG5ld19jaGVja3N1bSk7XG4gICAgbmV3X2NoZWNrc3VtID0gbmV3X2NoZWNrc3VtLnNsaWNlKDAsIDQpO1xuICAgIGlmIChjaGVja3N1bS50b1N0cmluZygpICE9PSBuZXdfY2hlY2tzdW0udG9TdHJpbmcoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFdJRiBrZXkgKGNoZWNrc3VtIG1pc3MtbWF0Y2gpJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZV9rZXkgPSBwcml2YXRlX2tleS5zbGljZSgxKTtcbiAgICByZXR1cm4gbmV3IFByaXZhdGVLZXkocHJpdmF0ZV9rZXkpO1xuICB9XG5cbiAgc2lnbihtZXNzYWdlKSB7XG4gICAgbGV0IHJ2O1xuICAgIGxldCBhdHRlbXB0cyA9IDA7XG5cbiAgICBkbyB7XG4gICAgICBjb25zdCBqb2luZWQgPSBCdWZmZXIuY29uY2F0KFttZXNzYWdlLCBCdWZmZXIuYWxsb2MoMSwgKythdHRlbXB0cyldKTtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IGRhdGE6IHNoYTI1Nihqb2luZWQpIH07XG5cbiAgICAgIHJ2ID0gc2VjcDI1NmsxLnNpZ24obWVzc2FnZSwgdGhpcy5rZXksIG9wdGlvbnMpO1xuICAgIH0gd2hpbGUgKCF0aGlzLmlzQ2Fub25pY2FsU2lnbmF0dXJlKHJ2LnNpZ25hdHVyZSkpO1xuXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDY1KTtcblxuICAgIGJ1ZmZlci53cml0ZVVJbnQ4KHJ2LnJlY292ZXJ5ICsgMzEsIDApO1xuICAgIHJ2LnNpZ25hdHVyZS5jb3B5KGJ1ZmZlciwgMSk7XG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygnaGV4Jyk7XG4gIH1cblxuICBpc0Nhbm9uaWNhbFNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gKCEoc2lnbmF0dXJlWzBdICYgMHg4MCkgJiZcbiAgICAgICAgICAgICEoc2lnbmF0dXJlWzBdID09PSAwICYmICEoc2lnbmF0dXJlWzFdICYgMHg4MCkpICYmXG4gICAgICAgICAgICAhKHNpZ25hdHVyZVszMl0gJiAweDgwKSAmJlxuICAgICAgICAgICAgIShzaWduYXR1cmVbMzJdID09PSAwICYmICEoc2lnbmF0dXJlWzMzXSAmIDB4ODApKSk7XG4gIH1cbn1cblxuY2xhc3MgQXV0aCB7XG4gIHN0YXRpYyBhc3luYyB0cmFuc2FjdGlvbkRpZ2VzdChycGMsIHRyYW5zYWN0aW9uLCBrZXlzLCBhZGRyZXNzUHJlZml4LCBjaGFpbklkKSB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJwYy5zZW5kKCdjb25kZW5zZXJfYXBpLmdldF90cmFuc2FjdGlvbl9oZXgnLCBbdHJhbnNhY3Rpb25dKTtcbiAgICBjb25zb2xlLmxvZygnYm9keScsIGJvZHkpO1xuICAgIGNvbnN0IHRyYW5zYWN0aW9uSGV4ID0gYm9keS5yZXN1bHQuc3Vic3RyaW5nKDAsIGJvZHkucmVzdWx0Lmxlbmd0aCAtIDIpO1xuICAgIGNvbnN0IGRpZ2VzdCA9IHNoYTI1NihCdWZmZXIuY29uY2F0KFtCdWZmZXIuZnJvbShjaGFpbklkLCAnaGV4JyksIEJ1ZmZlci5mcm9tKHRyYW5zYWN0aW9uSGV4LCAnaGV4JyldKSk7XG5cbiAgICByZXR1cm4gZGlnZXN0O1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIHNpZ25UcmFuc2FjdGlvbihycGMsIHRyYW5zYWN0aW9uLCBrZXlzLCBhZGRyZXNzUHJlZml4LCBjaGFpbklkKSB7XG4gICAgY29uc29sZS5sb2coJ3NpZ25UcmFuc2FjdGlvbicsIHJwYywgdHJhbnNhY3Rpb24sIGtleXMsIGFkZHJlc3NQcmVmaXgsIGNoYWluSWQpO1xuICAgIGNvbnN0IGRpZ2VzdCA9IGF3YWl0IHRoaXMudHJhbnNhY3Rpb25EaWdlc3QocnBjLCB0cmFuc2FjdGlvbiwga2V5cywgYWRkcmVzc1ByZWZpeCwgY2hhaW5JZCk7XG5cbiAgICAvLyBUT0RPOiBDYWxjdWxhdGUgcmVmX2Jsb2NrX251bSwgcmVmX2Jsb2NrX3ByZWZpeCwgYW5kIGV4cGlyYXRpb25cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHJhbnNhY3Rpb24uc2lnbmF0dXJlcykpIHtcbiAgICAgIHRyYW5zYWN0aW9uLnNpZ25hdHVyZXMgPSBbXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSBpbiBrZXlzKSB7XG4gICAgICBjb25zdCBzaWduYXR1cmUgPSBrZXlzW2ldLnNpZ24oZGlnZXN0KTtcblxuICAgICAgdHJhbnNhY3Rpb24uc2lnbmF0dXJlcy5wdXNoKHNpZ25hdHVyZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG59XG5cbmNsYXNzIFJwYyB7XG4gIGNvbnN0cnVjdG9yKGhvc3QpIHtcbiAgICB0aGlzLmhvc3QgPSBob3N0O1xuICB9XG5cbiAgYXN5bmMgc2VuZChtZXRob2QsIHBhcmFtcykge1xuICAgIGNvbnN0IGlkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMTYsIDYpKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgaWQ6IGlkXG4gICAgfTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zKHtcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgdXJsOiB0aGlzLmhvc3QsXG4gICAgICByZXNwb25zZVR5cGU6ICdqc29uJyxcbiAgICAgIGRhdGE6IHBheWxvYWRcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG59XG5cbmV4cG9ydCB7IEF1dGgsIFByaXZhdGVLZXksIFJwYyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGJ0b2EgcG9seWZpbGwgZm9yIElFPDEwIGNvdXJ0ZXN5IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZGNoYW1iZXJzL0Jhc2U2NC5qc1xuXG52YXIgY2hhcnMgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0nO1xuXG5mdW5jdGlvbiBFKCkge1xuICB0aGlzLm1lc3NhZ2UgPSAnU3RyaW5nIGNvbnRhaW5zIGFuIGludmFsaWQgY2hhcmFjdGVyJztcbn1cbkUucHJvdG90eXBlID0gbmV3IEVycm9yO1xuRS5wcm90b3R5cGUuY29kZSA9IDU7XG5FLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbmZ1bmN0aW9uIGJ0b2EoaW5wdXQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhpbnB1dCk7XG4gIHZhciBvdXRwdXQgPSAnJztcbiAgZm9yIChcbiAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgIHZhciBibG9jaywgY2hhckNvZGUsIGlkeCA9IDAsIG1hcCA9IGNoYXJzO1xuICAgIC8vIGlmIHRoZSBuZXh0IHN0ciBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAvLyAgIGNoYW5nZSB0aGUgbWFwcGluZyB0YWJsZSB0byBcIj1cIlxuICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICBzdHIuY2hhckF0KGlkeCB8IDApIHx8IChtYXAgPSAnPScsIGlkeCAlIDEpO1xuICAgIC8vIFwiOCAtIGlkeCAlIDEgKiA4XCIgZ2VuZXJhdGVzIHRoZSBzZXF1ZW5jZSAyLCA0LCA2LCA4XG4gICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICkge1xuICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaWR4ICs9IDMgLyA0KTtcbiAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB7XG4gICAgICB0aHJvdyBuZXcgRSgpO1xuICAgIH1cbiAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwidmFyIGJhc2V4ID0gcmVxdWlyZSgnYmFzZS14JylcbnZhciBBTFBIQUJFVCA9ICcxMjM0NTY3ODlBQkNERUZHSEpLTE1OUFFSU1RVVldYWVphYmNkZWZnaGlqa21ub3BxcnN0dXZ3eHl6J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2V4KEFMUEhBQkVUKVxuIiwiLy8gYmFzZS14IGVuY29kaW5nIC8gZGVjb2Rpbmdcbi8vIENvcHlyaWdodCAoYykgMjAxOCBiYXNlLXggY29udHJpYnV0b3JzXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCBUaGUgQml0Y29pbiBDb3JlIGRldmVsb3BlcnMgKGJhc2U1OC5jcHApXG4vLyBEaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIHNvZnR3YXJlIGxpY2Vuc2UsIHNlZSB0aGUgYWNjb21wYW55aW5nXG4vLyBmaWxlIExJQ0VOU0Ugb3IgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAuXG5cbmNvbnN0IEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmFzZSAoQUxQSEFCRVQpIHtcbiAgaWYgKEFMUEhBQkVULmxlbmd0aCA+PSAyNTUpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscGhhYmV0IHRvbyBsb25nJylcblxuICBjb25zdCBCQVNFX01BUCA9IG5ldyBVaW50OEFycmF5KDI1NilcbiAgQkFTRV9NQVAuZmlsbCgyNTUpXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBBTFBIQUJFVC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHggPSBBTFBIQUJFVC5jaGFyQXQoaSlcbiAgICBjb25zdCB4YyA9IHguY2hhckNvZGVBdCgwKVxuXG4gICAgaWYgKEJBU0VfTUFQW3hjXSAhPT0gMjU1KSB0aHJvdyBuZXcgVHlwZUVycm9yKHggKyAnIGlzIGFtYmlndW91cycpXG4gICAgQkFTRV9NQVBbeGNdID0gaVxuICB9XG5cbiAgY29uc3QgQkFTRSA9IEFMUEhBQkVULmxlbmd0aFxuICBjb25zdCBMRUFERVIgPSBBTFBIQUJFVC5jaGFyQXQoMClcbiAgY29uc3QgRkFDVE9SID0gTWF0aC5sb2coQkFTRSkgLyBNYXRoLmxvZygyNTYpIC8vIGxvZyhCQVNFKSAvIGxvZygyNTYpLCByb3VuZGVkIHVwXG4gIGNvbnN0IGlGQUNUT1IgPSBNYXRoLmxvZygyNTYpIC8gTWF0aC5sb2coQkFTRSkgLy8gbG9nKDI1NikgLyBsb2coQkFTRSksIHJvdW5kZWQgdXBcblxuICBmdW5jdGlvbiBlbmNvZGUgKHNvdXJjZSkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNvdXJjZSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIEJ1ZmZlcicpXG4gICAgaWYgKHNvdXJjZS5sZW5ndGggPT09IDApIHJldHVybiAnJ1xuXG4gICAgLy8gU2tpcCAmIGNvdW50IGxlYWRpbmcgemVyb2VzLlxuICAgIGxldCB6ZXJvZXMgPSAwXG4gICAgbGV0IGxlbmd0aCA9IDBcbiAgICBsZXQgcGJlZ2luID0gMFxuICAgIGNvbnN0IHBlbmQgPSBzb3VyY2UubGVuZ3RoXG5cbiAgICB3aGlsZSAocGJlZ2luICE9PSBwZW5kICYmIHNvdXJjZVtwYmVnaW5dID09PSAwKSB7XG4gICAgICBwYmVnaW4rK1xuICAgICAgemVyb2VzKytcbiAgICB9XG5cbiAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlNTggcmVwcmVzZW50YXRpb24uXG4gICAgY29uc3Qgc2l6ZSA9ICgocGVuZCAtIHBiZWdpbikgKiBpRkFDVE9SICsgMSkgPj4+IDBcbiAgICBjb25zdCBiNTggPSBuZXcgVWludDhBcnJheShzaXplKVxuXG4gICAgLy8gUHJvY2VzcyB0aGUgYnl0ZXMuXG4gICAgd2hpbGUgKHBiZWdpbiAhPT0gcGVuZCkge1xuICAgICAgbGV0IGNhcnJ5ID0gc291cmNlW3BiZWdpbl1cblxuICAgICAgLy8gQXBwbHkgXCJiNTggPSBiNTggKiAyNTYgKyBjaFwiLlxuICAgICAgbGV0IGkgPSAwXG4gICAgICBmb3IgKGxldCBpdCA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgKGl0ICE9PSAtMSk7IGl0LS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoMjU2ICogYjU4W2l0XSkgPj4+IDBcbiAgICAgICAgYjU4W2l0XSA9IChjYXJyeSAlIEJBU0UpID4+PiAwXG4gICAgICAgIGNhcnJ5ID0gKGNhcnJ5IC8gQkFTRSkgPj4+IDBcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ05vbi16ZXJvIGNhcnJ5JylcbiAgICAgIGxlbmd0aCA9IGlcbiAgICAgIHBiZWdpbisrXG4gICAgfVxuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lcyBpbiBiYXNlNTggcmVzdWx0LlxuICAgIGxldCBpdCA9IHNpemUgLSBsZW5ndGhcbiAgICB3aGlsZSAoaXQgIT09IHNpemUgJiYgYjU4W2l0XSA9PT0gMCkge1xuICAgICAgaXQrK1xuICAgIH1cblxuICAgIC8vIFRyYW5zbGF0ZSB0aGUgcmVzdWx0IGludG8gYSBzdHJpbmcuXG4gICAgbGV0IHN0ciA9IExFQURFUi5yZXBlYXQoemVyb2VzKVxuICAgIGZvciAoOyBpdCA8IHNpemU7ICsraXQpIHN0ciArPSBBTFBIQUJFVC5jaGFyQXQoYjU4W2l0XSlcblxuICAgIHJldHVybiBzdHJcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoc291cmNlKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBTdHJpbmcnKVxuICAgIGlmIChzb3VyY2UubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG5cbiAgICBsZXQgcHN6ID0gMFxuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHNwYWNlcy5cbiAgICBpZiAoc291cmNlW3Bzel0gPT09ICcgJykgcmV0dXJuXG5cbiAgICAvLyBTa2lwIGFuZCBjb3VudCBsZWFkaW5nICcxJ3MuXG4gICAgbGV0IHplcm9lcyA9IDBcbiAgICBsZXQgbGVuZ3RoID0gMFxuICAgIHdoaWxlIChzb3VyY2VbcHN6XSA9PT0gTEVBREVSKSB7XG4gICAgICB6ZXJvZXMrK1xuICAgICAgcHN6KytcbiAgICB9XG5cbiAgICAvLyBBbGxvY2F0ZSBlbm91Z2ggc3BhY2UgaW4gYmlnLWVuZGlhbiBiYXNlMjU2IHJlcHJlc2VudGF0aW9uLlxuICAgIGNvbnN0IHNpemUgPSAoKChzb3VyY2UubGVuZ3RoIC0gcHN6KSAqIEZBQ1RPUikgKyAxKSA+Pj4gMCAvLyBsb2coNTgpIC8gbG9nKDI1NiksIHJvdW5kZWQgdXAuXG4gICAgY29uc3QgYjI1NiA9IG5ldyBVaW50OEFycmF5KHNpemUpXG5cbiAgICAvLyBQcm9jZXNzIHRoZSBjaGFyYWN0ZXJzLlxuICAgIHdoaWxlIChzb3VyY2VbcHN6XSkge1xuICAgICAgLy8gRGVjb2RlIGNoYXJhY3RlclxuICAgICAgbGV0IGNhcnJ5ID0gQkFTRV9NQVBbc291cmNlLmNoYXJDb2RlQXQocHN6KV1cblxuICAgICAgLy8gSW52YWxpZCBjaGFyYWN0ZXJcbiAgICAgIGlmIChjYXJyeSA9PT0gMjU1KSByZXR1cm5cblxuICAgICAgbGV0IGkgPSAwXG4gICAgICBmb3IgKGxldCBpdCA9IHNpemUgLSAxOyAoY2FycnkgIT09IDAgfHwgaSA8IGxlbmd0aCkgJiYgKGl0ICE9PSAtMSk7IGl0LS0sIGkrKykge1xuICAgICAgICBjYXJyeSArPSAoQkFTRSAqIGIyNTZbaXRdKSA+Pj4gMFxuICAgICAgICBiMjU2W2l0XSA9IChjYXJyeSAlIDI1NikgPj4+IDBcbiAgICAgICAgY2FycnkgPSAoY2FycnkgLyAyNTYpID4+PiAwXG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdOb24temVybyBjYXJyeScpXG4gICAgICBsZW5ndGggPSBpXG4gICAgICBwc3orK1xuICAgIH1cblxuICAgIC8vIFNraXAgdHJhaWxpbmcgc3BhY2VzLlxuICAgIGlmIChzb3VyY2VbcHN6XSA9PT0gJyAnKSByZXR1cm5cblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXMgaW4gYjI1Ni5cbiAgICBsZXQgaXQgPSBzaXplIC0gbGVuZ3RoXG4gICAgd2hpbGUgKGl0ICE9PSBzaXplICYmIGIyNTZbaXRdID09PSAwKSB7XG4gICAgICBpdCsrXG4gICAgfVxuXG4gICAgY29uc3QgdmNoID0gQnVmZmVyLmFsbG9jVW5zYWZlKHplcm9lcyArIChzaXplIC0gaXQpKVxuICAgIHZjaC5maWxsKDB4MDAsIDAsIHplcm9lcylcblxuICAgIGxldCBqID0gemVyb2VzXG4gICAgd2hpbGUgKGl0ICE9PSBzaXplKSB7XG4gICAgICB2Y2hbaisrXSA9IGIyNTZbaXQrK11cbiAgICB9XG5cbiAgICByZXR1cm4gdmNoXG4gIH1cblxuICBmdW5jdGlvbiBkZWNvZGUgKHN0cmluZykge1xuICAgIGNvbnN0IGJ1ZmZlciA9IGRlY29kZVVuc2FmZShzdHJpbmcpXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGJ1ZmZlclxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tYmFzZScgKyBCQVNFICsgJyBjaGFyYWN0ZXInKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBkZWNvZGVVbnNhZmU6IGRlY29kZVVuc2FmZSxcbiAgICBkZWNvZGU6IGRlY29kZVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy5ybmcgPSBleHBvcnRzLnBzZXVkb1JhbmRvbUJ5dGVzID0gZXhwb3J0cy5wcm5nID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxuZXhwb3J0cy5jcmVhdGVIYXNoID0gZXhwb3J0cy5IYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxuZXhwb3J0cy5jcmVhdGVIbWFjID0gZXhwb3J0cy5IbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxuXG52YXIgYWxnb3MgPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24vYWxnb3MnKVxudmFyIGFsZ29LZXlzID0gT2JqZWN0LmtleXMoYWxnb3MpXG52YXIgaGFzaGVzID0gWydzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicsICdtZDUnLCAncm1kMTYwJ10uY29uY2F0KGFsZ29LZXlzKVxuZXhwb3J0cy5nZXRIYXNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBoYXNoZXNcbn1cblxudmFyIHAgPSByZXF1aXJlKCdwYmtkZjInKVxuZXhwb3J0cy5wYmtkZjIgPSBwLnBia2RmMlxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcC5wYmtkZjJTeW5jXG5cbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWNpcGhlcicpXG5cbmV4cG9ydHMuQ2lwaGVyID0gYWVzLkNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBhZXMuY3JlYXRlQ2lwaGVyXG5leHBvcnRzLkNpcGhlcml2ID0gYWVzLkNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gYWVzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLkRlY2lwaGVyID0gYWVzLkRlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gYWVzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLkRlY2lwaGVyaXYgPSBhZXMuRGVjaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gYWVzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMuZ2V0Q2lwaGVycyA9IGFlcy5nZXRDaXBoZXJzXG5leHBvcnRzLmxpc3RDaXBoZXJzID0gYWVzLmxpc3RDaXBoZXJzXG5cbnZhciBkaCA9IHJlcXVpcmUoJ2RpZmZpZS1oZWxsbWFuJylcblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBkaC5EaWZmaWVIZWxsbWFuR3JvdXBcbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZGguY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBkaC5nZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBkaC5jcmVhdGVEaWZmaWVIZWxsbWFuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBkaC5EaWZmaWVIZWxsbWFuXG5cbnZhciBzaWduID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduJylcblxuZXhwb3J0cy5jcmVhdGVTaWduID0gc2lnbi5jcmVhdGVTaWduXG5leHBvcnRzLlNpZ24gPSBzaWduLlNpZ25cbmV4cG9ydHMuY3JlYXRlVmVyaWZ5ID0gc2lnbi5jcmVhdGVWZXJpZnlcbmV4cG9ydHMuVmVyaWZ5ID0gc2lnbi5WZXJpZnlcblxuZXhwb3J0cy5jcmVhdGVFQ0RIID0gcmVxdWlyZSgnY3JlYXRlLWVjZGgnKVxuXG52YXIgcHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJ3B1YmxpYy1lbmNyeXB0JylcblxuZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNFbmNyeXB0XG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRW5jcnlwdFxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNEZWNyeXB0XG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRGVjcnlwdFxuXG4vLyB0aGUgbGVhc3QgSSBjYW4gZG8gaXMgbWFrZSBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIHJlc3Qgb2YgdGhlIG5vZGUuanMvY3J5cHRvIGFwaS5cbi8vIDtbXG4vLyAgICdjcmVhdGVDcmVkZW50aWFscydcbi8vIF0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuLy8gICBleHBvcnRzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRocm93IG5ldyBFcnJvcihbXG4vLyAgICAgICAnc29ycnksICcgKyBuYW1lICsgJyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0Jyxcbi8vICAgICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4vLyAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuLy8gICAgIF0uam9pbignXFxuJykpXG4vLyAgIH1cbi8vIH0pXG5cbnZhciByZiA9IHJlcXVpcmUoJ3JhbmRvbWZpbGwnKVxuXG5leHBvcnRzLnJhbmRvbUZpbGwgPSByZi5yYW5kb21GaWxsXG5leHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gcmYucmFuZG9tRmlsbFN5bmNcblxuZXhwb3J0cy5jcmVhdGVDcmVkZW50aWFscyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFtcbiAgICAnc29ycnksIGNyZWF0ZUNyZWRlbnRpYWxzIGlzIG5vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4gICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG8tYnJvd3NlcmlmeS9jcnlwdG8tYnJvd3NlcmlmeSdcbiAgXS5qb2luKCdcXG4nKSlcbn1cblxuZXhwb3J0cy5jb25zdGFudHMgPSB7XG4gICdESF9DSEVDS19QX05PVF9TQUZFX1BSSU1FJzogMixcbiAgJ0RIX0NIRUNLX1BfTk9UX1BSSU1FJzogMSxcbiAgJ0RIX1VOQUJMRV9UT19DSEVDS19HRU5FUkFUT1InOiA0LFxuICAnREhfTk9UX1NVSVRBQkxFX0dFTkVSQVRPUic6IDgsXG4gICdOUE5fRU5BQkxFRCc6IDEsXG4gICdBTFBOX0VOQUJMRUQnOiAxLFxuICAnUlNBX1BLQ1MxX1BBRERJTkcnOiAxLFxuICAnUlNBX1NTTFYyM19QQURESU5HJzogMixcbiAgJ1JTQV9OT19QQURESU5HJzogMyxcbiAgJ1JTQV9QS0NTMV9PQUVQX1BBRERJTkcnOiA0LFxuICAnUlNBX1g5MzFfUEFERElORyc6IDUsXG4gICdSU0FfUEtDUzFfUFNTX1BBRERJTkcnOiA2LFxuICAnUE9JTlRfQ09OVkVSU0lPTl9DT01QUkVTU0VEJzogMixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fVU5DT01QUkVTU0VEJzogNCxcbiAgJ1BPSU5UX0NPTlZFUlNJT05fSFlCUklEJzogNlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3JlYWRhYmxlJykuUGFzc1Rocm91Z2hcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTAsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGRlcml2ZWQgZnJvbSBzaGExLmpzIG9mIHRoZSBzYW1lIHJlcG9zaXRvcnkuXG4gKiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFNIQS0wIGFuZCBTSEEtMSBpcyBqdXN0IGEgYml0d2lzZSByb3RhdGUgbGVmdFxuICogb3BlcmF0aW9uIHdhcyBhZGRlZC5cbiAqL1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMgfCAwLCAweGNhNjJjMWQ2IHwgMFxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg4MClcblxuZnVuY3Rpb24gU2hhICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGEsIEhhc2gpXG5cblNoYS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcblxuICByZXR1cm4gdGhpc1xufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDgwOyArK2kpIFdbaV0gPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGFcbiIsIi8qXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcbiAqIGluIEZJUFMgUFVCIDE4MC0xXG4gKiBWZXJzaW9uIDIuMWEgQ29weXJpZ2h0IFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBkZXRhaWxzLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGExICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgNjQsIDU2KVxufVxuXG5pbmhlcml0cyhTaGExLCBIYXNoKVxuXG5TaGExLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGwxIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMSkgfCAobnVtID4+PiAzMSlcbn1cblxuZnVuY3Rpb24gcm90bDUgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCA1KSB8IChudW0gPj4+IDI3KVxufVxuXG5mdW5jdGlvbiByb3RsMzAgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAzMCkgfCAobnVtID4+PiAyKVxufVxuXG5mdW5jdGlvbiBmdCAocywgYiwgYywgZCkge1xuICBpZiAocyA9PT0gMCkgcmV0dXJuIChiICYgYykgfCAoKH5iKSAmIGQpXG4gIGlmIChzID09PSAyKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpXG4gIHJldHVybiBiIF4gYyBeIGRcbn1cblxuU2hhMS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IHJvdGwxKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0pXG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgKytqKSB7XG4gICAgdmFyIHMgPSB+fihqIC8gMjApXG4gICAgdmFyIHQgPSAocm90bDUoYSkgKyBmdChzLCBiLCBjLCBkKSArIGUgKyBXW2pdICsgS1tzXSkgfCAwXG5cbiAgICBlID0gZFxuICAgIGQgPSBjXG4gICAgYyA9IHJvdGwzMChiKVxuICAgIGIgPSBhXG4gICAgYSA9IHRcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbn1cblxuU2hhMS5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIwKVxuXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2EgfCAwLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iIHwgMCwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYyB8IDAsIDgpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2QgfCAwLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSB8IDAsIDE2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMVxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoNjQpXG5cbmZ1bmN0aW9uIFNoYTIyNCAoKSB7XG4gIHRoaXMuaW5pdCgpXG5cbiAgdGhpcy5fdyA9IFcgLy8gbmV3IEFycmF5KDY0KVxuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTIyNCwgU2hhMjU2KVxuXG5TaGEyMjQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweGMxMDU5ZWQ4XG4gIHRoaXMuX2IgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2MgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2QgPSAweGY3MGU1OTM5XG4gIHRoaXMuX2UgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2YgPSAweDY4NTgxNTExXG4gIHRoaXMuX2cgPSAweDY0Zjk4ZmE3XG4gIHRoaXMuX2ggPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMjI0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjgpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEyMjRcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuL3NoYTUxMicpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGEzODQgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhMzg0LCBTSEE1MTIpXG5cblNoYTM4NC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYWggPSAweGNiYmI5ZDVkXG4gIHRoaXMuX2JoID0gMHg2MjlhMjkyYVxuICB0aGlzLl9jaCA9IDB4OTE1OTAxNWFcbiAgdGhpcy5fZGggPSAweDE1MmZlY2Q4XG4gIHRoaXMuX2VoID0gMHg2NzMzMjY2N1xuICB0aGlzLl9maCA9IDB4OGViNDRhODdcbiAgdGhpcy5fZ2ggPSAweGRiMGMyZTBkXG4gIHRoaXMuX2hoID0gMHg0N2I1NDgxZFxuXG4gIHRoaXMuX2FsID0gMHhjMTA1OWVkOFxuICB0aGlzLl9ibCA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fY2wgPSAweDMwNzBkZDE3XG4gIHRoaXMuX2RsID0gMHhmNzBlNTkzOVxuICB0aGlzLl9lbCA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZmwgPSAweDY4NTgxNTExXG4gIHRoaXMuX2dsID0gMHg2NGY5OGZhN1xuICB0aGlzLl9obCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEzODQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSg0OClcblxuICBmdW5jdGlvbiB3cml0ZUludDY0QkUgKGgsIGwsIG9mZnNldCkge1xuICAgIEgud3JpdGVJbnQzMkJFKGgsIG9mZnNldClcbiAgICBILndyaXRlSW50MzJCRShsLCBvZmZzZXQgKyA0KVxuICB9XG5cbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2FoLCB0aGlzLl9hbCwgMClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2JoLCB0aGlzLl9ibCwgOClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2NoLCB0aGlzLl9jbCwgMTYpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9kaCwgdGhpcy5fZGwsIDI0KVxuICB3cml0ZUludDY0QkUodGhpcy5fZWgsIHRoaXMuX2VsLCAzMilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2ZoLCB0aGlzLl9mbCwgNDApXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGEzODRcbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxuXG52YXIgWkVST1MgPSBCdWZmZXIuYWxsb2MoMTI4KVxudmFyIGJsb2Nrc2l6ZSA9IDY0XG5cbmZ1bmN0aW9uIEhtYWMgKGFsZywga2V5KSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAga2V5ID0gQnVmZmVyLmZyb20oa2V5KVxuICB9XG5cbiAgdGhpcy5fYWxnID0gYWxnXG4gIHRoaXMuX2tleSA9IGtleVxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gYWxnKGtleSlcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuXG4gIHRoaXMuX2hhc2ggPSBbaXBhZF1cbn1cblxuaW5oZXJpdHMoSG1hYywgQmFzZSlcblxuSG1hYy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuX2hhc2gucHVzaChkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5fYWxnKEJ1ZmZlci5jb25jYXQodGhpcy5faGFzaCkpXG4gIHJldHVybiB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdChbdGhpcy5fb3BhZCwgaF0pKVxufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnJvd3Nlci9hbGdvcml0aG1zLmpzb24nKVxuIiwidmFyIGNoZWNrUGFyYW1ldGVycyA9IHJlcXVpcmUoJy4vcHJlY29uZGl0aW9uJylcbnZhciBkZWZhdWx0RW5jb2RpbmcgPSByZXF1aXJlKCcuL2RlZmF1bHQtZW5jb2RpbmcnKVxudmFyIHN5bmMgPSByZXF1aXJlKCcuL3N5bmMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBaRVJPX0JVRlxudmFyIHN1YnRsZSA9IGdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLmNyeXB0by5zdWJ0bGVcbnZhciB0b0Jyb3dzZXIgPSB7XG4gICdzaGEnOiAnU0hBLTEnLFxuICAnc2hhLTEnOiAnU0hBLTEnLFxuICAnc2hhMSc6ICdTSEEtMScsXG4gICdzaGEyNTYnOiAnU0hBLTI1NicsXG4gICdzaGEtMjU2JzogJ1NIQS0yNTYnLFxuICAnc2hhMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTM4NCc6ICdTSEEtMzg0JyxcbiAgJ3NoYS01MTInOiAnU0hBLTUxMicsXG4gICdzaGE1MTInOiAnU0hBLTUxMidcbn1cbnZhciBjaGVja3MgPSBbXVxuZnVuY3Rpb24gY2hlY2tOYXRpdmUgKGFsZ28pIHtcbiAgaWYgKGdsb2JhbC5wcm9jZXNzICYmICFnbG9iYWwucHJvY2Vzcy5icm93c2VyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSlcbiAgfVxuICBpZiAoIXN1YnRsZSB8fCAhc3VidGxlLmltcG9ydEtleSB8fCAhc3VidGxlLmRlcml2ZUJpdHMpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmIChjaGVja3NbYWxnb10gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjaGVja3NbYWxnb11cbiAgfVxuICBaRVJPX0JVRiA9IFpFUk9fQlVGIHx8IEJ1ZmZlci5hbGxvYyg4KVxuICB2YXIgcHJvbSA9IGJyb3dzZXJQYmtkZjIoWkVST19CVUYsIFpFUk9fQlVGLCAxMCwgMTI4LCBhbGdvKVxuICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSlcbiAgY2hlY2tzW2FsZ29dID0gcHJvbVxuICByZXR1cm4gcHJvbVxufVxuXG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvbWlzZSAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChvdXQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9LCBmdW5jdGlvbiAoZSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZSlcbiAgICB9KVxuICB9KVxufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRpZ2VzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZGlnZXN0XG4gICAgZGlnZXN0ID0gdW5kZWZpbmVkXG4gIH1cblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG4gIHZhciBhbGdvID0gdG9Ccm93c2VyW2RpZ2VzdC50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghYWxnbyB8fCB0eXBlb2YgZ2xvYmFsLlByb21pc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgb3V0XG4gICAgICB0cnkge1xuICAgICAgICBvdXQgPSBzeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdClcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfVxuXG4gIGNoZWNrUGFyYW1ldGVycyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuKVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHBhc3N3b3JkKSkgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZCwgZGVmYXVsdEVuY29kaW5nKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihzYWx0KSkgc2FsdCA9IEJ1ZmZlci5mcm9tKHNhbHQsIGRlZmF1bHRFbmNvZGluZylcblxuICByZXNvbHZlUHJvbWlzZShjaGVja05hdGl2ZShhbGdvKS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgaWYgKHJlc3ApIHJldHVybiBicm93c2VyUGJrZGYyKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGFsZ28pXG5cbiAgICByZXR1cm4gc3luYyhwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5bGVuLCBkaWdlc3QpXG4gIH0pLCBjYWxsYmFjaylcbn1cbiIsInZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpXG52YXIgYWVzID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1hZXMvYnJvd3NlcicpXG52YXIgYWVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9tb2RlcycpXG52YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpXG52YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcblxuZnVuY3Rpb24gY3JlYXRlQ2lwaGVyIChzdWl0ZSwgcGFzc3dvcmQpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIGtleUxlbiwgaXZMZW5cbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcblxuICB2YXIga2V5TGVuLCBpdkxlblxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBrZXlMZW4sIGl2TGVuKVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwga2V5LCBpdikge1xuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkgcmV0dXJuIGFlcy5jcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5LCBpdilcbiAgaWYgKGRlc01vZGVzW3N1aXRlXSkgcmV0dXJuIG5ldyBERVMoeyBrZXk6IGtleSwgaXY6IGl2LCBtb2RlOiBzdWl0ZSB9KVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSByZXR1cm4gYWVzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleSwgaXYpXG4gIGlmIChkZXNNb2Rlc1tzdWl0ZV0pIHJldHVybiBuZXcgREVTKHsga2V5OiBrZXksIGl2OiBpdiwgbW9kZTogc3VpdGUsIGRlY3J5cHQ6IHRydWUgfSlcblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxufVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlc01vZGVzKS5jb25jYXQoYWVzLmdldENpcGhlcnMoKSlcbn1cblxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBleHBvcnRzLkNpcGhlciA9IGNyZWF0ZUNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXJpdiA9IGV4cG9ydHMuQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gZXhwb3J0cy5EZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuZXhwb3J0cy5saXN0Q2lwaGVycyA9IGV4cG9ydHMuZ2V0Q2lwaGVycyA9IGdldENpcGhlcnNcbiIsInZhciBDaXBoZXJCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGRlcyA9IHJlcXVpcmUoJ2Rlcy5qcycpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIG1vZGVzID0ge1xuICAnZGVzLWVkZTMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUzJzogZGVzLkVERSxcbiAgJ2Rlcy1lZGUtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuRURFKSxcbiAgJ2Rlcy1lZGUnOiBkZXMuRURFLFxuICAnZGVzLWNiYyc6IGRlcy5DQkMuaW5zdGFudGlhdGUoZGVzLkRFUyksXG4gICdkZXMtZWNiJzogZGVzLkRFU1xufVxubW9kZXMuZGVzID0gbW9kZXNbJ2Rlcy1jYmMnXVxubW9kZXMuZGVzMyA9IG1vZGVzWydkZXMtZWRlMy1jYmMnXVxubW9kdWxlLmV4cG9ydHMgPSBERVNcbmluaGVyaXRzKERFUywgQ2lwaGVyQmFzZSlcbmZ1bmN0aW9uIERFUyAob3B0cykge1xuICBDaXBoZXJCYXNlLmNhbGwodGhpcylcbiAgdmFyIG1vZGVOYW1lID0gb3B0cy5tb2RlLnRvTG93ZXJDYXNlKClcbiAgdmFyIG1vZGUgPSBtb2Rlc1ttb2RlTmFtZV1cbiAgdmFyIHR5cGVcbiAgaWYgKG9wdHMuZGVjcnlwdCkge1xuICAgIHR5cGUgPSAnZGVjcnlwdCdcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gJ2VuY3J5cHQnXG4gIH1cbiAgdmFyIGtleSA9IG9wdHMua2V5XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGtleSkpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihpdikpIHtcbiAgICBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICB9XG4gIHRoaXMuX2RlcyA9IG1vZGUuY3JlYXRlKHtcbiAgICBrZXk6IGtleSxcbiAgICBpdjogaXYsXG4gICAgdHlwZTogdHlwZVxuICB9KVxufVxuREVTLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuX2Rlcy5maW5hbCgpKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRShieXRlcywgb2ZmKSB7XG4gIHZhciByZXMgPSAgKGJ5dGVzWzAgKyBvZmZdIDw8IDI0KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzEgKyBvZmZdIDw8IDE2KSB8XG4gICAgICAgICAgICAgKGJ5dGVzWzIgKyBvZmZdIDw8IDgpIHxcbiAgICAgICAgICAgICBieXRlc1szICsgb2ZmXTtcbiAgcmV0dXJuIHJlcyA+Pj4gMDtcbn07XG5cbmV4cG9ydHMud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUoYnl0ZXMsIHZhbHVlLCBvZmYpIHtcbiAgYnl0ZXNbMCArIG9mZl0gPSB2YWx1ZSA+Pj4gMjQ7XG4gIGJ5dGVzWzEgKyBvZmZdID0gKHZhbHVlID4+PiAxNikgJiAweGZmO1xuICBieXRlc1syICsgb2ZmXSA9ICh2YWx1ZSA+Pj4gOCkgJiAweGZmO1xuICBieXRlc1szICsgb2ZmXSA9IHZhbHVlICYgMHhmZjtcbn07XG5cbmV4cG9ydHMuaXAgPSBmdW5jdGlvbiBpcChpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDY7IGkgPj0gMDsgaSAtPSAyKSB7XG4gICAgZm9yICh2YXIgaiA9IDE7IGogPD0gMjU7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucmlwID0gZnVuY3Rpb24gcmlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDQ7IGkgPCA4OyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMjQ7IGogPj0gMDsgaiAtPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5MID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucGMxID0gZnVuY3Rpb24gcGMxKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICAvLyA3LCAxNSwgMjMsIDMxLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA2LCAxNCwgMjIsIDMwLCAzOSwgNDcsIDU1LCA2M1xuICAvLyA1LCAxMywgMjEsIDI5LCAzOSwgNDcsIDU1LCA2M1xuICAvLyA0LCAxMiwgMjAsIDI4XG4gIGZvciAodmFyIGkgPSA3OyBpID49IDU7IGktLSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5MID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgfVxuXG4gIC8vIDEsIDksIDE3LCAyNSwgMzMsIDQxLCA0OSwgNTdcbiAgLy8gMiwgMTAsIDE4LCAyNiwgMzQsIDQyLCA1MCwgNThcbiAgLy8gMywgMTEsIDE5LCAyNywgMzUsIDQzLCA1MSwgNTlcbiAgLy8gMzYsIDQ0LCA1MiwgNjBcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gMzsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMucjI4c2hsID0gZnVuY3Rpb24gcjI4c2hsKG51bSwgc2hpZnQpIHtcbiAgcmV0dXJuICgobnVtIDw8IHNoaWZ0KSAmIDB4ZmZmZmZmZikgfCAobnVtID4+PiAoMjggLSBzaGlmdCkpO1xufTtcblxudmFyIHBjMnRhYmxlID0gW1xuICAvLyBpbkwgPT4gb3V0TFxuICAxNCwgMTEsIDE3LCA0LCAyNywgMjMsIDI1LCAwLFxuICAxMywgMjIsIDcsIDE4LCA1LCA5LCAxNiwgMjQsXG4gIDIsIDIwLCAxMiwgMjEsIDEsIDgsIDE1LCAyNixcblxuICAvLyBpblIgPT4gb3V0UlxuICAxNSwgNCwgMjUsIDE5LCA5LCAxLCAyNiwgMTYsXG4gIDUsIDExLCAyMywgOCwgMTIsIDcsIDE3LCAwLFxuICAyMiwgMywgMTAsIDE0LCA2LCAyMCwgMjcsIDI0XG5dO1xuXG5leHBvcnRzLnBjMiA9IGZ1bmN0aW9uIHBjMihpbkwsIGluUiwgb3V0LCBvZmYpIHtcbiAgdmFyIG91dEwgPSAwO1xuICB2YXIgb3V0UiA9IDA7XG5cbiAgdmFyIGxlbiA9IHBjMnRhYmxlLmxlbmd0aCA+Pj4gMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG91dEwgPDw9IDE7XG4gICAgb3V0TCB8PSAoaW5MID4+PiBwYzJ0YWJsZVtpXSkgJiAweDE7XG4gIH1cbiAgZm9yICh2YXIgaSA9IGxlbjsgaSA8IHBjMnRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0UiA8PD0gMTtcbiAgICBvdXRSIHw9IChpblIgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG5leHBvcnRzLmV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChyLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBvdXRMID0gKChyICYgMSkgPDwgNSkgfCAociA+Pj4gMjcpO1xuICBmb3IgKHZhciBpID0gMjM7IGkgPj0gMTU7IGkgLT0gNCkge1xuICAgIG91dEwgPDw9IDY7XG4gICAgb3V0TCB8PSAociA+Pj4gaSkgJiAweDNmO1xuICB9XG4gIGZvciAodmFyIGkgPSAxMTsgaSA+PSAzOyBpIC09IDQpIHtcbiAgICBvdXRSIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gICAgb3V0UiA8PD0gNjtcbiAgfVxuICBvdXRSIHw9ICgociAmIDB4MWYpIDw8IDEpIHwgKHIgPj4+IDMxKTtcblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxudmFyIHNUYWJsZSA9IFtcbiAgMTQsIDAsIDQsIDE1LCAxMywgNywgMSwgNCwgMiwgMTQsIDE1LCAyLCAxMSwgMTMsIDgsIDEsXG4gIDMsIDEwLCAxMCwgNiwgNiwgMTIsIDEyLCAxMSwgNSwgOSwgOSwgNSwgMCwgMywgNywgOCxcbiAgNCwgMTUsIDEsIDEyLCAxNCwgOCwgOCwgMiwgMTMsIDQsIDYsIDksIDIsIDEsIDExLCA3LFxuICAxNSwgNSwgMTIsIDExLCA5LCAzLCA3LCAxNCwgMywgMTAsIDEwLCAwLCA1LCA2LCAwLCAxMyxcblxuICAxNSwgMywgMSwgMTMsIDgsIDQsIDE0LCA3LCA2LCAxNSwgMTEsIDIsIDMsIDgsIDQsIDE0LFxuICA5LCAxMiwgNywgMCwgMiwgMSwgMTMsIDEwLCAxMiwgNiwgMCwgOSwgNSwgMTEsIDEwLCA1LFxuICAwLCAxMywgMTQsIDgsIDcsIDEwLCAxMSwgMSwgMTAsIDMsIDQsIDE1LCAxMywgNCwgMSwgMixcbiAgNSwgMTEsIDgsIDYsIDEyLCA3LCA2LCAxMiwgOSwgMCwgMywgNSwgMiwgMTQsIDE1LCA5LFxuXG4gIDEwLCAxMywgMCwgNywgOSwgMCwgMTQsIDksIDYsIDMsIDMsIDQsIDE1LCA2LCA1LCAxMCxcbiAgMSwgMiwgMTMsIDgsIDEyLCA1LCA3LCAxNCwgMTEsIDEyLCA0LCAxMSwgMiwgMTUsIDgsIDEsXG4gIDEzLCAxLCA2LCAxMCwgNCwgMTMsIDksIDAsIDgsIDYsIDE1LCA5LCAzLCA4LCAwLCA3LFxuICAxMSwgNCwgMSwgMTUsIDIsIDE0LCAxMiwgMywgNSwgMTEsIDEwLCA1LCAxNCwgMiwgNywgMTIsXG5cbiAgNywgMTMsIDEzLCA4LCAxNCwgMTEsIDMsIDUsIDAsIDYsIDYsIDE1LCA5LCAwLCAxMCwgMyxcbiAgMSwgNCwgMiwgNywgOCwgMiwgNSwgMTIsIDExLCAxLCAxMiwgMTAsIDQsIDE0LCAxNSwgOSxcbiAgMTAsIDMsIDYsIDE1LCA5LCAwLCAwLCA2LCAxMiwgMTAsIDExLCAxLCA3LCAxMywgMTMsIDgsXG4gIDE1LCA5LCAxLCA0LCAzLCA1LCAxNCwgMTEsIDUsIDEyLCAyLCA3LCA4LCAyLCA0LCAxNCxcblxuICAyLCAxNCwgMTIsIDExLCA0LCAyLCAxLCAxMiwgNywgNCwgMTAsIDcsIDExLCAxMywgNiwgMSxcbiAgOCwgNSwgNSwgMCwgMywgMTUsIDE1LCAxMCwgMTMsIDMsIDAsIDksIDE0LCA4LCA5LCA2LFxuICA0LCAxMSwgMiwgOCwgMSwgMTIsIDExLCA3LCAxMCwgMSwgMTMsIDE0LCA3LCAyLCA4LCAxMyxcbiAgMTUsIDYsIDksIDE1LCAxMiwgMCwgNSwgOSwgNiwgMTAsIDMsIDQsIDAsIDUsIDE0LCAzLFxuXG4gIDEyLCAxMCwgMSwgMTUsIDEwLCA0LCAxNSwgMiwgOSwgNywgMiwgMTIsIDYsIDksIDgsIDUsXG4gIDAsIDYsIDEzLCAxLCAzLCAxMywgNCwgMTQsIDE0LCAwLCA3LCAxMSwgNSwgMywgMTEsIDgsXG4gIDksIDQsIDE0LCAzLCAxNSwgMiwgNSwgMTIsIDIsIDksIDgsIDUsIDEyLCAxNSwgMywgMTAsXG4gIDcsIDExLCAwLCAxNCwgNCwgMSwgMTAsIDcsIDEsIDYsIDEzLCAwLCAxMSwgOCwgNiwgMTMsXG5cbiAgNCwgMTMsIDExLCAwLCAyLCAxMSwgMTQsIDcsIDE1LCA0LCAwLCA5LCA4LCAxLCAxMywgMTAsXG4gIDMsIDE0LCAxMiwgMywgOSwgNSwgNywgMTIsIDUsIDIsIDEwLCAxNSwgNiwgOCwgMSwgNixcbiAgMSwgNiwgNCwgMTEsIDExLCAxMywgMTMsIDgsIDEyLCAxLCAzLCA0LCA3LCAxMCwgMTQsIDcsXG4gIDEwLCA5LCAxNSwgNSwgNiwgMCwgOCwgMTUsIDAsIDE0LCA1LCAyLCA5LCAzLCAyLCAxMixcblxuICAxMywgMSwgMiwgMTUsIDgsIDEzLCA0LCA4LCA2LCAxMCwgMTUsIDMsIDExLCA3LCAxLCA0LFxuICAxMCwgMTIsIDksIDUsIDMsIDYsIDE0LCAxMSwgNSwgMCwgMCwgMTQsIDEyLCA5LCA3LCAyLFxuICA3LCAyLCAxMSwgMSwgNCwgMTQsIDEsIDcsIDksIDQsIDEyLCAxMCwgMTQsIDgsIDIsIDEzLFxuICAwLCAxNSwgNiwgMTIsIDEwLCA5LCAxMywgMCwgMTUsIDMsIDMsIDUsIDUsIDYsIDgsIDExXG5dO1xuXG5leHBvcnRzLnN1YnN0aXR1dGUgPSBmdW5jdGlvbiBzdWJzdGl0dXRlKGluTCwgaW5SKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIHZhciBiID0gKGluTCA+Pj4gKDE4IC0gaSAqIDYpKSAmIDB4M2Y7XG4gICAgdmFyIHNiID0gc1RhYmxlW2kgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5SID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbNCAqIDB4NDAgKyBpICogMHg0MCArIGJdO1xuXG4gICAgb3V0IDw8PSA0O1xuICAgIG91dCB8PSBzYjtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxudmFyIHBlcm11dGVUYWJsZSA9IFtcbiAgMTYsIDI1LCAxMiwgMTEsIDMsIDIwLCA0LCAxNSwgMzEsIDE3LCA5LCA2LCAyNywgMTQsIDEsIDIyLFxuICAzMCwgMjQsIDgsIDE4LCAwLCA1LCAyOSwgMjMsIDEzLCAxOSwgMiwgMjYsIDEwLCAyMSwgMjgsIDdcbl07XG5cbmV4cG9ydHMucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUobnVtKSB7XG4gIHZhciBvdXQgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBlcm11dGVUYWJsZS5sZW5ndGg7IGkrKykge1xuICAgIG91dCA8PD0gMTtcbiAgICBvdXQgfD0gKG51bSA+Pj4gcGVybXV0ZVRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICByZXR1cm4gb3V0ID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYWRTcGxpdCA9IGZ1bmN0aW9uIHBhZFNwbGl0KG51bSwgc2l6ZSwgZ3JvdXApIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygyKTtcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBzaXplKVxuICAgIHN0ciA9ICcwJyArIHN0cjtcblxuICB2YXIgb3V0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSBncm91cClcbiAgICBvdXQucHVzaChzdHIuc2xpY2UoaSwgaSArIGdyb3VwKSk7XG4gIHJldHVybiBvdXQuam9pbignICcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQ2lwaGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLnR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgdGhpcy5ibG9ja1NpemUgPSA4O1xuICB0aGlzLl9pbml0KCk7XG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlcjtcblxuQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkge1xuICAvLyBNaWdodCBiZSBvdmVycmlkZWRcbn07XG5cbkNpcGhlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZGVjcnlwdCcpXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRW5jcnlwdChkYXRhKTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7XG4gIC8vIEFwcGVuZCBkYXRhIHRvIGJ1ZmZlclxuICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5idWZmZXJPZmYsIGRhdGEubGVuZ3RoIC0gb2ZmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW47IGkrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZiArIGldID0gZGF0YVtvZmYgKyBpXTtcbiAgdGhpcy5idWZmZXJPZmYgKz0gbWluO1xuXG4gIC8vIFNoaWZ0IG5leHRcbiAgcmV0dXJuIG1pbjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZsdXNoQnVmZmVyID0gZnVuY3Rpb24gX2ZsdXNoQnVmZmVyKG91dCwgb2ZmKSB7XG4gIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG4gIHJldHVybiB0aGlzLmJsb2NrU2l6ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRW5jcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9ICgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgfCAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIGlmICh0aGlzLmJ1ZmZlck9mZiAhPT0gMCkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICAgIG91dHB1dE9mZiArPSB0aGlzLl9mbHVzaEJ1ZmZlcihvdXQsIG91dHB1dE9mZik7XG4gIH1cblxuICAvLyBXcml0ZSBibG9ja3NcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKChkYXRhLmxlbmd0aCAtIGlucHV0T2ZmKSAlIHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICg7IGlucHV0T2ZmIDwgbWF4OyBpbnB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpO1xuICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgfVxuXG4gIC8vIFF1ZXVlIHJlc3RcbiAgZm9yICg7IGlucHV0T2ZmIDwgZGF0YS5sZW5ndGg7IGlucHV0T2ZmKyssIHRoaXMuYnVmZmVyT2ZmKyspXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZdID0gZGF0YVtpbnB1dE9mZl07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZURlY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRGVjcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9IE1hdGguY2VpbCgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgLSAxO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIFRPRE8oaW5kdXRueSk6IG9wdGltaXplIGl0LCB0aGlzIGlzIGZhciBmcm9tIG9wdGltYWxcbiAgZm9yICg7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dFxuICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gZmluYWwoYnVmZmVyKSB7XG4gIHZhciBmaXJzdDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7XG5cbiAgdmFyIGxhc3Q7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7XG4gIGVsc2VcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7XG5cbiAgaWYgKGZpcnN0KVxuICAgIHJldHVybiBmaXJzdC5jb25jYXQobGFzdCk7XG4gIGVsc2VcbiAgICByZXR1cm4gbGFzdDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgaWYgKG9mZiA9PT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgd2hpbGUgKG9mZiA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgYnVmZmVyW29mZisrXSA9IDA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbEVuY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxFbmNyeXB0KCkge1xuICBpZiAoIXRoaXMuX3BhZCh0aGlzLmJ1ZmZlciwgdGhpcy5idWZmZXJPZmYpKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIDApO1xuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbERlY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxEZWNyeXB0KCkge1xuICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTtcbiAgdmFyIG91dCA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgMCk7XG5cbiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIHV0aWxzID0gZGVzLnV0aWxzO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG5cbmZ1bmN0aW9uIERFU1N0YXRlKCkge1xuICB0aGlzLnRtcCA9IG5ldyBBcnJheSgyKTtcbiAgdGhpcy5rZXlzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gREVTKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7XG4gIHRoaXMuX2Rlc1N0YXRlID0gc3RhdGU7XG5cbiAgdGhpcy5kZXJpdmVLZXlzKHN0YXRlLCBvcHRpb25zLmtleSk7XG59XG5pbmhlcml0cyhERVMsIENpcGhlcik7XG5tb2R1bGUuZXhwb3J0cyA9IERFUztcblxuREVTLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgREVTKG9wdGlvbnMpO1xufTtcblxudmFyIHNoaWZ0VGFibGUgPSBbXG4gIDEsIDEsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDEsIDIsIDIsIDIsIDIsIDIsIDIsIDFcbl07XG5cbkRFUy5wcm90b3R5cGUuZGVyaXZlS2V5cyA9IGZ1bmN0aW9uIGRlcml2ZUtleXMoc3RhdGUsIGtleSkge1xuICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7XG5cbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgMCk7XG4gIHZhciBrUiA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDQpO1xuXG4gIHV0aWxzLnBjMShrTCwga1IsIHN0YXRlLnRtcCwgMCk7XG4gIGtMID0gc3RhdGUudG1wWzBdO1xuICBrUiA9IHN0YXRlLnRtcFsxXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHNoaWZ0ID0gc2hpZnRUYWJsZVtpID4+PiAxXTtcbiAgICBrTCA9IHV0aWxzLnIyOHNobChrTCwgc2hpZnQpO1xuICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7XG4gICAgdXRpbHMucGMyKGtMLCBrUiwgc3RhdGUua2V5cywgaSk7XG4gIH1cbn07XG5cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7XG5cbiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7XG4gIHZhciByID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYgKyA0KTtcblxuICAvLyBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIHRoaXMuX2VuY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGVsc2VcbiAgICB0aGlzLl9kZWNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuXG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIGwsIG91dE9mZik7XG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgdmFyIHZhbHVlID0gYnVmZmVyLmxlbmd0aCAtIG9mZjtcbiAgZm9yICh2YXIgaSA9IG9mZjsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBidWZmZXJbaV0gPSB2YWx1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3VucGFkID0gZnVuY3Rpb24gX3VucGFkKGJ1ZmZlcikge1xuICB2YXIgcGFkID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXTtcbiAgZm9yICh2YXIgaSA9IGJ1ZmZlci5sZW5ndGggLSBwYWQ7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlcltpXSwgcGFkKTtcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGJ1ZmZlci5sZW5ndGggLSBwYWQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZW5jcnlwdCA9IGZ1bmN0aW9uIF9lbmNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSBsU3RhcnQ7XG4gIHZhciByID0gclN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSByO1xuICAgIHIgPSAobCBeIGYpID4+PiAwO1xuICAgIGwgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChyLCBsLCBvdXQsIG9mZik7XG59O1xuXG5ERVMucHJvdG90eXBlLl9kZWNyeXB0ID0gZnVuY3Rpb24gX2RlY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IHJTdGFydDtcbiAgdmFyIHIgPSBsU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gc3RhdGUua2V5cy5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChsLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gbDtcbiAgICBsID0gKHIgXiBmKSA+Pj4gMDtcbiAgICByID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsImV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhibG9jaylcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHJldHVybiBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgdmFyIGRhdGEgPSB4b3IoYmxvY2ssIHNlbGYuX3ByZXYpXG5cbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soZGF0YSlcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5kZWNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBwYWQgPSBzZWxmLl9wcmV2XG5cbiAgc2VsZi5fcHJldiA9IGJsb2NrXG4gIHZhciBvdXQgPSBzZWxmLl9jaXBoZXIuZGVjcnlwdEJsb2NrKGJsb2NrKVxuXG4gIHJldHVybiB4b3Iob3V0LCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZW5jcnlwdFN0YXJ0IChzZWxmLCBkYXRhLCBkZWNyeXB0KSB7XG4gIHZhciBsZW4gPSBkYXRhLmxlbmd0aFxuICB2YXIgb3V0ID0geG9yKGRhdGEsIHNlbGYuX2NhY2hlKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGxlbilcbiAgc2VsZi5fcHJldiA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX3ByZXYsIGRlY3J5cHQgPyBkYXRhIDogb3V0XSlcbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHZhciBsZW5cblxuICB3aGlsZSAoZGF0YS5sZW5ndGgpIHtcbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICAgIHNlbGYuX3ByZXYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5fY2FjaGUubGVuZ3RoIDw9IGRhdGEubGVuZ3RoKSB7XG4gICAgICBsZW4gPSBzZWxmLl9jYWNoZS5sZW5ndGhcbiAgICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW291dCwgZW5jcnlwdFN0YXJ0KHNlbGYsIGRhdGEuc2xpY2UoMCwgbGVuKSwgZGVjcnlwdCldKVxuICAgICAgZGF0YSA9IGRhdGEuc2xpY2UobGVuKVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLCBkZWNyeXB0KV0pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWQgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gIHZhciBvdXQgPSBwYWRbMF0gXiBieXRlUGFyYW1cblxuICBzZWxmLl9wcmV2ID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fcHJldi5zbGljZSgxKSxcbiAgICBCdWZmZXIuZnJvbShbZGVjcnlwdCA/IGJ5dGVQYXJhbSA6IG91dF0pXG4gIF0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBlbmNyeXB0Qnl0ZSAoc2VsZiwgYnl0ZVBhcmFtLCBkZWNyeXB0KSB7XG4gIHZhciBwYWRcbiAgdmFyIGkgPSAtMVxuICB2YXIgbGVuID0gOFxuICB2YXIgb3V0ID0gMFxuICB2YXIgYml0LCB2YWx1ZVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgcGFkID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICAgIGJpdCA9IChieXRlUGFyYW0gJiAoMSA8PCAoNyAtIGkpKSkgPyAweDgwIDogMFxuICAgIHZhbHVlID0gcGFkWzBdIF4gYml0XG4gICAgb3V0ICs9ICgodmFsdWUgJiAweDgwKSA+PiAoaSAlIDgpKVxuICAgIHNlbGYuX3ByZXYgPSBzaGlmdEluKHNlbGYuX3ByZXYsIGRlY3J5cHQgPyBiaXQgOiB2YWx1ZSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHNoaWZ0SW4gKGJ1ZmZlciwgdmFsdWUpIHtcbiAgdmFyIGxlbiA9IGJ1ZmZlci5sZW5ndGhcbiAgdmFyIGkgPSAtMVxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJ1ZmZlci5sZW5ndGgpXG4gIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlciwgQnVmZmVyLmZyb20oW3ZhbHVlXSldKVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBidWZmZXJbaV0gPDwgMSB8IGJ1ZmZlcltpICsgMV0gPj4gKDcpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG5mdW5jdGlvbiBnZXRCbG9jayAoc2VsZikge1xuICBzZWxmLl9wcmV2ID0gc2VsZi5fY2lwaGVyLmVuY3J5cHRCbG9jayhzZWxmLl9wcmV2KVxuICByZXR1cm4gc2VsZi5fcHJldlxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgd2hpbGUgKHNlbGYuX2NhY2hlLmxlbmd0aCA8IGNodW5rLmxlbmd0aCkge1xuICAgIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbc2VsZi5fY2FjaGUsIGdldEJsb2NrKHNlbGYpXSlcbiAgfVxuXG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcbnZhciBaRVJPRVMgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICByZXR1cm4gW1xuICAgIGJ1Zi5yZWFkVUludDMyQkUoMCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSg0KSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDgpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoMTIpXG4gIF1cbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5IChvdXQpIHtcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdID4+PiAwLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMV0gPj4+IDAsIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSA+Pj4gMCwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzNdID4+PiAwLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBHSEFTSCAoa2V5KSB7XG4gIHRoaXMuaCA9IGtleVxuICB0aGlzLnN0YXRlID0gQnVmZmVyLmFsbG9jKDE2LCAwKVxuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cbi8vIGZyb20gaHR0cDovL2JpdHdpc2VzaGlmdGxlZnQuZ2l0aHViLmlvL3NqY2wvZG9jL3N5bWJvbHMvc3JjL2NvcmVfZ2NtLmpzLmh0bWxcbi8vIGJ5IEp1aG8gVsOkaMOkLUhlcnR0dWFcbkdIQVNILnByb3RvdHlwZS5naGFzaCA9IGZ1bmN0aW9uIChibG9jaykge1xuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBibG9jay5sZW5ndGgpIHtcbiAgICB0aGlzLnN0YXRlW2ldIF49IGJsb2NrW2ldXG4gIH1cbiAgdGhpcy5fbXVsdGlwbHkoKVxufVxuXG5HSEFTSC5wcm90b3R5cGUuX211bHRpcGx5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgVmkgPSB0b0FycmF5KHRoaXMuaClcbiAgdmFyIFppID0gWzAsIDAsIDAsIDBdXG4gIHZhciBqLCB4aSwgbHNiVmlcbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgMTI4KSB7XG4gICAgeGkgPSAodGhpcy5zdGF0ZVt+fihpIC8gOCldICYgKDEgPDwgKDcgLSAoaSAlIDgpKSkpICE9PSAwXG4gICAgaWYgKHhpKSB7XG4gICAgICAvLyBaX2krMSA9IFpfaSBeIFZfaVxuICAgICAgWmlbMF0gXj0gVmlbMF1cbiAgICAgIFppWzFdIF49IFZpWzFdXG4gICAgICBaaVsyXSBePSBWaVsyXVxuICAgICAgWmlbM10gXj0gVmlbM11cbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgdmFsdWUgb2YgTFNCKFZfaSlcbiAgICBsc2JWaSA9IChWaVszXSAmIDEpICE9PSAwXG5cbiAgICAvLyBWX2krMSA9IFZfaSA+PiAxXG4gICAgZm9yIChqID0gMzsgaiA+IDA7IGotLSkge1xuICAgICAgVmlbal0gPSAoVmlbal0gPj4+IDEpIHwgKChWaVtqIC0gMV0gJiAxKSA8PCAzMSlcbiAgICB9XG4gICAgVmlbMF0gPSBWaVswXSA+Pj4gMVxuXG4gICAgLy8gSWYgTFNCKFZfaSkgaXMgMSwgVl9pKzEgPSAoVl9pID4+IDEpIF4gUlxuICAgIGlmIChsc2JWaSkge1xuICAgICAgVmlbMF0gPSBWaVswXSBeICgweGUxIDw8IDI0KVxuICAgIH1cbiAgfVxuICB0aGlzLnN0YXRlID0gZnJvbUFycmF5KFppKVxufVxuXG5HSEFTSC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgYnVmXSlcbiAgdmFyIGNodW5rXG4gIHdoaWxlICh0aGlzLmNhY2hlLmxlbmd0aCA+PSAxNikge1xuICAgIGNodW5rID0gdGhpcy5jYWNoZS5zbGljZSgwLCAxNilcbiAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICB0aGlzLmdoYXNoKGNodW5rKVxuICB9XG59XG5cbkdIQVNILnByb3RvdHlwZS5maW5hbCA9IGZ1bmN0aW9uIChhYmwsIGJsKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuZ2hhc2goQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgWkVST0VTXSwgMTYpKVxuICB9XG5cbiAgdGhpcy5naGFzaChmcm9tQXJyYXkoWzAsIGFibCwgMCwgYmxdKSlcbiAgcmV0dXJuIHRoaXMuc3RhdGVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHSEFTSFxuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICBpZiAocGFkZGVkIDwgMSB8fCBwYWRkZWQgPiAxNikge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGRlY3J5cHQgZGF0YScpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgcGFkZGVkKSB7XG4gICAgaWYgKGxhc3RbKGkgKyAoMTYgLSBwYWRkZWQpKV0gIT09IHBhZGRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZGVjcnlwdCBkYXRhJylcbiAgICB9XG4gIH1cbiAgaWYgKHBhZGRlZCA9PT0gMTYpIHJldHVyblxuXG4gIHJldHVybiBsYXN0LnNsaWNlKDAsIDE2IC0gcGFkZGVkKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIGl2ID09PSAnc3RyaW5nJykgaXYgPSBCdWZmZXIuZnJvbShpdilcbiAgaWYgKGNvbmZpZy5tb2RlICE9PSAnR0NNJyAmJiBpdi5sZW5ndGggIT09IGNvbmZpZy5pdikgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBpdiBsZW5ndGggJyArIGl2Lmxlbmd0aClcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYsIHRydWUpXG4gIH1cblxuICByZXR1cm4gbmV3IERlY2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdilcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGVjaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIgY29uZmlnID0gTU9ERVNbc3VpdGUudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFjb25maWcpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG5cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwgY29uZmlnLmtleSwgY29uZmlnLml2KVxuICByZXR1cm4gY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXIgPSBjcmVhdGVEZWNpcGhlclxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gY3JlYXRlRGVjaXBoZXJpdlxuIiwiZXhwb3J0c1snZGVzLWVjYiddID0ge1xuICBrZXk6IDgsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtY2JjJ10gPSBleHBvcnRzLmRlcyA9IHtcbiAga2V5OiA4LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZTMtY2JjJ10gPSBleHBvcnRzLmRlczMgPSB7XG4gIGtleTogMjQsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMyddID0ge1xuICBrZXk6IDI0LFxuICBpdjogMFxufVxuZXhwb3J0c1snZGVzLWVkZS1jYmMnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUnXSA9IHtcbiAga2V5OiAxNixcbiAgaXY6IDBcbn1cbiIsInZhciBnZW5lcmF0ZVByaW1lID0gcmVxdWlyZSgnLi9saWIvZ2VuZXJhdGVQcmltZScpXG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9saWIvcHJpbWVzLmpzb24nKVxuXG52YXIgREggPSByZXF1aXJlKCcuL2xpYi9kaCcpXG5cbmZ1bmN0aW9uIGdldERpZmZpZUhlbGxtYW4gKG1vZCkge1xuICB2YXIgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lc1ttb2RdLnByaW1lLCAnaGV4JylcbiAgdmFyIGdlbiA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0uZ2VuLCAnaGV4JylcblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW4pXG59XG5cbnZhciBFTkNPRElOR1MgPSB7XG4gICdiaW5hcnknOiB0cnVlLCAnaGV4JzogdHJ1ZSwgJ2Jhc2U2NCc6IHRydWVcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGlmZmllSGVsbG1hbiAocHJpbWUsIGVuYywgZ2VuZXJhdG9yLCBnZW5jKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZW5jKSB8fCBFTkNPRElOR1NbZW5jXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURpZmZpZUhlbGxtYW4ocHJpbWUsICdiaW5hcnknLCBlbmMsIGdlbmVyYXRvcilcbiAgfVxuXG4gIGVuYyA9IGVuYyB8fCAnYmluYXJ5J1xuICBnZW5jID0gZ2VuYyB8fCAnYmluYXJ5J1xuICBnZW5lcmF0b3IgPSBnZW5lcmF0b3IgfHwgbmV3IEJ1ZmZlcihbMl0pXG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZ2VuZXJhdG9yKSkge1xuICAgIGdlbmVyYXRvciA9IG5ldyBCdWZmZXIoZ2VuZXJhdG9yLCBnZW5jKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmltZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV3IERIKGdlbmVyYXRlUHJpbWUocHJpbWUsIGdlbmVyYXRvciksIGdlbmVyYXRvciwgdHJ1ZSlcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaW1lKSkge1xuICAgIHByaW1lID0gbmV3IEJ1ZmZlcihwcmltZSwgZW5jKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBESChwcmltZSwgZ2VuZXJhdG9yLCB0cnVlKVxufVxuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW5Hcm91cCA9IGV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5nZXREaWZmaWVIZWxsbWFuID0gZ2V0RGlmZmllSGVsbG1hblxuZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuID0gZXhwb3J0cy5EaWZmaWVIZWxsbWFuID0gY3JlYXRlRGlmZmllSGVsbG1hblxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgVFdFTlRZRk9VUiA9IG5ldyBCTigyNCk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBURU4gPSBuZXcgQk4oMTApO1xudmFyIFRIUkVFID0gbmV3IEJOKDMpO1xudmFyIFNFVkVOID0gbmV3IEJOKDcpO1xudmFyIHByaW1lcyA9IHJlcXVpcmUoJy4vZ2VuZXJhdGVQcmltZScpO1xudmFyIHJhbmRvbUJ5dGVzID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gREg7XG5cbmZ1bmN0aW9uIHNldFB1YmxpY0tleShwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwdWIpKSB7XG4gICAgcHViID0gbmV3IEJ1ZmZlcihwdWIsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHViID0gbmV3IEJOKHB1Yik7XG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzZXRQcml2YXRlS2V5KHByaXYsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYyk7XG4gIH1cbiAgdGhpcy5fcHJpdiA9IG5ldyBCTihwcml2KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbnZhciBwcmltZUNhY2hlID0ge307XG5mdW5jdGlvbiBjaGVja1ByaW1lKHByaW1lLCBnZW5lcmF0b3IpIHtcbiAgdmFyIGdlbiA9IGdlbmVyYXRvci50b1N0cmluZygnaGV4Jyk7XG4gIHZhciBoZXggPSBbZ2VuLCBwcmltZS50b1N0cmluZygxNildLmpvaW4oJ18nKTtcbiAgaWYgKGhleCBpbiBwcmltZUNhY2hlKSB7XG4gICAgcmV0dXJuIHByaW1lQ2FjaGVbaGV4XTtcbiAgfVxuICB2YXIgZXJyb3IgPSAwO1xuXG4gIGlmIChwcmltZS5pc0V2ZW4oKSB8fFxuICAgICFwcmltZXMuc2ltcGxlU2lldmUgfHxcbiAgICAhcHJpbWVzLmZlcm1hdFRlc3QocHJpbWUpIHx8XG4gICAgIW1pbGxlclJhYmluLnRlc3QocHJpbWUpKSB7XG4gICAgLy9ub3QgYSBwcmltZSBzbyArMVxuICAgIGVycm9yICs9IDE7XG5cbiAgICBpZiAoZ2VuID09PSAnMDInIHx8IGdlbiA9PT0gJzA1Jykge1xuICAgICAgLy8gd2UnZCBiZSBhYmxlIHRvIGNoZWNrIHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIGl0IHdvdWxkIGZhaWwgc28gKzhcbiAgICAgIGVycm9yICs9IDg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vd2Ugd291bGRuJ3QgYmUgYWJsZSB0byB0ZXN0IHRoZSBnZW5lcmF0b3JcbiAgICAgIC8vIHNvICs0XG4gICAgICBlcnJvciArPSA0O1xuICAgIH1cbiAgICBwcmltZUNhY2hlW2hleF0gPSBlcnJvcjtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cbiAgaWYgKCFtaWxsZXJSYWJpbi50ZXN0KHByaW1lLnNocm4oMSkpKSB7XG4gICAgLy9ub3QgYSBzYWZlIHByaW1lXG4gICAgZXJyb3IgKz0gMjtcbiAgfVxuICB2YXIgcmVtO1xuICBzd2l0Y2ggKGdlbikge1xuICAgIGNhc2UgJzAyJzpcbiAgICAgIGlmIChwcmltZS5tb2QoVFdFTlRZRk9VUikuY21wKEVMRVZFTikpIHtcbiAgICAgICAgLy8gdW5zdWlkYWJsZSBnZW5lcmF0b3JcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzA1JzpcbiAgICAgIHJlbSA9IHByaW1lLm1vZChURU4pO1xuICAgICAgaWYgKHJlbS5jbXAoVEhSRUUpICYmIHJlbS5jbXAoU0VWRU4pKSB7XG4gICAgICAgIC8vIHByaW1lIG1vZCAxMCBuZWVkcyB0byBlcXVhbCAzIG9yIDdcbiAgICAgICAgZXJyb3IgKz0gODtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBlcnJvciArPSA0O1xuICB9XG4gIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICByZXR1cm4gZXJyb3I7XG59XG5cbmZ1bmN0aW9uIERIKHByaW1lLCBnZW5lcmF0b3IsIG1hbGxlYWJsZSkge1xuICB0aGlzLnNldEdlbmVyYXRvcihnZW5lcmF0b3IpO1xuICB0aGlzLl9fcHJpbWUgPSBuZXcgQk4ocHJpbWUpO1xuICB0aGlzLl9wcmltZSA9IEJOLm1vbnQodGhpcy5fX3ByaW1lKTtcbiAgdGhpcy5fcHJpbWVMZW4gPSBwcmltZS5sZW5ndGg7XG4gIHRoaXMuX3B1YiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpdiA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fcHJpbWVDb2RlID0gdW5kZWZpbmVkO1xuICBpZiAobWFsbGVhYmxlKSB7XG4gICAgdGhpcy5zZXRQdWJsaWNLZXkgPSBzZXRQdWJsaWNLZXk7XG4gICAgdGhpcy5zZXRQcml2YXRlS2V5ID0gc2V0UHJpdmF0ZUtleTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9wcmltZUNvZGUgPSA4O1xuICB9XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoREgucHJvdG90eXBlLCAndmVyaWZ5RXJyb3InLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fcHJpbWVDb2RlICE9PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5fcHJpbWVDb2RlID0gY2hlY2tQcmltZSh0aGlzLl9fcHJpbWUsIHRoaXMuX19nZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcHJpbWVDb2RlO1xuICB9XG59KTtcbkRILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5fcHJpdikge1xuICAgIHRoaXMuX3ByaXYgPSBuZXcgQk4ocmFuZG9tQnl0ZXModGhpcy5fcHJpbWVMZW4pKTtcbiAgfVxuICB0aGlzLl9wdWIgPSB0aGlzLl9nZW4udG9SZWQodGhpcy5fcHJpbWUpLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHJldHVybiB0aGlzLmdldFB1YmxpY0tleSgpO1xufTtcblxuREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgb3RoZXIgPSBuZXcgQk4ob3RoZXIpO1xuICBvdGhlciA9IG90aGVyLnRvUmVkKHRoaXMuX3ByaW1lKTtcbiAgdmFyIHNlY3JldCA9IG90aGVyLnJlZFBvdyh0aGlzLl9wcml2KS5mcm9tUmVkKCk7XG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKHNlY3JldC50b0FycmF5KCkpO1xuICB2YXIgcHJpbWUgPSB0aGlzLmdldFByaW1lKCk7XG4gIGlmIChvdXQubGVuZ3RoIDwgcHJpbWUubGVuZ3RoKSB7XG4gICAgdmFyIGZyb250ID0gbmV3IEJ1ZmZlcihwcmltZS5sZW5ndGggLSBvdXQubGVuZ3RoKTtcbiAgICBmcm9udC5maWxsKDApO1xuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoW2Zyb250LCBvdXRdKTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIGdldFB1YmxpY0tleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3B1YiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcml2YXRlS2V5ID0gZnVuY3Rpb24gZ2V0UHJpdmF0ZUtleShlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX3ByaXYsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHJpbWUgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9fcHJpbWUsIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fZ2VuLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLnNldEdlbmVyYXRvciA9IGZ1bmN0aW9uIChnZW4sIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW4pKSB7XG4gICAgZ2VuID0gbmV3IEJ1ZmZlcihnZW4sIGVuYyk7XG4gIH1cbiAgdGhpcy5fX2dlbiA9IGdlbjtcbiAgdGhpcy5fZ2VuID0gbmV3IEJOKGdlbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYykge1xuICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihibi50b0FycmF5KCkpO1xuICBpZiAoIWVuYykge1xuICAgIHJldHVybiBidWY7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpO1xuICB9XG59XG4iLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBzdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL3NpZ24nKVxudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5JylcblxudmFyIGFsZ29yaXRobXMgPSByZXF1aXJlKCcuL2FsZ29yaXRobXMuanNvbicpXG5PYmplY3Qua2V5cyhhbGdvcml0aG1zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgYWxnb3JpdGhtc1trZXldLmlkID0gbmV3IEJ1ZmZlcihhbGdvcml0aG1zW2tleV0uaWQsICdoZXgnKVxuICBhbGdvcml0aG1zW2tleS50b0xvd2VyQ2FzZSgpXSA9IGFsZ29yaXRobXNba2V5XVxufSlcblxuZnVuY3Rpb24gU2lnbiAoYWxnb3JpdGhtKSB7XG4gIHN0cmVhbS5Xcml0YWJsZS5jYWxsKHRoaXMpXG5cbiAgdmFyIGRhdGEgPSBhbGdvcml0aG1zW2FsZ29yaXRobV1cbiAgaWYgKCFkYXRhKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbWVzc2FnZSBkaWdlc3QnKVxuXG4gIHRoaXMuX2hhc2hUeXBlID0gZGF0YS5oYXNoXG4gIHRoaXMuX2hhc2ggPSBjcmVhdGVIYXNoKGRhdGEuaGFzaClcbiAgdGhpcy5fdGFnID0gZGF0YS5pZFxuICB0aGlzLl9zaWduVHlwZSA9IGRhdGEuc2lnblxufVxuaW5oZXJpdHMoU2lnbiwgc3RyZWFtLldyaXRhYmxlKVxuXG5TaWduLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblNpZ24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoZGF0YSwgZW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuYylcblxuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICByZXR1cm4gdGhpc1xufVxuXG5TaWduLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbk1ldGhvZCAoa2V5LCBlbmMpIHtcbiAgdGhpcy5lbmQoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2hhc2guZGlnZXN0KClcbiAgdmFyIHNpZyA9IHNpZ24oaGFzaCwga2V5LCB0aGlzLl9oYXNoVHlwZSwgdGhpcy5fc2lnblR5cGUsIHRoaXMuX3RhZylcblxuICByZXR1cm4gZW5jID8gc2lnLnRvU3RyaW5nKGVuYykgOiBzaWdcbn1cblxuZnVuY3Rpb24gVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhWZXJpZnksIHN0cmVhbS5Xcml0YWJsZSlcblxuVmVyaWZ5LnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUgKGRhdGEsIF8sIGRvbmUpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgZG9uZSgpXG59XG5cblZlcmlmeS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblZlcmlmeS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5TWV0aG9kIChrZXksIHNpZywgZW5jKSB7XG4gIGlmICh0eXBlb2Ygc2lnID09PSAnc3RyaW5nJykgc2lnID0gbmV3IEJ1ZmZlcihzaWcsIGVuYylcblxuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICByZXR1cm4gdmVyaWZ5KHNpZywgaGFzaCwga2V5LCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWduIChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBTaWduKGFsZ29yaXRobSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVmVyaWZ5IChhbGdvcml0aG0pIHtcbiAgcmV0dXJuIG5ldyBWZXJpZnkoYWxnb3JpdGhtKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU2lnbjogY3JlYXRlU2lnbixcbiAgVmVyaWZ5OiBjcmVhdGVWZXJpZnksXG4gIGNyZWF0ZVNpZ246IGNyZWF0ZVNpZ24sXG4gIGNyZWF0ZVZlcmlmeTogY3JlYXRlVmVyaWZ5XG59XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgY3JlYXRlSG1hYyA9IHJlcXVpcmUoJ2NyZWF0ZS1obWFjJylcbnZhciBjcnQgPSByZXF1aXJlKCdicm93c2VyaWZ5LXJzYScpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHNpZ24gKGhhc2gsIGtleSwgaGFzaFR5cGUsIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHByaXYgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHJpdi5jdXJ2ZSkge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1NpZ24oaGFzaCwgcHJpdilcbiAgfSBlbHNlIGlmIChwcml2LnR5cGUgPT09ICdkc2EnKSB7XG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZHNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhU2lnbihoYXNoLCBwcml2LCBoYXNoVHlwZSlcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwcml2YXRlIGtleSB0eXBlJylcbiAgfVxuICBoYXNoID0gQnVmZmVyLmNvbmNhdChbdGFnLCBoYXNoXSlcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMCwgMSBdXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAxIDwgbGVuKSBwYWQucHVzaCgweGZmKVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkgcGFkLnB1c2goaGFzaFtpXSlcblxuICB2YXIgb3V0ID0gY3J0KHBhZCwgcHJpdilcbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBlY1NpZ24gKGhhc2gsIHByaXYpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHJpdi5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwcml2LmN1cnZlLmpvaW4oJy4nKSlcblxuICB2YXIgY3VydmUgPSBuZXcgRUMoY3VydmVJZClcbiAgdmFyIGtleSA9IGN1cnZlLmtleUZyb21Qcml2YXRlKHByaXYucHJpdmF0ZUtleSlcbiAgdmFyIG91dCA9IGtleS5zaWduKGhhc2gpXG5cbiAgcmV0dXJuIG5ldyBCdWZmZXIob3V0LnRvREVSKCkpXG59XG5cbmZ1bmN0aW9uIGRzYVNpZ24gKGhhc2gsIHByaXYsIGFsZ28pIHtcbiAgdmFyIHggPSBwcml2LnBhcmFtcy5wcml2X2tleVxuICB2YXIgcCA9IHByaXYucGFyYW1zLnBcbiAgdmFyIHEgPSBwcml2LnBhcmFtcy5xXG4gIHZhciBnID0gcHJpdi5wYXJhbXMuZ1xuICB2YXIgciA9IG5ldyBCTigwKVxuICB2YXIga1xuICB2YXIgSCA9IGJpdHMyaW50KGhhc2gsIHEpLm1vZChxKVxuICB2YXIgcyA9IGZhbHNlXG4gIHZhciBrdiA9IGdldEtleSh4LCBxLCBoYXNoLCBhbGdvKVxuICB3aGlsZSAocyA9PT0gZmFsc2UpIHtcbiAgICBrID0gbWFrZUtleShxLCBrdiwgYWxnbylcbiAgICByID0gbWFrZVIoZywgaywgcCwgcSlcbiAgICBzID0gay5pbnZtKHEpLmltdWwoSC5hZGQoeC5tdWwocikpKS5tb2QocSlcbiAgICBpZiAocy5jbXBuKDApID09PSAwKSB7XG4gICAgICBzID0gZmFsc2VcbiAgICAgIHIgPSBuZXcgQk4oMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvREVSKHIsIHMpXG59XG5cbmZ1bmN0aW9uIHRvREVSIChyLCBzKSB7XG4gIHIgPSByLnRvQXJyYXkoKVxuICBzID0gcy50b0FycmF5KClcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MCkgciA9IFsgMCBdLmNvbmNhdChyKVxuICBpZiAoc1swXSAmIDB4ODApIHMgPSBbIDAgXS5jb25jYXQocylcblxuICB2YXIgdG90YWwgPSByLmxlbmd0aCArIHMubGVuZ3RoICsgNFxuICB2YXIgcmVzID0gWyAweDMwLCB0b3RhbCwgMHgwMiwgci5sZW5ndGggXVxuICByZXMgPSByZXMuY29uY2F0KHIsIFsgMHgwMiwgcy5sZW5ndGggXSwgcylcbiAgcmV0dXJuIG5ldyBCdWZmZXIocmVzKVxufVxuXG5mdW5jdGlvbiBnZXRLZXkgKHgsIHEsIGhhc2gsIGFsZ28pIHtcbiAgeCA9IG5ldyBCdWZmZXIoeC50b0FycmF5KCkpXG4gIGlmICh4Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIHgubGVuZ3RoKVxuICAgIHplcm9zLmZpbGwoMClcbiAgICB4ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCB4IF0pXG4gIH1cbiAgdmFyIGhsZW4gPSBoYXNoLmxlbmd0aFxuICB2YXIgaGJpdHMgPSBiaXRzMm9jdGV0cyhoYXNoLCBxKVxuICB2YXIgdiA9IG5ldyBCdWZmZXIoaGxlbilcbiAgdi5maWxsKDEpXG4gIHZhciBrID0gbmV3IEJ1ZmZlcihobGVuKVxuICBrLmZpbGwoMClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIGsgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS51cGRhdGUobmV3IEJ1ZmZlcihbIDEgXSkpLnVwZGF0ZSh4KS51cGRhdGUoaGJpdHMpLmRpZ2VzdCgpXG4gIHYgPSBjcmVhdGVIbWFjKGFsZ28sIGspLnVwZGF0ZSh2KS5kaWdlc3QoKVxuICByZXR1cm4geyBrOiBrLCB2OiB2IH1cbn1cblxuZnVuY3Rpb24gYml0czJpbnQgKG9iaXRzLCBxKSB7XG4gIHZhciBiaXRzID0gbmV3IEJOKG9iaXRzKVxuICB2YXIgc2hpZnQgPSAob2JpdHMubGVuZ3RoIDw8IDMpIC0gcS5iaXRMZW5ndGgoKVxuICBpZiAoc2hpZnQgPiAwKSBiaXRzLmlzaHJuKHNoaWZ0KVxuICByZXR1cm4gYml0c1xufVxuXG5mdW5jdGlvbiBiaXRzMm9jdGV0cyAoYml0cywgcSkge1xuICBiaXRzID0gYml0czJpbnQoYml0cywgcSlcbiAgYml0cyA9IGJpdHMubW9kKHEpXG4gIHZhciBvdXQgPSBuZXcgQnVmZmVyKGJpdHMudG9BcnJheSgpKVxuICBpZiAob3V0Lmxlbmd0aCA8IHEuYnl0ZUxlbmd0aCgpKSB7XG4gICAgdmFyIHplcm9zID0gbmV3IEJ1ZmZlcihxLmJ5dGVMZW5ndGgoKSAtIG91dC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIG91dCA9IEJ1ZmZlci5jb25jYXQoWyB6ZXJvcywgb3V0IF0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBtYWtlS2V5IChxLCBrdiwgYWxnbykge1xuICB2YXIgdFxuICB2YXIga1xuXG4gIGRvIHtcbiAgICB0ID0gbmV3IEJ1ZmZlcigwKVxuXG4gICAgd2hpbGUgKHQubGVuZ3RoICogOCA8IHEuYml0TGVuZ3RoKCkpIHtcbiAgICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICAgICAgdCA9IEJ1ZmZlci5jb25jYXQoWyB0LCBrdi52IF0pXG4gICAgfVxuXG4gICAgayA9IGJpdHMyaW50KHQsIHEpXG4gICAga3YuayA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMCBdKSkuZGlnZXN0KClcbiAgICBrdi52ID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikuZGlnZXN0KClcbiAgfSB3aGlsZSAoay5jbXAocSkgIT09IC0xKVxuXG4gIHJldHVybiBrXG59XG5cbmZ1bmN0aW9uIG1ha2VSIChnLCBrLCBwLCBxKSB7XG4gIHJldHVybiBnLnRvUmVkKEJOLm1vbnQocCkpLnJlZFBvdyhrKS5mcm9tUmVkKCkubW9kKHEpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2lnblxubW9kdWxlLmV4cG9ydHMuZ2V0S2V5ID0gZ2V0S2V5XG5tb2R1bGUuZXhwb3J0cy5tYWtlS2V5ID0gbWFrZUtleVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSBleHBvcnRzO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBtaW5Bc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgbWluVXRpbHMgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzJyk7XG5cbnV0aWxzLmFzc2VydCA9IG1pbkFzc2VydDtcbnV0aWxzLnRvQXJyYXkgPSBtaW5VdGlscy50b0FycmF5O1xudXRpbHMuemVybzIgPSBtaW5VdGlscy56ZXJvMjtcbnV0aWxzLnRvSGV4ID0gbWluVXRpbHMudG9IZXg7XG51dGlscy5lbmNvZGUgPSBtaW5VdGlscy5lbmNvZGU7XG5cbi8vIFJlcHJlc2VudCBudW0gaW4gYSB3LU5BRiBmb3JtXG5mdW5jdGlvbiBnZXROQUYobnVtLCB3KSB7XG4gIHZhciBuYWYgPSBbXTtcbiAgdmFyIHdzID0gMSA8PCAodyArIDEpO1xuICB2YXIgayA9IG51bS5jbG9uZSgpO1xuICB3aGlsZSAoay5jbXBuKDEpID49IDApIHtcbiAgICB2YXIgejtcbiAgICBpZiAoay5pc09kZCgpKSB7XG4gICAgICB2YXIgbW9kID0gay5hbmRsbih3cyAtIDEpO1xuICAgICAgaWYgKG1vZCA+ICh3cyA+PiAxKSAtIDEpXG4gICAgICAgIHogPSAod3MgPj4gMSkgLSBtb2Q7XG4gICAgICBlbHNlXG4gICAgICAgIHogPSBtb2Q7XG4gICAgICBrLmlzdWJuKHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB6ID0gMDtcbiAgICB9XG4gICAgbmFmLnB1c2goeik7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24sIHNoaWZ0IGJ5IHdvcmQgaWYgcG9zc2libGVcbiAgICB2YXIgc2hpZnQgPSAoay5jbXBuKDApICE9PSAwICYmIGsuYW5kbG4od3MgLSAxKSA9PT0gMCkgPyAodyArIDEpIDogMTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNoaWZ0OyBpKyspXG4gICAgICBuYWYucHVzaCgwKTtcbiAgICBrLml1c2hybihzaGlmdCk7XG4gIH1cblxuICByZXR1cm4gbmFmO1xufVxudXRpbHMuZ2V0TkFGID0gZ2V0TkFGO1xuXG4vLyBSZXByZXNlbnQgazEsIGsyIGluIGEgSm9pbnQgU3BhcnNlIEZvcm1cbmZ1bmN0aW9uIGdldEpTRihrMSwgazIpIHtcbiAgdmFyIGpzZiA9IFtcbiAgICBbXSxcbiAgICBbXVxuICBdO1xuXG4gIGsxID0gazEuY2xvbmUoKTtcbiAgazIgPSBrMi5jbG9uZSgpO1xuICB2YXIgZDEgPSAwO1xuICB2YXIgZDIgPSAwO1xuICB3aGlsZSAoazEuY21wbigtZDEpID4gMCB8fCBrMi5jbXBuKC1kMikgPiAwKSB7XG5cbiAgICAvLyBGaXJzdCBwaGFzZVxuICAgIHZhciBtMTQgPSAoazEuYW5kbG4oMykgKyBkMSkgJiAzO1xuICAgIHZhciBtMjQgPSAoazIuYW5kbG4oMykgKyBkMikgJiAzO1xuICAgIGlmIChtMTQgPT09IDMpXG4gICAgICBtMTQgPSAtMTtcbiAgICBpZiAobTI0ID09PSAzKVxuICAgICAgbTI0ID0gLTE7XG4gICAgdmFyIHUxO1xuICAgIGlmICgobTE0ICYgMSkgPT09IDApIHtcbiAgICAgIHUxID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsxLmFuZGxuKDcpICsgZDEpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0yNCA9PT0gMilcbiAgICAgICAgdTEgPSAtbTE0O1xuICAgICAgZWxzZVxuICAgICAgICB1MSA9IG0xNDtcbiAgICB9XG4gICAganNmWzBdLnB1c2godTEpO1xuXG4gICAgdmFyIHUyO1xuICAgIGlmICgobTI0ICYgMSkgPT09IDApIHtcbiAgICAgIHUyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG04ID0gKGsyLmFuZGxuKDcpICsgZDIpICYgNztcbiAgICAgIGlmICgobTggPT09IDMgfHwgbTggPT09IDUpICYmIG0xNCA9PT0gMilcbiAgICAgICAgdTIgPSAtbTI0O1xuICAgICAgZWxzZVxuICAgICAgICB1MiA9IG0yNDtcbiAgICB9XG4gICAganNmWzFdLnB1c2godTIpO1xuXG4gICAgLy8gU2Vjb25kIHBoYXNlXG4gICAgaWYgKDIgKiBkMSA9PT0gdTEgKyAxKVxuICAgICAgZDEgPSAxIC0gZDE7XG4gICAgaWYgKDIgKiBkMiA9PT0gdTIgKyAxKVxuICAgICAgZDIgPSAxIC0gZDI7XG4gICAgazEuaXVzaHJuKDEpO1xuICAgIGsyLml1c2hybigxKTtcbiAgfVxuXG4gIHJldHVybiBqc2Y7XG59XG51dGlscy5nZXRKU0YgPSBnZXRKU0Y7XG5cbmZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KG9iaiwgbmFtZSwgY29tcHV0ZXIpIHtcbiAgdmFyIGtleSA9ICdfJyArIG5hbWU7XG4gIG9iai5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiBjYWNoZWRQcm9wZXJ0eSgpIHtcbiAgICByZXR1cm4gdGhpc1trZXldICE9PSB1bmRlZmluZWQgPyB0aGlzW2tleV0gOlxuICAgICAgICAgICB0aGlzW2tleV0gPSBjb21wdXRlci5jYWxsKHRoaXMpO1xuICB9O1xufVxudXRpbHMuY2FjaGVkUHJvcGVydHkgPSBjYWNoZWRQcm9wZXJ0eTtcblxuZnVuY3Rpb24gcGFyc2VCeXRlcyhieXRlcykge1xuICByZXR1cm4gdHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJyA/IHV0aWxzLnRvQXJyYXkoYnl0ZXMsICdoZXgnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXM7XG59XG51dGlscy5wYXJzZUJ5dGVzID0gcGFyc2VCeXRlcztcblxuZnVuY3Rpb24gaW50RnJvbUxFKGJ5dGVzKSB7XG4gIHJldHVybiBuZXcgQk4oYnl0ZXMsICdoZXgnLCAnbGUnKTtcbn1cbnV0aWxzLmludEZyb21MRSA9IGludEZyb21MRTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBrKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29lZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2hvcnRDdXJ2ZShjb25mKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnc2hvcnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLnRpbnYgPSB0aGlzLnR3by5yZWRJbnZtKCk7XG5cbiAgdGhpcy56ZXJvQSA9IHRoaXMuYS5mcm9tUmVkKCkuY21wbigwKSA9PT0gMDtcbiAgdGhpcy50aHJlZUEgPSB0aGlzLmEuZnJvbVJlZCgpLnN1Yih0aGlzLnApLmNtcG4oLTMpID09PSAwO1xuXG4gIC8vIElmIHRoZSBjdXJ2ZSBpcyBlbmRvbW9ycGhpYywgcHJlY2FsY3VsYXRlIGJldGEgYW5kIGxhbWJkYVxuICB0aGlzLmVuZG8gPSB0aGlzLl9nZXRFbmRvbW9ycGhpc20oY29uZik7XG4gIHRoaXMuX2VuZG9XbmFmVDEgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX2VuZG9XbmFmVDIgPSBuZXcgQXJyYXkoNCk7XG59XG5pbmhlcml0cyhTaG9ydEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gU2hvcnRDdXJ2ZTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9tb3JwaGlzbSA9IGZ1bmN0aW9uIF9nZXRFbmRvbW9ycGhpc20oY29uZikge1xuICAvLyBObyBlZmZpY2llbnQgZW5kb21vcnBoaXNtXG4gIGlmICghdGhpcy56ZXJvQSB8fCAhdGhpcy5nIHx8ICF0aGlzLm4gfHwgdGhpcy5wLm1vZG4oMykgIT09IDEpXG4gICAgcmV0dXJuO1xuXG4gIC8vIENvbXB1dGUgYmV0YSBhbmQgbGFtYmRhLCB0aGF0IGxhbWJkYSAqIFAgPSAoYmV0YSAqIFB4OyBQeSlcbiAgdmFyIGJldGE7XG4gIHZhciBsYW1iZGE7XG4gIGlmIChjb25mLmJldGEpIHtcbiAgICBiZXRhID0gbmV3IEJOKGNvbmYuYmV0YSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgYmV0YXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5wKTtcbiAgICAvLyBDaG9vc2UgdGhlIHNtYWxsZXN0IGJldGFcbiAgICBiZXRhID0gYmV0YXNbMF0uY21wKGJldGFzWzFdKSA8IDAgPyBiZXRhc1swXSA6IGJldGFzWzFdO1xuICAgIGJldGEgPSBiZXRhLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxuICBpZiAoY29uZi5sYW1iZGEpIHtcbiAgICBsYW1iZGEgPSBuZXcgQk4oY29uZi5sYW1iZGEsIDE2KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaG9vc2UgdGhlIGxhbWJkYSB0aGF0IGlzIG1hdGNoaW5nIHNlbGVjdGVkIGJldGFcbiAgICB2YXIgbGFtYmRhcyA9IHRoaXMuX2dldEVuZG9Sb290cyh0aGlzLm4pO1xuICAgIGlmICh0aGlzLmcubXVsKGxhbWJkYXNbMF0pLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhbWJkYSA9IGxhbWJkYXNbMV07XG4gICAgICBhc3NlcnQodGhpcy5nLm11bChsYW1iZGEpLnguY21wKHRoaXMuZy54LnJlZE11bChiZXRhKSkgPT09IDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdldCBiYXNpcyB2ZWN0b3JzLCB1c2VkIGZvciBiYWxhbmNlZCBsZW5ndGgtdHdvIHJlcHJlc2VudGF0aW9uXG4gIHZhciBiYXNpcztcbiAgaWYgKGNvbmYuYmFzaXMpIHtcbiAgICBiYXNpcyA9IGNvbmYuYmFzaXMubWFwKGZ1bmN0aW9uKHZlYykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYTogbmV3IEJOKHZlYy5hLCAxNiksXG4gICAgICAgIGI6IG5ldyBCTih2ZWMuYiwgMTYpXG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGJhc2lzID0gdGhpcy5fZ2V0RW5kb0Jhc2lzKGxhbWJkYSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJldGE6IGJldGEsXG4gICAgbGFtYmRhOiBsYW1iZGEsXG4gICAgYmFzaXM6IGJhc2lzXG4gIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb1Jvb3RzID0gZnVuY3Rpb24gX2dldEVuZG9Sb290cyhudW0pIHtcbiAgLy8gRmluZCByb290cyBvZiBmb3IgeF4yICsgeCArIDEgaW4gRlxuICAvLyBSb290ID0gKC0xICstIFNxcnQoLTMpKSAvIDJcbiAgLy9cbiAgdmFyIHJlZCA9IG51bSA9PT0gdGhpcy5wID8gdGhpcy5yZWQgOiBCTi5tb250KG51bSk7XG4gIHZhciB0aW52ID0gbmV3IEJOKDIpLnRvUmVkKHJlZCkucmVkSW52bSgpO1xuICB2YXIgbnRpbnYgPSB0aW52LnJlZE5lZygpO1xuXG4gIHZhciBzID0gbmV3IEJOKDMpLnRvUmVkKHJlZCkucmVkTmVnKCkucmVkU3FydCgpLnJlZE11bCh0aW52KTtcblxuICB2YXIgbDEgPSBudGludi5yZWRBZGQocykuZnJvbVJlZCgpO1xuICB2YXIgbDIgPSBudGludi5yZWRTdWIocykuZnJvbVJlZCgpO1xuICByZXR1cm4gWyBsMSwgbDIgXTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvQmFzaXMgPSBmdW5jdGlvbiBfZ2V0RW5kb0Jhc2lzKGxhbWJkYSkge1xuICAvLyBhcHJ4U3FydCA+PSBzcXJ0KHRoaXMubilcbiAgdmFyIGFwcnhTcXJ0ID0gdGhpcy5uLnVzaHJuKE1hdGguZmxvb3IodGhpcy5uLmJpdExlbmd0aCgpIC8gMikpO1xuXG4gIC8vIDMuNzRcbiAgLy8gUnVuIEVHQ0QsIHVudGlsIHIoTCArIDEpIDwgYXByeFNxcnRcbiAgdmFyIHUgPSBsYW1iZGE7XG4gIHZhciB2ID0gdGhpcy5uLmNsb25lKCk7XG4gIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgdmFyIHkxID0gbmV3IEJOKDApO1xuICB2YXIgeDIgPSBuZXcgQk4oMCk7XG4gIHZhciB5MiA9IG5ldyBCTigxKTtcblxuICAvLyBOT1RFOiBhbGwgdmVjdG9ycyBhcmUgcm9vdHMgb2Y6IGEgKyBiICogbGFtYmRhID0gMCAobW9kIG4pXG4gIHZhciBhMDtcbiAgdmFyIGIwO1xuICAvLyBGaXJzdCB2ZWN0b3JcbiAgdmFyIGExO1xuICB2YXIgYjE7XG4gIC8vIFNlY29uZCB2ZWN0b3JcbiAgdmFyIGEyO1xuICB2YXIgYjI7XG5cbiAgdmFyIHByZXZSO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB2YXIgeDtcbiAgd2hpbGUgKHUuY21wbigwKSAhPT0gMCkge1xuICAgIHZhciBxID0gdi5kaXYodSk7XG4gICAgciA9IHYuc3ViKHEubXVsKHUpKTtcbiAgICB4ID0geDIuc3ViKHEubXVsKHgxKSk7XG4gICAgdmFyIHkgPSB5Mi5zdWIocS5tdWwoeTEpKTtcblxuICAgIGlmICghYTEgJiYgci5jbXAoYXByeFNxcnQpIDwgMCkge1xuICAgICAgYTAgPSBwcmV2Ui5uZWcoKTtcbiAgICAgIGIwID0geDE7XG4gICAgICBhMSA9IHIubmVnKCk7XG4gICAgICBiMSA9IHg7XG4gICAgfSBlbHNlIGlmIChhMSAmJiArK2kgPT09IDIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwcmV2UiA9IHI7XG5cbiAgICB2ID0gdTtcbiAgICB1ID0gcjtcbiAgICB4MiA9IHgxO1xuICAgIHgxID0geDtcbiAgICB5MiA9IHkxO1xuICAgIHkxID0geTtcbiAgfVxuICBhMiA9IHIubmVnKCk7XG4gIGIyID0geDtcblxuICB2YXIgbGVuMSA9IGExLnNxcigpLmFkZChiMS5zcXIoKSk7XG4gIHZhciBsZW4yID0gYTIuc3FyKCkuYWRkKGIyLnNxcigpKTtcbiAgaWYgKGxlbjIuY21wKGxlbjEpID49IDApIHtcbiAgICBhMiA9IGEwO1xuICAgIGIyID0gYjA7XG4gIH1cblxuICAvLyBOb3JtYWxpemUgc2lnbnNcbiAgaWYgKGExLm5lZ2F0aXZlKSB7XG4gICAgYTEgPSBhMS5uZWcoKTtcbiAgICBiMSA9IGIxLm5lZygpO1xuICB9XG4gIGlmIChhMi5uZWdhdGl2ZSkge1xuICAgIGEyID0gYTIubmVnKCk7XG4gICAgYjIgPSBiMi5uZWcoKTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgeyBhOiBhMSwgYjogYjEgfSxcbiAgICB7IGE6IGEyLCBiOiBiMiB9XG4gIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1NwbGl0ID0gZnVuY3Rpb24gX2VuZG9TcGxpdChrKSB7XG4gIHZhciBiYXNpcyA9IHRoaXMuZW5kby5iYXNpcztcbiAgdmFyIHYxID0gYmFzaXNbMF07XG4gIHZhciB2MiA9IGJhc2lzWzFdO1xuXG4gIHZhciBjMSA9IHYyLmIubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG4gIHZhciBjMiA9IHYxLmIubmVnKCkubXVsKGspLmRpdlJvdW5kKHRoaXMubik7XG5cbiAgdmFyIHAxID0gYzEubXVsKHYxLmEpO1xuICB2YXIgcDIgPSBjMi5tdWwodjIuYSk7XG4gIHZhciBxMSA9IGMxLm11bCh2MS5iKTtcbiAgdmFyIHEyID0gYzIubXVsKHYyLmIpO1xuXG4gIC8vIENhbGN1bGF0ZSBhbnN3ZXJcbiAgdmFyIGsxID0gay5zdWIocDEpLnN1YihwMik7XG4gIHZhciBrMiA9IHExLmFkZChxMikubmVnKCk7XG4gIHJldHVybiB7IGsxOiBrMSwgazI6IGsyIH07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB5MiA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoeC5yZWRNdWwodGhpcy5hKSkucmVkSUFkZCh0aGlzLmIpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICAvLyBYWFggSXMgdGhlcmUgYW55IHdheSB0byB0ZWxsIGlmIHRoZSBudW1iZXIgaXMgb2RkIHdpdGhvdXQgY29udmVydGluZyBpdFxuICAvLyB0byBub24tcmVkIGZvcm0/XG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHBvaW50KSB7XG4gIGlmIChwb2ludC5pbmYpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHggPSBwb2ludC54O1xuICB2YXIgeSA9IHBvaW50Lnk7XG5cbiAgdmFyIGF4ID0gdGhpcy5hLnJlZE11bCh4KTtcbiAgdmFyIHJocyA9IHgucmVkU3FyKCkucmVkTXVsKHgpLnJlZElBZGQoYXgpLnJlZElBZGQodGhpcy5iKTtcbiAgcmV0dXJuIHkucmVkU3FyKCkucmVkSVN1YihyaHMpLmNtcG4oMCkgPT09IDA7XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZW5kb1duYWZNdWxBZGQgPVxuICAgIGZ1bmN0aW9uIF9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgamFjb2JpYW5SZXN1bHQpIHtcbiAgdmFyIG5wb2ludHMgPSB0aGlzLl9lbmRvV25hZlQxO1xuICB2YXIgbmNvZWZmcyA9IHRoaXMuX2VuZG9XbmFmVDI7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwbGl0ID0gdGhpcy5fZW5kb1NwbGl0KGNvZWZmc1tpXSk7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIGJldGEgPSBwLl9nZXRCZXRhKCk7XG5cbiAgICBpZiAoc3BsaXQuazEubmVnYXRpdmUpIHtcbiAgICAgIHNwbGl0LmsxLmluZWcoKTtcbiAgICAgIHAgPSBwLm5lZyh0cnVlKTtcbiAgICB9XG4gICAgaWYgKHNwbGl0LmsyLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMi5pbmVnKCk7XG4gICAgICBiZXRhID0gYmV0YS5uZWcodHJ1ZSk7XG4gICAgfVxuXG4gICAgbnBvaW50c1tpICogMl0gPSBwO1xuICAgIG5wb2ludHNbaSAqIDIgKyAxXSA9IGJldGE7XG4gICAgbmNvZWZmc1tpICogMl0gPSBzcGxpdC5rMTtcbiAgICBuY29lZmZzW2kgKiAyICsgMV0gPSBzcGxpdC5rMjtcbiAgfVxuICB2YXIgcmVzID0gdGhpcy5fd25hZk11bEFkZCgxLCBucG9pbnRzLCBuY29lZmZzLCBpICogMiwgamFjb2JpYW5SZXN1bHQpO1xuXG4gIC8vIENsZWFuLXVwIHJlZmVyZW5jZXMgdG8gcG9pbnRzIGFuZCBjb2VmZmljaWVudHNcbiAgZm9yICh2YXIgaiA9IDA7IGogPCBpICogMjsgaisrKSB7XG4gICAgbnBvaW50c1tqXSA9IG51bGw7XG4gICAgbmNvZWZmc1tqXSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCBpc1JlZCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnYWZmaW5lJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSBudWxsO1xuICAgIHRoaXMueSA9IG51bGw7XG4gICAgdGhpcy5pbmYgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICAvLyBGb3JjZSByZWRnb21lcnkgcmVwcmVzZW50YXRpb24gd2hlbiBsb2FkaW5nIGZyb20gSlNPTlxuICAgIGlmIChpc1JlZCkge1xuICAgICAgdGhpcy54LmZvcmNlUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICAgIHRoaXMueS5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICB0aGlzLmluZiA9IGZhbHNlO1xuICB9XG59XG5pbmhlcml0cyhQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIGlzUmVkKSB7XG4gIHJldHVybiBuZXcgUG9pbnQodGhpcywgeCwgeSwgaXNSZWQpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqLCByZWQpIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaiwgcmVkKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZ2V0QmV0YSA9IGZ1bmN0aW9uIF9nZXRCZXRhKCkge1xuICBpZiAoIXRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm47XG5cbiAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gIGlmIChwcmUgJiYgcHJlLmJldGEpXG4gICAgcmV0dXJuIHByZS5iZXRhO1xuXG4gIHZhciBiZXRhID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTXVsKHRoaXMuY3VydmUuZW5kby5iZXRhKSwgdGhpcy55KTtcbiAgaWYgKHByZSkge1xuICAgIHZhciBjdXJ2ZSA9IHRoaXMuY3VydmU7XG4gICAgdmFyIGVuZG9NdWwgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gY3VydmUucG9pbnQocC54LnJlZE11bChjdXJ2ZS5lbmRvLmJldGEpLCBwLnkpO1xuICAgIH07XG4gICAgcHJlLmJldGEgPSBiZXRhO1xuICAgIGJldGEucHJlY29tcHV0ZWQgPSB7XG4gICAgICBiZXRhOiBudWxsLFxuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChlbmRvTXVsKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJldGE7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnkgXTtcblxuICByZXR1cm4gWyB0aGlzLngsIHRoaXMueSwgdGhpcy5wcmVjb21wdXRlZCAmJiB7XG4gICAgZG91YmxlczogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHRoaXMucHJlY29tcHV0ZWQuZG91Ymxlcy5zdGVwLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMucG9pbnRzLnNsaWNlKDEpXG4gICAgfSxcbiAgICBuYWY6IHRoaXMucHJlY29tcHV0ZWQubmFmICYmIHtcbiAgICAgIHduZDogdGhpcy5wcmVjb21wdXRlZC5uYWYud25kLFxuICAgICAgcG9pbnRzOiB0aGlzLnByZWNvbXB1dGVkLm5hZi5wb2ludHMuc2xpY2UoMSlcbiAgICB9XG4gIH0gXTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaiwgcmVkKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJylcbiAgICBvYmogPSBKU09OLnBhcnNlKG9iaik7XG4gIHZhciByZXMgPSBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgaWYgKCFvYmpbMl0pXG4gICAgcmV0dXJuIHJlcztcblxuICBmdW5jdGlvbiBvYmoycG9pbnQob2JqKSB7XG4gICAgcmV0dXJuIGN1cnZlLnBvaW50KG9ialswXSwgb2JqWzFdLCByZWQpO1xuICB9XG5cbiAgdmFyIHByZSA9IG9ialsyXTtcbiAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgIGJldGE6IG51bGwsXG4gICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogWyByZXMgXS5jb25jYXQocHJlLmRvdWJsZXMucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH0sXG4gICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5uYWYucG9pbnRzLm1hcChvYmoycG9pbnQpKVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHJlcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgcmV0dXJuIHRoaXMuaW5mO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBQICsgUCA9IDJQXG4gIGlmICh0aGlzLmVxKHApKVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIC8vIFAgKyAoLVApID0gT1xuICBpZiAodGhpcy5uZWcoKS5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICAvLyBQICsgUSA9IE9cbiAgaWYgKHRoaXMueC5jbXAocC54KSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYyA9IHRoaXMueS5yZWRTdWIocC55KTtcbiAgaWYgKGMuY21wbigwKSAhPT0gMClcbiAgICBjID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihwLngpLnJlZEludm0oKSk7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0aGlzLngpLnJlZElTdWIocC54KTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAyUCA9IE9cbiAgdmFyIHlzMSA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgaWYgKHlzMS5jbXBuKDApID09PSAwKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG51bGwsIG51bGwpO1xuXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuXG4gIHZhciB4MiA9IHRoaXMueC5yZWRTcXIoKTtcbiAgdmFyIGR5aW52ID0geXMxLnJlZEludm0oKTtcbiAgdmFyIGMgPSB4Mi5yZWRBZGQoeDIpLnJlZElBZGQoeDIpLnJlZElBZGQoYSkucmVkTXVsKGR5aW52KTtcblxuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54LnJlZEFkZCh0aGlzLngpKTtcbiAgdmFyIG55ID0gYy5yZWRNdWwodGhpcy54LnJlZFN1YihueCkpLnJlZElTdWIodGhpcy55KTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGsgPSBuZXcgQk4oaywgMTYpO1xuXG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChbIHRoaXMgXSwgWyBrIF0pO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwMiwgazIpIHtcbiAgdmFyIHBvaW50cyA9IFsgdGhpcywgcDIgXTtcbiAgdmFyIGNvZWZmcyA9IFsgazEsIGsyIF07XG4gIGlmICh0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2VuZG9XbmFmTXVsQWRkKHBvaW50cywgY29lZmZzKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsQWRkKDEsIHBvaW50cywgY29lZmZzLCAyKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcywgdHJ1ZSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIHJldHVybiB0aGlzID09PSBwIHx8XG4gICAgICAgICB0aGlzLmluZiA9PT0gcC5pbmYgJiZcbiAgICAgICAgICAgICAodGhpcy5pbmYgfHwgdGhpcy54LmNtcChwLngpID09PSAwICYmIHRoaXMueS5jbXAocC55KSA9PT0gMCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKF9wcmVjb21wdXRlKSB7XG4gIGlmICh0aGlzLmluZilcbiAgICByZXR1cm4gdGhpcztcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngsIHRoaXMueS5yZWROZWcoKSk7XG4gIGlmIChfcHJlY29tcHV0ZSAmJiB0aGlzLnByZWNvbXB1dGVkKSB7XG4gICAgdmFyIHByZSA9IHRoaXMucHJlY29tcHV0ZWQ7XG4gICAgdmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uKHApIHtcbiAgICAgIHJldHVybiBwLm5lZygpO1xuICAgIH07XG4gICAgcmVzLnByZWNvbXB1dGVkID0ge1xuICAgICAgbmFmOiBwcmUubmFmICYmIHtcbiAgICAgICAgd25kOiBwcmUubmFmLnduZCxcbiAgICAgICAgcG9pbnRzOiBwcmUubmFmLnBvaW50cy5tYXAobmVnYXRlKVxuICAgICAgfSxcbiAgICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgICAgc3RlcDogcHJlLmRvdWJsZXMuc3RlcCxcbiAgICAgICAgcG9pbnRzOiBwcmUuZG91Ymxlcy5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUudG9KID0gZnVuY3Rpb24gdG9KKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuXG4gIHZhciByZXMgPSB0aGlzLmN1cnZlLmpwb2ludCh0aGlzLngsIHRoaXMueSwgdGhpcy5jdXJ2ZS5vbmUpO1xuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gSlBvaW50KGN1cnZlLCB4LCB5LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdqYWNvYmlhbicpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSBuZXcgQk4oMCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IG5ldyBCTih6LCAxNik7XG4gIH1cbiAgaWYgKCF0aGlzLngucmVkKVxuICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIGlmICghdGhpcy55LnJlZClcbiAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMuei5yZWQpXG4gICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcblxuICB0aGlzLnpPbmUgPSB0aGlzLnogPT09IHRoaXMuY3VydmUub25lO1xufVxuaW5oZXJpdHMoSlBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6KSB7XG4gIHJldHVybiBuZXcgSlBvaW50KHRoaXMsIHgsIHksIHopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50b1AgPSBmdW5jdGlvbiB0b1AoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgemludiA9IHRoaXMuei5yZWRJbnZtKCk7XG4gIHZhciB6aW52MiA9IHppbnYucmVkU3FyKCk7XG4gIHZhciBheCA9IHRoaXMueC5yZWRNdWwoemludjIpO1xuICB2YXIgYXkgPSB0aGlzLnkucmVkTXVsKHppbnYyKS5yZWRNdWwoemludik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQoYXgsIGF5KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCksIHRoaXMueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZChwKSB7XG4gIC8vIE8gKyBQID0gUFxuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG5cbiAgLy8gUCArIE8gPSBQXG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyAxMk0gKyA0UyArIDdBXG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54LnJlZE11bChwejIpO1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55LnJlZE11bChwejIucmVkTXVsKHAueikpO1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyLnJlZE11bCh0aGlzLnopKTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChwLnopLnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gZnVuY3Rpb24gbWl4ZWRBZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwLnRvSigpO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gOE0gKyAzUyArIDdBXG4gIHZhciB6MiA9IHRoaXMuei5yZWRTcXIoKTtcbiAgdmFyIHUxID0gdGhpcy54O1xuICB2YXIgdTIgPSBwLngucmVkTXVsKHoyKTtcbiAgdmFyIHMxID0gdGhpcy55O1xuICB2YXIgczIgPSBwLnkucmVkTXVsKHoyKS5yZWRNdWwodGhpcy56KTtcblxuICB2YXIgaCA9IHUxLnJlZFN1Yih1Mik7XG4gIHZhciByID0gczEucmVkU3ViKHMyKTtcbiAgaWYgKGguY21wbigwKSA9PT0gMCkge1xuICAgIGlmIChyLmNtcG4oMCkgIT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMuZGJsKCk7XG4gIH1cblxuICB2YXIgaDIgPSBoLnJlZFNxcigpO1xuICB2YXIgaDMgPSBoMi5yZWRNdWwoaCk7XG4gIHZhciB2ID0gdTEucmVkTXVsKGgyKTtcblxuICB2YXIgbnggPSByLnJlZFNxcigpLnJlZElBZGQoaDMpLnJlZElTdWIodikucmVkSVN1Yih2KTtcbiAgdmFyIG55ID0gci5yZWRNdWwodi5yZWRJU3ViKG54KSkucmVkSVN1YihzMS5yZWRNdWwoaDMpKTtcbiAgdmFyIG56ID0gdGhpcy56LnJlZE11bChoKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibHAgPSBmdW5jdGlvbiBkYmxwKHBvdykge1xuICBpZiAocG93ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG4gIGlmICghcG93KVxuICAgIHJldHVybiB0aGlzLmRibCgpO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BIHx8IHRoaXMuY3VydmUudGhyZWVBKSB7XG4gICAgdmFyIHIgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG93OyBpKyspXG4gICAgICByID0gci5kYmwoKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIC8vIDFNICsgMlMgKyAxQSArIE4gKiAoNFMgKyA1TSArIDhBKVxuICAvLyBOID0gMSA9PiA2TSArIDZTICsgOUFcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG4gIHZhciB0aW52ID0gdGhpcy5jdXJ2ZS50aW52O1xuXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICAvLyBSZXVzZSByZXN1bHRzXG4gIHZhciBqeWQgPSBqeS5yZWRBZGQoankpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKSB7XG4gICAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICAgIHZhciBqeWQyID0ganlkLnJlZFNxcigpO1xuICAgIHZhciBqeWQ0ID0ganlkMi5yZWRTcXIoKTtcbiAgICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICAgIHZhciB0MSA9IGp4LnJlZE11bChqeWQyKTtcbiAgICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gICAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG4gICAgdmFyIGRueSA9IGMucmVkTXVsKHQyKTtcbiAgICBkbnkgPSBkbnkucmVkSUFkZChkbnkpLnJlZElTdWIoanlkNCk7XG4gICAgdmFyIG56ID0ganlkLnJlZE11bChqeik7XG4gICAgaWYgKGkgKyAxIDwgcG93KVxuICAgICAgano0ID0gano0LnJlZE11bChqeWQ0KTtcblxuICAgIGp4ID0gbng7XG4gICAganogPSBuejtcbiAgICBqeWQgPSBkbnk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQoangsIGp5ZC5yZWRNdWwodGludiksIGp6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuemVyb0EpXG4gICAgcmV0dXJuIHRoaXMuX3plcm9EYmwoKTtcbiAgZWxzZSBpZiAodGhpcy5jdXJ2ZS50aHJlZUEpXG4gICAgcmV0dXJuIHRoaXMuX3RocmVlRGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fZGJsKCk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl96ZXJvRGJsID0gZnVuY3Rpb24gX3plcm9EYmwoKSB7XG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIC8vIFogPSAxXG4gIGlmICh0aGlzLnpPbmUpIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctbWRibC0yMDA3LWJsXG4gICAgLy8gMU0gKyA1UyArIDE0QVxuXG4gICAgLy8gWFggPSBYMV4yXG4gICAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAgIC8vIFlZID0gWTFeMlxuICAgIHZhciB5eSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBZWVlZID0gWVleMlxuICAgIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gICAgLy8gUyA9IDIgKiAoKFgxICsgWVkpXjIgLSBYWCAtIFlZWVkpXG4gICAgdmFyIHMgPSB0aGlzLngucmVkQWRkKHl5KS5yZWRTcXIoKS5yZWRJU3ViKHh4KS5yZWRJU3ViKHl5eXkpO1xuICAgIHMgPSBzLnJlZElBZGQocyk7XG4gICAgLy8gTSA9IDMgKiBYWCArIGE7IGEgPSAwXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAgIC8vIFQgPSBNIF4gMiAtIDIqU1xuICAgIHZhciB0ID0gbS5yZWRTcXIoKS5yZWRJU3ViKHMpLnJlZElTdWIocyk7XG5cbiAgICAvLyA4ICogWVlZWVxuICAgIHZhciB5eXl5OCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG5cbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgbnkgPSBtLnJlZE11bChzLnJlZElTdWIodCkpLnJlZElTdWIoeXl5eTgpO1xuICAgIC8vIFozID0gMipZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMC5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOS1sXG4gICAgLy8gMk0gKyA1UyArIDEzQVxuXG4gICAgLy8gQSA9IFgxXjJcbiAgICB2YXIgYSA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBCID0gWTFeMlxuICAgIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIEMgPSBCXjJcbiAgICB2YXIgYyA9IGIucmVkU3FyKCk7XG4gICAgLy8gRCA9IDIgKiAoKFgxICsgQileMiAtIEEgLSBDKVxuICAgIHZhciBkID0gdGhpcy54LnJlZEFkZChiKS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYyk7XG4gICAgZCA9IGQucmVkSUFkZChkKTtcbiAgICAvLyBFID0gMyAqIEFcbiAgICB2YXIgZSA9IGEucmVkQWRkKGEpLnJlZElBZGQoYSk7XG4gICAgLy8gRiA9IEVeMlxuICAgIHZhciBmID0gZS5yZWRTcXIoKTtcblxuICAgIC8vIDggKiBDXG4gICAgdmFyIGM4ID0gYy5yZWRJQWRkKGMpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG4gICAgYzggPSBjOC5yZWRJQWRkKGM4KTtcblxuICAgIC8vIFgzID0gRiAtIDIgKiBEXG4gICAgbnggPSBmLnJlZElTdWIoZCkucmVkSVN1YihkKTtcbiAgICAvLyBZMyA9IEUgKiAoRCAtIFgzKSAtIDggKiBDXG4gICAgbnkgPSBlLnJlZE11bChkLnJlZElTdWIobngpKS5yZWRJU3ViKGM4KTtcbiAgICAvLyBaMyA9IDIgKiBZMSAqIFoxXG4gICAgbnogPSB0aGlzLnkucmVkTXVsKHRoaXMueik7XG4gICAgbnogPSBuei5yZWRJQWRkKG56KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuX3RocmVlRGJsID0gZnVuY3Rpb24gX3RocmVlRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0zLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNUFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhXG4gICAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpLnJlZElBZGQodGhpcy5jdXJ2ZS5hKTtcbiAgICAvLyBUID0gTV4yIC0gMiAqIFNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuICAgIC8vIFgzID0gVFxuICAgIG54ID0gdDtcbiAgICAvLyBZMyA9IE0gKiAoUyAtIFQpIC0gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIgKiBZMVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnkpO1xuICB9IGVsc2Uge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sI2RvdWJsaW5nLWRibC0yMDAxLWJcbiAgICAvLyAzTSArIDVTXG5cbiAgICAvLyBkZWx0YSA9IFoxXjJcbiAgICB2YXIgZGVsdGEgPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgLy8gZ2FtbWEgPSBZMV4yXG4gICAgdmFyIGdhbW1hID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIGJldGEgPSBYMSAqIGdhbW1hXG4gICAgdmFyIGJldGEgPSB0aGlzLngucmVkTXVsKGdhbW1hKTtcbiAgICAvLyBhbHBoYSA9IDMgKiAoWDEgLSBkZWx0YSkgKiAoWDEgKyBkZWx0YSlcbiAgICB2YXIgYWxwaGEgPSB0aGlzLngucmVkU3ViKGRlbHRhKS5yZWRNdWwodGhpcy54LnJlZEFkZChkZWx0YSkpO1xuICAgIGFscGhhID0gYWxwaGEucmVkQWRkKGFscGhhKS5yZWRJQWRkKGFscGhhKTtcbiAgICAvLyBYMyA9IGFscGhhXjIgLSA4ICogYmV0YVxuICAgIHZhciBiZXRhNCA9IGJldGEucmVkSUFkZChiZXRhKTtcbiAgICBiZXRhNCA9IGJldGE0LnJlZElBZGQoYmV0YTQpO1xuICAgIHZhciBiZXRhOCA9IGJldGE0LnJlZEFkZChiZXRhNCk7XG4gICAgbnggPSBhbHBoYS5yZWRTcXIoKS5yZWRJU3ViKGJldGE4KTtcbiAgICAvLyBaMyA9IChZMSArIFoxKV4yIC0gZ2FtbWEgLSBkZWx0YVxuICAgIG56ID0gdGhpcy55LnJlZEFkZCh0aGlzLnopLnJlZFNxcigpLnJlZElTdWIoZ2FtbWEpLnJlZElTdWIoZGVsdGEpO1xuICAgIC8vIFkzID0gYWxwaGEgKiAoNCAqIGJldGEgLSBYMykgLSA4ICogZ2FtbWFeMlxuICAgIHZhciBnZ2FtbWE4ID0gZ2FtbWEucmVkU3FyKCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgbnkgPSBhbHBoYS5yZWRNdWwoYmV0YTQucmVkSVN1YihueCkpLnJlZElTdWIoZ2dhbW1hOCk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl9kYmwgPSBmdW5jdGlvbiBfZGJsKCkge1xuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICAvLyA0TSArIDZTICsgMTBBXG4gIHZhciBqeCA9IHRoaXMueDtcbiAgdmFyIGp5ID0gdGhpcy55O1xuICB2YXIganogPSB0aGlzLno7XG4gIHZhciBqejQgPSBqei5yZWRTcXIoKS5yZWRTcXIoKTtcblxuICB2YXIgangyID0gangucmVkU3FyKCk7XG4gIHZhciBqeTIgPSBqeS5yZWRTcXIoKTtcblxuICB2YXIgYyA9IGp4Mi5yZWRBZGQoangyKS5yZWRJQWRkKGp4MikucmVkSUFkZChhLnJlZE11bChqejQpKTtcblxuICB2YXIganhkNCA9IGp4LnJlZEFkZChqeCk7XG4gIGp4ZDQgPSBqeGQ0LnJlZElBZGQoanhkNCk7XG4gIHZhciB0MSA9IGp4ZDQucmVkTXVsKGp5Mik7XG4gIHZhciBueCA9IGMucmVkU3FyKCkucmVkSVN1Yih0MS5yZWRBZGQodDEpKTtcbiAgdmFyIHQyID0gdDEucmVkSVN1YihueCk7XG5cbiAgdmFyIGp5ZDggPSBqeTIucmVkU3FyKCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIGp5ZDggPSBqeWQ4LnJlZElBZGQoanlkOCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHQyKS5yZWRJU3ViKGp5ZDgpO1xuICB2YXIgbnogPSBqeS5yZWRBZGQoankpLnJlZE11bChqeik7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS50cnBsID0gZnVuY3Rpb24gdHJwbCgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLmRibCgpLmFkZCh0aGlzKTtcblxuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbCN0cmlwbGluZy10cGwtMjAwNy1ibFxuICAvLyA1TSArIDEwUyArIC4uLlxuXG4gIC8vIFhYID0gWDFeMlxuICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIFlZID0gWTFeMlxuICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gIC8vIFpaID0gWjFeMlxuICB2YXIgenogPSB0aGlzLnoucmVkU3FyKCk7XG4gIC8vIFlZWVkgPSBZWV4yXG4gIHZhciB5eXl5ID0geXkucmVkU3FyKCk7XG4gIC8vIE0gPSAzICogWFggKyBhICogWloyOyBhID0gMFxuICB2YXIgbSA9IHh4LnJlZEFkZCh4eCkucmVkSUFkZCh4eCk7XG4gIC8vIE1NID0gTV4yXG4gIHZhciBtbSA9IG0ucmVkU3FyKCk7XG4gIC8vIEUgPSA2ICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKSAtIE1NXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgZSA9IGUucmVkSUFkZChlKTtcbiAgZSA9IGUucmVkQWRkKGUpLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZElTdWIobW0pO1xuICAvLyBFRSA9IEVeMlxuICB2YXIgZWUgPSBlLnJlZFNxcigpO1xuICAvLyBUID0gMTYqWVlZWVxuICB2YXIgdCA9IHl5eXkucmVkSUFkZCh5eXl5KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgdCA9IHQucmVkSUFkZCh0KTtcbiAgLy8gVSA9IChNICsgRSleMiAtIE1NIC0gRUUgLSBUXG4gIHZhciB1ID0gbS5yZWRJQWRkKGUpLnJlZFNxcigpLnJlZElTdWIobW0pLnJlZElTdWIoZWUpLnJlZElTdWIodCk7XG4gIC8vIFgzID0gNCAqIChYMSAqIEVFIC0gNCAqIFlZICogVSlcbiAgdmFyIHl5dTQgPSB5eS5yZWRNdWwodSk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHl5dTQgPSB5eXU0LnJlZElBZGQoeXl1NCk7XG4gIHZhciBueCA9IHRoaXMueC5yZWRNdWwoZWUpLnJlZElTdWIoeXl1NCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIG54ID0gbngucmVkSUFkZChueCk7XG4gIC8vIFkzID0gOCAqIFkxICogKFUgKiAoVCAtIFUpIC0gRSAqIEVFKVxuICB2YXIgbnkgPSB0aGlzLnkucmVkTXVsKHUucmVkTXVsKHQucmVkSVN1Yih1KSkucmVkSVN1YihlLnJlZE11bChlZSkpKTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgbnkgPSBueS5yZWRJQWRkKG55KTtcbiAgLy8gWjMgPSAoWjEgKyBFKV4yIC0gWlogLSBFRVxuICB2YXIgbnogPSB0aGlzLnoucmVkQWRkKGUpLnJlZFNxcigpLnJlZElTdWIoenopLnJlZElTdWIoZWUpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGssIGtiYXNlKSB7XG4gIGsgPSBuZXcgQk4oaywga2Jhc2UpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKHApIHtcbiAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgcmV0dXJuIHRoaXMuZXEocC50b0ooKSk7XG5cbiAgaWYgKHRoaXMgPT09IHApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgLy8geDEgKiB6Ml4yID09IHgyICogejFeMlxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciBwejIgPSBwLnoucmVkU3FyKCk7XG4gIGlmICh0aGlzLngucmVkTXVsKHB6MikucmVkSVN1YihwLngucmVkTXVsKHoyKSkuY21wbigwKSAhPT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8geTEgKiB6Ml4zID09IHkyICogejFeM1xuICB2YXIgejMgPSB6Mi5yZWRNdWwodGhpcy56KTtcbiAgdmFyIHB6MyA9IHB6Mi5yZWRNdWwocC56KTtcbiAgcmV0dXJuIHRoaXMueS5yZWRNdWwocHozKS5yZWRJU3ViKHAueS5yZWRNdWwoejMpKS5jbXBuKDApID09PSAwO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgenMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciByeCA9IHgudG9SZWQodGhpcy5jdXJ2ZS5yZWQpLnJlZE11bCh6cyk7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh6cyk7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IGN1cnZlLmJhc2U7XG5cbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcblxuZnVuY3Rpb24gTW9udEN1cnZlKGNvbmYpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdtb250JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5pNCA9IG5ldyBCTig0KS50b1JlZCh0aGlzLnJlZCkucmVkSW52bSgpO1xuICB0aGlzLnR3byA9IG5ldyBCTigyKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYTI0ID0gdGhpcy5pNC5yZWRNdWwodGhpcy5hLnJlZEFkZCh0aGlzLnR3bykpO1xufVxuaW5oZXJpdHMoTW9udEN1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gTW9udEN1cnZlO1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgdmFyIHggPSBwb2ludC5ub3JtYWxpemUoKS54O1xuICB2YXIgeDIgPSB4LnJlZFNxcigpO1xuICB2YXIgcmhzID0geDIucmVkTXVsKHgpLnJlZEFkZCh4Mi5yZWRNdWwodGhpcy5hKSkucmVkQWRkKHgpO1xuICB2YXIgeSA9IHJocy5yZWRTcXJ0KCk7XG5cbiAgcmV0dXJuIHkucmVkU3FyKCkuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy56ID0gbmV3IEJOKHosIDE2KTtcbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUuZGVjb2RlUG9pbnQgPSBmdW5jdGlvbiBkZWNvZGVQb2ludChieXRlcywgZW5jKSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyksIDEpO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHopIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB6KTtcbn07XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKCkge1xuICAvLyBOby1vcFxufTtcblxuUG9pbnQucHJvdG90eXBlLl9lbmNvZGUgPSBmdW5jdGlvbiBfZW5jb2RlKCkge1xuICByZXR1cm4gdGhpcy5nZXRYKCkudG9BcnJheSgnYmUnLCB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpKTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSB8fCBjdXJ2ZS5vbmUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkb3VibGluZy1kYmwtMTk4Ny1tLTNcbiAgLy8gMk0gKyAyUyArIDRBXG5cbiAgLy8gQSA9IFgxICsgWjFcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEFBID0gQV4yXG4gIHZhciBhYSA9IGEucmVkU3FyKCk7XG4gIC8vIEIgPSBYMSAtIFoxXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBCQiA9IEJeMlxuICB2YXIgYmIgPSBiLnJlZFNxcigpO1xuICAvLyBDID0gQUEgLSBCQlxuICB2YXIgYyA9IGFhLnJlZFN1YihiYik7XG4gIC8vIFgzID0gQUEgKiBCQlxuICB2YXIgbnggPSBhYS5yZWRNdWwoYmIpO1xuICAvLyBaMyA9IEMgKiAoQkIgKyBBMjQgKiBDKVxuICB2YXIgbnogPSBjLnJlZE11bChiYi5yZWRBZGQodGhpcy5jdXJ2ZS5hMjQucmVkTXVsKGMpKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRpZmZBZGQgPSBmdW5jdGlvbiBkaWZmQWRkKHAsIGRpZmYpIHtcbiAgLy8gaHR0cDovL2h5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1tb250Z29tLXh6Lmh0bWwjZGlmZmFkZC1kYWRkLTE5ODctbS0zXG4gIC8vIDRNICsgMlMgKyA2QVxuXG4gIC8vIEEgPSBYMiArIFoyXG4gIHZhciBhID0gdGhpcy54LnJlZEFkZCh0aGlzLnopO1xuICAvLyBCID0gWDIgLSBaMlxuICB2YXIgYiA9IHRoaXMueC5yZWRTdWIodGhpcy56KTtcbiAgLy8gQyA9IFgzICsgWjNcbiAgdmFyIGMgPSBwLngucmVkQWRkKHAueik7XG4gIC8vIEQgPSBYMyAtIFozXG4gIHZhciBkID0gcC54LnJlZFN1YihwLnopO1xuICAvLyBEQSA9IEQgKiBBXG4gIHZhciBkYSA9IGQucmVkTXVsKGEpO1xuICAvLyBDQiA9IEMgKiBCXG4gIHZhciBjYiA9IGMucmVkTXVsKGIpO1xuICAvLyBYNSA9IFoxICogKERBICsgQ0IpXjJcbiAgdmFyIG54ID0gZGlmZi56LnJlZE11bChkYS5yZWRBZGQoY2IpLnJlZFNxcigpKTtcbiAgLy8gWjUgPSBYMSAqIChEQSAtIENCKV4yXG4gIHZhciBueiA9IGRpZmYueC5yZWRNdWwoZGEucmVkSVN1YihjYikucmVkU3FyKCkpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIHZhciB0ID0gay5jbG9uZSgpO1xuICB2YXIgYSA9IHRoaXM7IC8vIChOIC8gMikgKiBRICsgUVxuICB2YXIgYiA9IHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7IC8vIChOIC8gMikgKiBRXG4gIHZhciBjID0gdGhpczsgLy8gUVxuXG4gIGZvciAodmFyIGJpdHMgPSBbXTsgdC5jbXBuKDApICE9PSAwOyB0Lml1c2hybigxKSlcbiAgICBiaXRzLnB1c2godC5hbmRsbigxKSk7XG5cbiAgZm9yICh2YXIgaSA9IGJpdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoYml0c1tpXSA9PT0gMCkge1xuICAgICAgLy8gTiAqIFEgKyBRID0gKChOIC8gMikgKiBRICsgUSkpICsgKE4gLyAyKSAqIFFcbiAgICAgIGEgPSBhLmRpZmZBZGQoYiwgYyk7XG4gICAgICAvLyBOICogUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKSlcbiAgICAgIGIgPSBiLmRibCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOICogUSA9ICgoTiAvIDIpICogUSArIFEpICsgKChOIC8gMikgKiBRKVxuICAgICAgYiA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRICsgUSA9IDIgKiAoKE4gLyAyKSAqIFEgKyBRKVxuICAgICAgYSA9IGEuZGJsKCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qdW1sQWRkID0gZnVuY3Rpb24ganVtbEFkZCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3Qgc3VwcG9ydGVkIG9uIE1vbnRnb21lcnkgY3VydmUnKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gIHRoaXMueCA9IHRoaXMueC5yZWRNdWwodGhpcy56LnJlZEludm0oKSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgLy8gTm9ybWFsaXplIGNvb3JkaW5hdGVzXG4gIHRoaXMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmUgPSByZXF1aXJlKCcuLi9jdXJ2ZScpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xudmFyIEJhc2UgPSBjdXJ2ZS5iYXNlO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBFZHdhcmRzQ3VydmUoY29uZikge1xuICAvLyBOT1RFOiBJbXBvcnRhbnQgYXMgd2UgYXJlIGNyZWF0aW5nIHBvaW50IGluIEJhc2UuY2FsbCgpXG4gIHRoaXMudHdpc3RlZCA9IChjb25mLmEgfCAwKSAhPT0gMTtcbiAgdGhpcy5tT25lQSA9IHRoaXMudHdpc3RlZCAmJiAoY29uZi5hIHwgMCkgPT09IC0xO1xuICB0aGlzLmV4dGVuZGVkID0gdGhpcy5tT25lQTtcblxuICBCYXNlLmNhbGwodGhpcywgJ2Vkd2FyZHMnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudW1vZCh0aGlzLnJlZC5tKTtcbiAgdGhpcy5hID0gdGhpcy5hLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jID0gbmV3IEJOKGNvbmYuYywgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5jMiA9IHRoaXMuYy5yZWRTcXIoKTtcbiAgdGhpcy5kID0gbmV3IEJOKGNvbmYuZCwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5kZCA9IHRoaXMuZC5yZWRBZGQodGhpcy5kKTtcblxuICBhc3NlcnQoIXRoaXMudHdpc3RlZCB8fCB0aGlzLmMuZnJvbVJlZCgpLmNtcG4oMSkgPT09IDApO1xuICB0aGlzLm9uZUMgPSAoY29uZi5jIHwgMCkgPT09IDE7XG59XG5pbmhlcml0cyhFZHdhcmRzQ3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBFZHdhcmRzQ3VydmU7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuX211bEEgPSBmdW5jdGlvbiBfbXVsQShudW0pIHtcbiAgaWYgKHRoaXMubU9uZUEpXG4gICAgcmV0dXJuIG51bS5yZWROZWcoKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmEucmVkTXVsKG51bSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxDID0gZnVuY3Rpb24gX211bEMobnVtKSB7XG4gIGlmICh0aGlzLm9uZUMpXG4gICAgcmV0dXJuIG51bTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmMucmVkTXVsKG51bSk7XG59O1xuXG4vLyBKdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggU2hvcnQgY3VydmVcbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUuanBvaW50ID0gZnVuY3Rpb24ganBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSwgeiwgdCk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVggPSBmdW5jdGlvbiBwb2ludEZyb21YKHgsIG9kZCkge1xuICB4ID0gbmV3IEJOKHgsIDE2KTtcbiAgaWYgKCF4LnJlZClcbiAgICB4ID0geC50b1JlZCh0aGlzLnJlZCk7XG5cbiAgdmFyIHgyID0geC5yZWRTcXIoKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkU3ViKHRoaXMuYS5yZWRNdWwoeDIpKTtcbiAgdmFyIGxocyA9IHRoaXMub25lLnJlZFN1Yih0aGlzLmMyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh4MikpO1xuXG4gIHZhciB5MiA9IHJocy5yZWRNdWwobGhzLnJlZEludm0oKSk7XG4gIHZhciB5ID0geTIucmVkU3FydCgpO1xuICBpZiAoeS5yZWRTcXIoKS5yZWRTdWIoeTIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIHZhciBpc09kZCA9IHkuZnJvbVJlZCgpLmlzT2RkKCk7XG4gIGlmIChvZGQgJiYgIWlzT2RkIHx8ICFvZGQgJiYgaXNPZGQpXG4gICAgeSA9IHkucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50RnJvbVkgPSBmdW5jdGlvbiBwb2ludEZyb21ZKHksIG9kZCkge1xuICB5ID0gbmV3IEJOKHksIDE2KTtcbiAgaWYgKCF5LnJlZClcbiAgICB5ID0geS50b1JlZCh0aGlzLnJlZCk7XG5cbiAgLy8geF4yID0gKHleMiAtIGNeMikgLyAoY14yIGQgeV4yIC0gYSlcbiAgdmFyIHkyID0geS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHkyLnJlZFN1Yih0aGlzLmMyKTtcbiAgdmFyIHJocyA9IHkyLnJlZE11bCh0aGlzLmQpLnJlZE11bCh0aGlzLmMyKS5yZWRTdWIodGhpcy5hKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmZyb21SZWQoKS5pc09kZCgpICE9PSBvZGQpXG4gICAgeCA9IHgucmVkTmVnKCk7XG5cbiAgcmV0dXJuIHRoaXMucG9pbnQoeCwgeSk7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUocG9pbnQpIHtcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICAvLyBDdXJ2ZTogQSAqIFheMiArIFleMiA9IENeMiAqICgxICsgRCAqIFheMiAqIFleMilcbiAgcG9pbnQubm9ybWFsaXplKCk7XG5cbiAgdmFyIHgyID0gcG9pbnQueC5yZWRTcXIoKTtcbiAgdmFyIHkyID0gcG9pbnQueS5yZWRTcXIoKTtcbiAgdmFyIGxocyA9IHgyLnJlZE11bCh0aGlzLmEpLnJlZEFkZCh5Mik7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZE11bCh0aGlzLm9uZS5yZWRBZGQodGhpcy5kLnJlZE11bCh4MikucmVkTXVsKHkyKSkpO1xuXG4gIHJldHVybiBsaHMuY21wKHJocykgPT09IDA7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgeiwgdCkge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAncHJvamVjdGl2ZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdGhpcy5jdXJ2ZS56ZXJvO1xuICAgIHRoaXMuek9uZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnkgPSBuZXcgQk4oeSwgMTYpO1xuICAgIHRoaXMueiA9IHogPyBuZXcgQk4oeiwgMTYpIDogdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy50ID0gdCAmJiBuZXcgQk4odCwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnkucmVkKVxuICAgICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMuei5yZWQpXG4gICAgICB0aGlzLnogPSB0aGlzLnoudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICh0aGlzLnQgJiYgIXRoaXMudC5yZWQpXG4gICAgICB0aGlzLnQgPSB0aGlzLnQudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIHRoaXMuek9uZSA9IHRoaXMueiA9PT0gdGhpcy5jdXJ2ZS5vbmU7XG5cbiAgICAvLyBVc2UgZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZCAmJiAhdGhpcy50KSB7XG4gICAgICB0aGlzLnQgPSB0aGlzLngucmVkTXVsKHRoaXMueSk7XG4gICAgICBpZiAoIXRoaXMuek9uZSlcbiAgICAgICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgICB9XG4gIH1cbn1cbmluaGVyaXRzKFBvaW50LCBCYXNlLkJhc2VQb2ludCk7XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tSlNPTiA9IGZ1bmN0aW9uIHBvaW50RnJvbUpTT04ob2JqKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmopO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uIHBvaW50KHgsIHksIHosIHQpIHtcbiAgcmV0dXJuIG5ldyBQb2ludCh0aGlzLCB4LCB5LCB6LCB0KTtcbn07XG5cblBvaW50LmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04oY3VydmUsIG9iaikge1xuICByZXR1cm4gbmV3IFBvaW50KGN1cnZlLCBvYmpbMF0sIG9ialsxXSwgb2JqWzJdKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiAnPEVDIFBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIFBvaW50IHg6ICcgKyB0aGlzLnguZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHo6ICcgKyB0aGlzLnouZnJvbVJlZCgpLnRvU3RyaW5nKDE2LCAyKSArICc+Jztcbn07XG5cblBvaW50LnByb3RvdHlwZS5pc0luZmluaXR5ID0gZnVuY3Rpb24gaXNJbmZpbml0eSgpIHtcbiAgLy8gWFhYIFRoaXMgY29kZSBhc3N1bWVzIHRoYXQgemVybyBpcyBhbHdheXMgemVybyBpbiByZWRcbiAgcmV0dXJuIHRoaXMueC5jbXBuKDApID09PSAwICYmXG4gICAgKHRoaXMueS5jbXAodGhpcy56KSA9PT0gMCB8fFxuICAgICh0aGlzLnpPbmUgJiYgdGhpcy55LmNtcCh0aGlzLmN1cnZlLmMpID09PSAwKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2V4dERibCA9IGZ1bmN0aW9uIF9leHREYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWh3Y2RcbiAgLy8gNE0gKyA0U1xuXG4gIC8vIEEgPSBYMV4yXG4gIHZhciBhID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBCID0gWTFeMlxuICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgLy8gQyA9IDIgKiBaMV4yXG4gIHZhciBjID0gdGhpcy56LnJlZFNxcigpO1xuICBjID0gYy5yZWRJQWRkKGMpO1xuICAvLyBEID0gYSAqIEFcbiAgdmFyIGQgPSB0aGlzLmN1cnZlLl9tdWxBKGEpO1xuICAvLyBFID0gKFgxICsgWTEpXjIgLSBBIC0gQlxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKS5yZWRJU3ViKGEpLnJlZElTdWIoYik7XG4gIC8vIEcgPSBEICsgQlxuICB2YXIgZyA9IGQucmVkQWRkKGIpO1xuICAvLyBGID0gRyAtIENcbiAgdmFyIGYgPSBnLnJlZFN1YihjKTtcbiAgLy8gSCA9IEQgLSBCXG4gIHZhciBoID0gZC5yZWRTdWIoYik7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakRibCA9IGZ1bmN0aW9uIF9wcm9qRGJsKCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNkb3VibGluZy1kYmwtMjAwOC1iYmpscFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA3LWJsXG4gIC8vIGFuZCBvdGhlcnNcbiAgLy8gR2VuZXJhbGx5IDNNICsgNFMgb3IgMk0gKyA0U1xuXG4gIC8vIEIgPSAoWDEgKyBZMSleMlxuICB2YXIgYiA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxXjJcbiAgdmFyIGMgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEQgPSBZMV4yXG4gIHZhciBkID0gdGhpcy55LnJlZFNxcigpO1xuXG4gIHZhciBueDtcbiAgdmFyIG55O1xuICB2YXIgbno7XG4gIGlmICh0aGlzLmN1cnZlLnR3aXN0ZWQpIHtcbiAgICAvLyBFID0gYSAqIENcbiAgICB2YXIgZSA9IHRoaXMuY3VydmUuX211bEEoYyk7XG4gICAgLy8gRiA9IEUgKyBEXG4gICAgdmFyIGYgPSBlLnJlZEFkZChkKTtcbiAgICBpZiAodGhpcy56T25lKSB7XG4gICAgICAvLyBYMyA9IChCIC0gQyAtIEQpICogKEYgLSAyKVxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRTdWIoZCkucmVkTXVsKGYucmVkU3ViKHRoaXMuY3VydmUudHdvKSk7XG4gICAgICAvLyBZMyA9IEYgKiAoRSAtIEQpXG4gICAgICBueSA9IGYucmVkTXVsKGUucmVkU3ViKGQpKTtcbiAgICAgIC8vIFozID0gRl4yIC0gMiAqIEZcbiAgICAgIG56ID0gZi5yZWRTcXIoKS5yZWRTdWIoZikucmVkU3ViKGYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIID0gWjFeMlxuICAgICAgdmFyIGggPSB0aGlzLnoucmVkU3FyKCk7XG4gICAgICAvLyBKID0gRiAtIDIgKiBIXG4gICAgICB2YXIgaiA9IGYucmVkU3ViKGgpLnJlZElTdWIoaCk7XG4gICAgICAvLyBYMyA9IChCLUMtRCkqSlxuICAgICAgbnggPSBiLnJlZFN1YihjKS5yZWRJU3ViKGQpLnJlZE11bChqKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGICogSlxuICAgICAgbnogPSBmLnJlZE11bChqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRSA9IEMgKyBEXG4gICAgdmFyIGUgPSBjLnJlZEFkZChkKTtcbiAgICAvLyBIID0gKGMgKiBaMSleMlxuICAgIHZhciBoID0gdGhpcy5jdXJ2ZS5fbXVsQyh0aGlzLnopLnJlZFNxcigpO1xuICAgIC8vIEogPSBFIC0gMiAqIEhcbiAgICB2YXIgaiA9IGUucmVkU3ViKGgpLnJlZFN1YihoKTtcbiAgICAvLyBYMyA9IGMgKiAoQiAtIEUpICogSlxuICAgIG54ID0gdGhpcy5jdXJ2ZS5fbXVsQyhiLnJlZElTdWIoZSkpLnJlZE11bChqKTtcbiAgICAvLyBZMyA9IGMgKiBFICogKEMgLSBEKVxuICAgIG55ID0gdGhpcy5jdXJ2ZS5fbXVsQyhlKS5yZWRNdWwoYy5yZWRJU3ViKGQpKTtcbiAgICAvLyBaMyA9IEUgKiBKXG4gICAgbnogPSBlLnJlZE11bChqKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBEb3VibGUgaW4gZXh0ZW5kZWQgY29vcmRpbmF0ZXNcbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dERibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pEYmwoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0QWRkID0gZnVuY3Rpb24gX2V4dEFkZChwKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLWV4dGVuZGVkLTEuaHRtbFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA4LWh3Y2QtM1xuICAvLyA4TVxuXG4gIC8vIEEgPSAoWTEgLSBYMSkgKiAoWTIgLSBYMilcbiAgdmFyIGEgPSB0aGlzLnkucmVkU3ViKHRoaXMueCkucmVkTXVsKHAueS5yZWRTdWIocC54KSk7XG4gIC8vIEIgPSAoWTEgKyBYMSkgKiAoWTIgKyBYMilcbiAgdmFyIGIgPSB0aGlzLnkucmVkQWRkKHRoaXMueCkucmVkTXVsKHAueS5yZWRBZGQocC54KSk7XG4gIC8vIEMgPSBUMSAqIGsgKiBUMlxuICB2YXIgYyA9IHRoaXMudC5yZWRNdWwodGhpcy5jdXJ2ZS5kZCkucmVkTXVsKHAudCk7XG4gIC8vIEQgPSBaMSAqIDIgKiBaMlxuICB2YXIgZCA9IHRoaXMuei5yZWRNdWwocC56LnJlZEFkZChwLnopKTtcbiAgLy8gRSA9IEIgLSBBXG4gIHZhciBlID0gYi5yZWRTdWIoYSk7XG4gIC8vIEYgPSBEIC0gQ1xuICB2YXIgZiA9IGQucmVkU3ViKGMpO1xuICAvLyBHID0gRCArIENcbiAgdmFyIGcgPSBkLnJlZEFkZChjKTtcbiAgLy8gSCA9IEIgKyBBXG4gIHZhciBoID0gYi5yZWRBZGQoYSk7XG4gIC8vIFgzID0gRSAqIEZcbiAgdmFyIG54ID0gZS5yZWRNdWwoZik7XG4gIC8vIFkzID0gRyAqIEhcbiAgdmFyIG55ID0gZy5yZWRNdWwoaCk7XG4gIC8vIFQzID0gRSAqIEhcbiAgdmFyIG50ID0gZS5yZWRNdWwoaCk7XG4gIC8vIFozID0gRiAqIEdcbiAgdmFyIG56ID0gZi5yZWRNdWwoZyk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnosIG50KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fcHJvakFkZCA9IGZ1bmN0aW9uIF9wcm9qQWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtcHJvamVjdGl2ZS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtYmJqbHBcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwNy1ibFxuICAvLyAxME0gKyAxU1xuXG4gIC8vIEEgPSBaMSAqIFoyXG4gIHZhciBhID0gdGhpcy56LnJlZE11bChwLnopO1xuICAvLyBCID0gQV4yXG4gIHZhciBiID0gYS5yZWRTcXIoKTtcbiAgLy8gQyA9IFgxICogWDJcbiAgdmFyIGMgPSB0aGlzLngucmVkTXVsKHAueCk7XG4gIC8vIEQgPSBZMSAqIFkyXG4gIHZhciBkID0gdGhpcy55LnJlZE11bChwLnkpO1xuICAvLyBFID0gZCAqIEMgKiBEXG4gIHZhciBlID0gdGhpcy5jdXJ2ZS5kLnJlZE11bChjKS5yZWRNdWwoZCk7XG4gIC8vIEYgPSBCIC0gRVxuICB2YXIgZiA9IGIucmVkU3ViKGUpO1xuICAvLyBHID0gQiArIEVcbiAgdmFyIGcgPSBiLnJlZEFkZChlKTtcbiAgLy8gWDMgPSBBICogRiAqICgoWDEgKyBZMSkgKiAoWDIgKyBZMikgLSBDIC0gRClcbiAgdmFyIHRtcCA9IHRoaXMueC5yZWRBZGQodGhpcy55KS5yZWRNdWwocC54LnJlZEFkZChwLnkpKS5yZWRJU3ViKGMpLnJlZElTdWIoZCk7XG4gIHZhciBueCA9IGEucmVkTXVsKGYpLnJlZE11bCh0bXApO1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIGEgKiBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKHRoaXMuY3VydmUuX211bEEoYykpKTtcbiAgICAvLyBaMyA9IEYgKiBHXG4gICAgbnogPSBmLnJlZE11bChnKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBZMyA9IEEgKiBHICogKEQgLSBDKVxuICAgIG55ID0gYS5yZWRNdWwoZykucmVkTXVsKGQucmVkU3ViKGMpKTtcbiAgICAvLyBaMyA9IGMgKiBGICogR1xuICAgIG56ID0gdGhpcy5jdXJ2ZS5fbXVsQyhmKS5yZWRNdWwoZyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkKHApIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgaWYgKHRoaXMuY3VydmUuZXh0ZW5kZWQpXG4gICAgcmV0dXJuIHRoaXMuX2V4dEFkZChwKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLl9wcm9qQWRkKHApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrKSB7XG4gIGlmICh0aGlzLl9oYXNEb3VibGVzKGspKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9maXhlZE5hZk11bCh0aGlzLCBrKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIGZhbHNlKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5qbXVsQWRkID0gZnVuY3Rpb24gam11bEFkZChrMSwgcCwgazIpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgWyB0aGlzLCBwIF0sIFsgazEsIGsyIF0sIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgaWYgKHRoaXMuek9uZSlcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdmFyIHppID0gdGhpcy56LnJlZEludm0oKTtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh6aSk7XG4gIHRoaXMueSA9IHRoaXMueS5yZWRNdWwoemkpO1xuICBpZiAodGhpcy50KVxuICAgIHRoaXMudCA9IHRoaXMudC5yZWRNdWwoemkpO1xuICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgdGhpcy56T25lID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnKCkge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludCh0aGlzLngucmVkTmVnKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnQgJiYgdGhpcy50LnJlZE5lZygpKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRYID0gZnVuY3Rpb24gZ2V0WCgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueC5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WSA9IGZ1bmN0aW9uIGdldFkoKSB7XG4gIHRoaXMubm9ybWFsaXplKCk7XG4gIHJldHVybiB0aGlzLnkuZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT09IG90aGVyIHx8XG4gICAgICAgICB0aGlzLmdldFgoKS5jbXAob3RoZXIuZ2V0WCgpKSA9PT0gMCAmJlxuICAgICAgICAgdGhpcy5nZXRZKCkuY21wKG90aGVyLmdldFkoKSkgPT09IDA7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHJ4ID0geC50b1JlZCh0aGlzLmN1cnZlLnJlZCkucmVkTXVsKHRoaXMueik7XG4gIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICByZXR1cm4gdHJ1ZTtcblxuICB2YXIgeGMgPSB4LmNsb25lKCk7XG4gIHZhciB0ID0gdGhpcy5jdXJ2ZS5yZWROLnJlZE11bCh0aGlzLnopO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gQ29tcGF0aWJpbGl0eSB3aXRoIEJhc2VDdXJ2ZVxuUG9pbnQucHJvdG90eXBlLnRvUCA9IFBvaW50LnByb3RvdHlwZS5ub3JtYWxpemU7XG5Qb2ludC5wcm90b3R5cGUubWl4ZWRBZGQgPSBQb2ludC5wcm90b3R5cGUuYWRkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi9lbGxpcHRpYycpO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5kZWZpbmVDdXJ2ZSgncDE5MicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMTkyJyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyJyxcbiAgICAnMDcxOTJiOTUgZmZjOGRhNzggNjMxMDExZWQgNmIyNGNkZDUgNzNmOTc3YTEgMWU3OTQ4MTEnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AzODQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJyxcbiAgYjogJ2IzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmICcgK1xuICAgICAnNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWYnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgJyArXG4gICAgICdmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycsXG4gIGhhc2g6IGhhc2guc2hhMzg0LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCAnICtcbiAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnLFxuICAgICczNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICtcbiAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7XG4gIHR5cGU6ICdlZHdhcmRzJyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICctMScsXG4gIGM6ICcxJyxcbiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKVxuICBkOiAnNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhMycsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzIxNjkzNmQzY2Q2ZTUzZmVjMGE0ZTIzMWZkZDZkYzVjNjkyY2M3NjA5NTI1YTdiMmM5NTYyZDYwOGYyNWQ1MWEnLFxuXG4gICAgLy8gNC81XG4gICAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXG4gIF1cbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gcmVxdWlyZSgnLi9wcmVjb21wdXRlZC9zZWNwMjU2azEnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMydcbiAgICB9LFxuICAgIHtcbiAgICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLFxuICAgICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1J1xuICAgIH1cbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlXG4gIF1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7XG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhLzIyNCcpO1xuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYS8yNTYnKTtcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7XG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhLzUxMicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTFfSyA9IFtcbiAgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSxcbiAgMHg4RjFCQkNEQywgMHhDQTYyQzFENlxuXTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg4MCk7XG59XG5cbnV0aWxzLmluaGVyaXRzKFNIQTEsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIFNIQTI1NiA9IHJlcXVpcmUoJy4vMjU2Jyk7XG5cbmZ1bmN0aW9uIFNIQTIyNCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpXG4gICAgcmV0dXJuIG5ldyBTSEEyMjQoKTtcblxuICBTSEEyNTYuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIFNIQTUxMiA9IHJlcXVpcmUoJy4vNTEyJyk7XG5cbmZ1bmN0aW9uIFNIQTM4NCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTM4NCkpXG4gICAgcmV0dXJuIG5ldyBTSEEzODQoKTtcblxuICBTSEE1MTIuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4Y2JiYjlkNWQsIDB4YzEwNTllZDgsXG4gICAgMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyxcbiAgICAweDkxNTkwMTVhLCAweDMwNzBkZDE3LFxuICAgIDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzksXG4gICAgMHg2NzMzMjY2NywgMHhmZmMwMGIzMSxcbiAgICAweDhlYjQ0YTg3LCAweDY4NTgxNTExLFxuICAgIDB4ZGIwYzJlMGQsIDB4NjRmOThmYTcsXG4gICAgMHg0N2I1NDgxZCwgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMzg0LCBTSEE1MTIpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEzODQ7XG5cblNIQTM4NC5ibG9ja1NpemUgPSAxMDI0O1xuU0hBMzg0Lm91dFNpemUgPSAzODQ7XG5TSEEzODQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMzg0LnBhZExlbmd0aCA9IDEyODtcblxuU0hBMzg0LnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgMTIpLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgY29tbW9uID0gcmVxdWlyZSgnLi9jb21tb24nKTtcblxudmFyIHJvdGwzMiA9IHV0aWxzLnJvdGwzMjtcbnZhciBzdW0zMiA9IHV0aWxzLnN1bTMyO1xudmFyIHN1bTMyXzMgPSB1dGlscy5zdW0zMl8zO1xudmFyIHN1bTMyXzQgPSB1dGlscy5zdW0zMl80O1xudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJJUEVNRDE2MCkpXG4gICAgcmV0dXJuIG5ldyBSSVBFTUQxNjAoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcblxuICB0aGlzLmggPSBbIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjAgXTtcbiAgdGhpcy5lbmRpYW4gPSAnbGl0dGxlJztcbn1cbnV0aWxzLmluaGVyaXRzKFJJUEVNRDE2MCwgQmxvY2tIYXNoKTtcbmV4cG9ydHMucmlwZW1kMTYwID0gUklQRU1EMTYwO1xuXG5SSVBFTUQxNjAuYmxvY2tTaXplID0gNTEyO1xuUklQRU1EMTYwLm91dFNpemUgPSAxNjA7XG5SSVBFTUQxNjAuaG1hY1N0cmVuZ3RoID0gMTkyO1xuUklQRU1EMTYwLnBhZExlbmd0aCA9IDY0O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBzdGFydCkge1xuICB2YXIgQSA9IHRoaXMuaFswXTtcbiAgdmFyIEIgPSB0aGlzLmhbMV07XG4gIHZhciBDID0gdGhpcy5oWzJdO1xuICB2YXIgRCA9IHRoaXMuaFszXTtcbiAgdmFyIEUgPSB0aGlzLmhbNF07XG4gIHZhciBBaCA9IEE7XG4gIHZhciBCaCA9IEI7XG4gIHZhciBDaCA9IEM7XG4gIHZhciBEaCA9IEQ7XG4gIHZhciBFaCA9IEU7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgODA7IGorKykge1xuICAgIHZhciBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQSwgZihqLCBCLCBDLCBEKSwgbXNnW3Jbal0gKyBzdGFydF0sIEsoaikpLFxuICAgICAgICBzW2pdKSxcbiAgICAgIEUpO1xuICAgIEEgPSBFO1xuICAgIEUgPSBEO1xuICAgIEQgPSByb3RsMzIoQywgMTApO1xuICAgIEMgPSBCO1xuICAgIEIgPSBUO1xuICAgIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBaCwgZig3OSAtIGosIEJoLCBDaCwgRGgpLCBtc2dbcmhbal0gKyBzdGFydF0sIEtoKGopKSxcbiAgICAgICAgc2hbal0pLFxuICAgICAgRWgpO1xuICAgIEFoID0gRWg7XG4gICAgRWggPSBEaDtcbiAgICBEaCA9IHJvdGwzMihDaCwgMTApO1xuICAgIENoID0gQmg7XG4gICAgQmggPSBUO1xuICB9XG4gIFQgPSBzdW0zMl8zKHRoaXMuaFsxXSwgQywgRGgpO1xuICB0aGlzLmhbMV0gPSBzdW0zMl8zKHRoaXMuaFsyXSwgRCwgRWgpO1xuICB0aGlzLmhbMl0gPSBzdW0zMl8zKHRoaXMuaFszXSwgRSwgQWgpO1xuICB0aGlzLmhbM10gPSBzdW0zMl8zKHRoaXMuaFs0XSwgQSwgQmgpO1xuICB0aGlzLmhbNF0gPSBzdW0zMl8zKHRoaXMuaFswXSwgQiwgQ2gpO1xuICB0aGlzLmhbMF0gPSBUO1xufTtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdsaXR0bGUnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xufTtcblxuZnVuY3Rpb24gZihqLCB4LCB5LCB6KSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiB4IF4geSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuICh4ICYgeSkgfCAoKH54KSAmIHopO1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAoeCB8ICh+eSkpIF4gejtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gKHggJiB6KSB8ICh5ICYgKH56KSk7XG4gIGVsc2VcbiAgICByZXR1cm4geCBeICh5IHwgKH56KSk7XG59XG5cbmZ1bmN0aW9uIEsoaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YTgyNzk5OTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZWQ5ZWJhMTtcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg4ZjFiYmNkYztcbiAgZWxzZVxuICAgIHJldHVybiAweGE5NTNmZDRlO1xufVxuXG5mdW5jdGlvbiBLaChqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDUwYTI4YmU2O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVjNGRkMTI0O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZkNzAzZWYzO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDdhNmQ3NmU5O1xuICBlbHNlXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG59XG5cbnZhciByID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxuICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxuICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxuICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxuICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXG5dO1xuXG52YXIgcmggPSBbXG4gIDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTIsXG4gIDYsIDExLCAzLCA3LCAwLCAxMywgNSwgMTAsIDE0LCAxNSwgOCwgMTIsIDQsIDksIDEsIDIsXG4gIDE1LCA1LCAxLCAzLCA3LCAxNCwgNiwgOSwgMTEsIDgsIDEyLCAyLCAxMCwgMCwgNCwgMTMsXG4gIDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTQsXG4gIDEyLCAxNSwgMTAsIDQsIDEsIDUsIDgsIDcsIDYsIDIsIDEzLCAxNCwgMCwgMywgOSwgMTFcbl07XG5cbnZhciBzID0gW1xuICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXG4gIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcbiAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxuICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXG4gIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxuXTtcblxudmFyIHNoID0gW1xuICA4LCA5LCA5LCAxMSwgMTMsIDE1LCAxNSwgNSwgNywgNywgOCwgMTEsIDE0LCAxNCwgMTIsIDYsXG4gIDksIDEzLCAxNSwgNywgMTIsIDgsIDksIDExLCA3LCA3LCAxMiwgNywgNiwgMTUsIDEzLCAxMSxcbiAgOSwgNywgMTUsIDExLCA4LCA2LCA2LCAxNCwgMTIsIDEzLCA1LCAxNCwgMTMsIDEzLCA3LCA1LFxuICAxNSwgNSwgOCwgMTEsIDE0LCAxNCwgNiwgMTQsIDYsIDksIDEyLCA5LCAxMiwgNSwgMTUsIDgsXG4gIDgsIDUsIDEyLCA5LCAxMiwgNSwgMTQsIDYsIDgsIDEzLCA2LCA1LCAxNSwgMTMsIDExLCAxMVxuXTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDM2O1xuICB0aGlzLmlubmVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xuXG4gIC8vIDB4MzYgXiAweDVjID0gMHg2YVxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDZhO1xuICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xufTtcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIHRoaXMuaW5uZXIudXBkYXRlKG1zZywgZW5jKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaW5uZXIuZGlnZXN0KCkpO1xuICByZXR1cm4gdGhpcy5vdXRlci5kaWdlc3QoZW5jKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZG91Ymxlczoge1xuICAgIHN0ZXA6IDQsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdlNjBmY2U5M2I1OWU5ZWM1MzAxMWFhYmMyMWMyM2U5N2IyYTMxMzY5Yjg3YTVhZTljNDRlZTg5ZTJhNmRlYzBhJyxcbiAgICAgICAgJ2Y3ZTM1MDczOTllNTk1OTI5ZGI5OWYzNGY1NzkzNzEwMTI5Njg5MWU0NGQyM2YwYmUxZjMyY2NlNjk2MTY4MjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI4MjI2MzIxMmM2MDlkOWVhMmE2ZTNlMTcyZGUyMzhkOGMzOWNhYmQ1YWMxY2ExMDY0NmUyM2ZkNWY1MTUwOCcsXG4gICAgICAgICcxMWY4YTgwOTg1NTdkZmU0NWU4MjU2ZTgzMGI2MGFjZTYyZDYxM2FjMmY3YjE3YmVkMzFiNmVhZmY2ZTI2Y2FmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NWUxNTlmNzI4Yjg2NWE3MmY5OWNjNmM2ZmM4NDZkZTBiOTM4MzNmZDIyMjJlZDczZmNlNWI1NTFlNWI3MzknLFxuICAgICAgICAnZDM1MDZlMGQ5ZTNjNzllYmE0ZWY5N2E1MWZmNzFmNWVhY2I1OTU1YWRkMjQzNDVjNmVmYTZmZmVlOWZlZDY5NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNjNkOTBkNDQ3YjAwYzljOTljZWFjMDViNjI2MmVlMDUzNDQxYzdlNTU1NTJmZmU1MjZiYWQ4ZjgzZmY0NjQwJyxcbiAgICAgICAgJzRlMjczYWRmYzczMjIyMTk1M2I0NDUzOTdmMzM2MzE0NWI5YTg5MDA4MTk5ZWNiNjIwMDNjN2YzYmVlOWRlOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YjRiNWYxNjVkZjNjMmJlOGM2MjQ0YjViNzQ1NjM4ODQzZTRhNzgxYTE1YmNkMWI2OWY3OWE1NWRmZmRmODBjJyxcbiAgICAgICAgJzRhYWQwYTZmNjhkMzA4YjRiM2ZiZDc4MTNhYjBkYTA0ZjllMzM2NTQ2MTYyZWU1NmIzZWZmMGM2NWZkNGZkMzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzIzY2JhYTZlNWRiOTk2ZDZiZjc3MWMwMGJkNTQ4YzdiNzAwZGJmZmE2YzBlNzdiY2I2MTE1OTI1MjMyZmNkYScsXG4gICAgICAgICc5NmU4NjdiNTU5NWNjNDk4YTkyMTEzNzQ4ODgyNGQ2ZTI2NjBhMDY1Mzc3OTQ5NDgwMWRjMDY5ZDllYjM5ZjVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlYmZhNGQ0OTNiZWJmOThiYTVmZWVjODEyYzJkM2I1MDk0Nzk2MTIzN2E5MTk4MzlhNTMzZWNhMGU3ZGQ3ZmEnLFxuICAgICAgICAnNWQ5YThjYTM5NzBlZjBmMjY5ZWU3ZWRhZjE3ODA4OWQ5YWU0Y2RjM2E3MTFmNzEyZGRmZDRmZGFlMWRlODk5OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMDBmNDRkYTY5NmU3MTY3Mjc5MWQwYTA5YjdiZGU0NTlmMTIxNWEyOWIzYzAzYmZlZmQ3ODM1YjM5YTQ4ZGIwJyxcbiAgICAgICAgJ2NkZDllMTMxOTJhMDBiNzcyZWM4ZjMzMDBjMDkwNjY2YjdmZjRhMThmZjUxOTVhYzBmYmQ1Y2Q2MmJjNjVhMDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTEwMzFiZTI2MmM3ZWQxYjFkYzkyMjdhNGEwNGMwMTdhNzdmOGQ0NDY0ZjNiMzg1MmM4YWNkZTZlNTM0ZmQyZCcsXG4gICAgICAgICc5ZDcwNjE5Mjg5NDA0MDVlNmJiNmE0MTc2NTk3NTM1YWYyOTJkZDQxOWUxY2VkNzlhNDRmMThmMjk0NTZhMDBkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlZWE2Y2FlNDZkNTViNTMwYWMyODM5ZjE0M2JkN2VjNWNmOGIyNjZhNDFkNmFmNTJkNWU2ODhkOTA5NDY5NmQnLFxuICAgICAgICAnZTU3YzZiNmM5N2RjZTFiYWIwNmU0ZTEyYmYzZWNkNWM5ODFjODk1N2NjNDE0NDJkMzE1NWRlYmYxODA5MDA4OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY3YTkxZDkxMDQ5Y2RjYjM2N2JlNGJlNmZmY2EzY2ZlZWQ2NTdkODA4NTgzZGUzM2ZhOTc4YmMxZWM2Y2IxJyxcbiAgICAgICAgJzliYWNhYTM1NDgxNjQyYmM0MWY0NjNmN2VjOTc4MGU1ZGVjN2FkYzUwOGY3NDBhMTdlOWVhOGUyN2E2OGJlMWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTM5MDRmYWEwYjMzNGNkZGE2ZTAwMDkzNWVmMjIxNTFlYzA4ZDBmN2JiMTEwNjlmNTc1NDVjY2MxYTM3YjdjMCcsXG4gICAgICAgICc1YmMwODdkMGJjODAxMDZkODhjOWVjY2FjMjBkM2MxYzEzOTk5OTgxZTE0NDM0Njk5ZGNiMDk2YjAyMjc3MWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlN2JjZDBiZDM1OTgzYTc3MTljY2E3NzY0Y2E5MDY3NzliNTNhMDQzYTliOGJjYWVmZjk1OWY0M2FkODYwNDcnLFxuICAgICAgICAnMTBiNzc3MGIyYTNkYTRiMzk0MDMxMDQyMGNhOTUxNDU3OWU4OGUyZTQ3ZmQ2OGIzZWExMDA0N2U4NDYwMzcyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczODVlZWQzNGMxY2RmZjIxZTZkMDgxODY4OWI4MWJkZTcxYTdmNGYxODM5N2U2NjkwYTg0MWUxNTk5YzQzODYyJyxcbiAgICAgICAgJzI4M2JlYmMzZThlYTIzZjU2NzAxZGUxOWU5ZWJmNDU3NmIzMDRlZWMyMDg2ZGM4Y2MwNDU4ZmU1NTQyZTU0NTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmY5ZDliODAzZWNmMTkxNjM3YzczYTQ0MTNkZmExODBmZGRmODRhNTk0N2ZiYzljNjA2ZWQ4NmMzZmFjM2E3JyxcbiAgICAgICAgJzdjODBjNjhlNjAzMDU5YmE2OWI4ZTJhMzBlNDVjNGQ0N2VhNGRkMmY1YzI4MTAwMmQ4Njg5MDYwM2E4NDIxNjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzMyMmQ0MDEyNDNjNGUyNTgyYTIxNDdjMTA0ZDZlY2JmNzc0ZDE2M2RiMGY1ZTUzMTNiN2UwZTc0MmQwZTZiZCcsXG4gICAgICAgICc1NmU3MDc5N2U5NjY0ZWY1YmZiMDE5YmM0ZGRhZjliNzI4MDVmNjNlYTI4NzNhZjYyNGYzYTJlOTZjMjhiMmEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1NjcyYzdkMmRlMGI3ZGEyYmQxNzcwZDg5NjY1ODY4NzQxYjNmOWFmNzY0MzM5NzcyMWQ3NGQyODEzNGFiODMnLFxuICAgICAgICAnN2M0ODFiOWI1YjQzYjJlYjYzNzQwNDliZmE2MmMyZTVlNzdmMTdmY2M1Mjk4ZjQ0YzhlMzA5NGY3OTAzMTNhNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhiZjgwOWIxOTg4YTQ2YjA2YzlmMTkxOTQxM2IxMGY5MjI2YzYwZjY2ODgzMmZmZDk1OWFmNjBjODJhMGEnLFxuICAgICAgICAnNTNhNTYyODU2ZGNiNjY0NmRjNmI3NGM1ZDFjMzQxOGM2ZDRkZmYwOGM5N2NkMmJlZDRjYjdmODhkOGM4ZTU4OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MjYwY2U3ZjQ2MTgwMWMzNGYwNjdjZTBmMDI4NzNhOGYxYjBlNDRkZmM2OTc1MmFjY2VjZDgxOWYzOGZkOGU4JyxcbiAgICAgICAgJ2JjMmRhODJiNmZhNWI1NzFhN2YwOTA0OTc3NmExZWY3ZWNkMjkyMjM4MDUxYzE5OGMxYTg0ZTk1YjJiNGFlMTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTUwMzdkZTBhZmMxZDhkNDNkODM0ODQxNGJiZjQxMDMwNDNlYzhmNTc1YmZkYzQzMjk1M2NjOGQyMDM3ZmEyZCcsXG4gICAgICAgICc0NTcxNTM0YmFhOTRkM2I1ZjlmOThkMDlmYjk5MGJkZGJkNWY1YjAzZWM0ODFmMTBlMGU1ZGM4NDFkNzU1YmRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UwNjM3MmIwZjRhMjA3YWRmNWVhOTA1ZThmMTc3MWI0ZTdlOGRiZDFjNmE2YzViNzI1ODY2YTBhZTRmY2U3MjUnLFxuICAgICAgICAnN2E5MDg5NzRiY2UxOGNmZTEyYTI3YmIyYWQ1YTQ4OGNkNzQ4NGE3Nzg3MTA0ODcwYjI3MDM0Zjk0ZWVlMzFkZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyMTNjN2E3MTVjZDVkNDUzNThkMGJiZjlkYzBjZTAyMjA0YjEwYmRkZTJhM2Y1ODU0MGFkNjkwOGQwNTU5NzU0JyxcbiAgICAgICAgJzRiNmRhZDBiNWFlNDYyNTA3MDEzYWQwNjI0NWJhMTkwYmI0ODUwZjVmMzZhN2VlZGRmZjJjMjc1MzRiNDU4ZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU3YzI3MmE3YWY0YjM0ZThkYmI5MzUyYTU0MTlhODdlMjgzOGM3MGFkYzYyY2RkZjBjYzNhM2IwOGZiZDUzYycsXG4gICAgICAgICcxNzc0OWM3NjZjOWQwYjE4ZTE2ZmQwOWY2ZGVmNjgxYjUzMGI5NjE0YmZmN2RkMzNlMGIzOTQxODE3ZGNhYWU2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ZlYTc0ZTNkYmU3NzhiMWIxMGYyMzhhZDYxNjg2YWE1Yzc2ZTNkYjJiZTQzMDU3NjMyNDI3ZTI4NDBmYjI3YjYnLFxuICAgICAgICAnNmUwNTY4ZGI5YjBiMTMyOTdjZjY3NGRlY2NiNmFmOTMxMjZiNTk2Yjk3M2Y3Yjc3NzAxZDNkYjdmMjNjYjk2ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NmU2NDExM2Y2NzdjZjBlMTBhMjU3MGQ1OTk5NjhkMzE1NDRlMTc5Yjc2MDQzMjk1MmMwMmE0NDE3YmRkZTM5JyxcbiAgICAgICAgJ2M5MGRkZjhkZWU0ZTk1Y2Y1NzcwNjZkNzA2ODFmMGQzNWUyYTMzZDJiNTZkMjAzMmI0YjE3NTJkMTkwMWFjMDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzczOGM1NmIwM2IyYWJlMWU4MjgxYmFhNzQzZjhmOWE4ZjdjYzY0M2RmMjZjYmVlM2FiMTUwMjQyYmNiYjg5MScsXG4gICAgICAgICc4OTNmYjU3ODk1MWFkMjUzN2Y3MThmMmVhY2JmYmJiYjgyMzE0ZWVmNzg4MGNmZTkxN2U3MzVkOTY5OWE4NGMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q4OTU2MjY1NDhiNjViODFlMjY0Yzc2MzdjOTcyODc3ZDFkNzJlNWYzYTkyNTAxNDM3MmU5ZjY1ODhmNmMxNGInLFxuICAgICAgICAnZmViZmFhMzhmMmJjN2VhZTcyOGVjNjA4MThjMzQwZWIwMzQyOGQ2MzJiYjA2N2UxNzkzNjNlZDc1ZDdkOTkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiOGRhOTQwMzJhOTU3NTE4ZWIwZjY0MzM1NzFlODc2MWNlZmZjNzM2OTNlODRlZGQ0OTE1MGE1NjRmNjc2ZTAzJyxcbiAgICAgICAgJzI4MDRkZmE0NDgwNWExZTRkN2M5OWNjOTc2MjgwOGIwOTJjYzU4NGQ5NWZmM2I1MTE0ODhlNGU3NGVmZGY2ZTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTgwZmVhMTQ0NDFmYjMzYTdkOGFkYWI5NDc1ZDdmYWIyMDE5ZWZmYjUxNTZhNzkyZjFhMTE3NzhlM2MwZGY1ZCcsXG4gICAgICAgICdlZWQxZGU3ZjYzOGUwMDc3MWU4OTc2OGNhM2NhOTQ0NzJkMTU1ZTgwYWYzMjJlYTlmY2I0MjkxYjZhYzllYzc4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2EzMDE2OTdiZGZjZDcwNDMxM2JhNDhlNTFkNTY3NTQzZjJhMTgyMDMxZWZkNjkxNWRkYzA3YmJjYzRlMTYwNzAnLFxuICAgICAgICAnNzM3MGY5MWNmYjY3ZTRmNTA4MTgwOWZhMjVkNDBmOWIxNzM1ZGJmN2MwYTExYTEzMGMwZDFhMDQxZTE3N2VhMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MGFkODViMzg5ZDZiOTM2NDYzZjlkMDUxMjY3OGRlMjA4Y2MzMzBiMTEzMDdmZmZhYjdhYzYzZTNmYjA0ZWQ0JyxcbiAgICAgICAgJ2U1MDdhMzYyMGEzODI2MWFmZmRjYmQ5NDI3MjIyYjgzOWFlZmFiZTE1ODI4OTRkOTkxZDRkNDhjYjZlZjE1MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4ZjY4YjlkMmY2M2I1ZjMzOTIzOWMxYWQ5ODFmMTYyZWU4OGM1Njc4NzIzZWEzMzUxYjdiNDQ0YzllYzRjMGRhJyxcbiAgICAgICAgJzY2MmE5ZjJkYmEwNjM5ODZkZTFkOTBjMmI2YmUyMTVkYmJlYTJjZmU5NTUxMGJmZGYyM2NiZjc5NTAxZmZmODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRmM2ZiMDE3NmFmODVkNjVmZjk5ZmY5MTk4YzM2MDkxZjQ4ZTg2NTAzNjgxZTNlNjY4NmZkNTA1MzIzMWUxMScsXG4gICAgICAgICcxZTYzNjMzYWQwZWY0ZjFjMTY2MWE2ZDBlYTAyYjcyODZjYzdlNzRlYzk1MWQxYzk4MjJjMzg1NzZmZWI3M2JjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhjMDBmYTliMThlYmYzMzFlYjk2MTUzN2E0NWE0MjY2YzcwMzRmMmYwZDRlMWQwNzE2ZmI2ZWFlMjBlYWUyOWUnLFxuICAgICAgICAnZWZhNDcyNjdmZWE1MjFhMWE5ZGMzNDNhMzczNmM5NzRjMmZhZGFmYTgxZTM2YzU0ZTdkMmE0YzY2NzAyNDE0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlN2EyNmNlNjlkZDQ4MjlmM2UxMGNlYzBhOWU5OGVkMzE0M2QwODRmMzA4YjkyYzA5OTdmZGRmYzYwY2IzZTQxJyxcbiAgICAgICAgJzJhNzU4ZTMwMGZhNzk4NGI0NzFiMDA2YTFhYWZiYjE4ZDBhNmIyYzA0MjBlODNlMjBlOGE5NDIxY2YyY2ZkNTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjY0NTllMGVlMzY2MmVjOGQyMzU0MGMyMjNiY2JkYzU3MWNiY2I5NjdkNzk0MjRmM2NmMjllYjNkZTZiODBlZicsXG4gICAgICAgICc2N2M4NzZkMDZmM2UwNmRlMWRhZGYxNmU1NjYxZGIzYzRiM2FlNmQ0OGUzNWIyZmYzMGJmMGI2MWE3MWJhNDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDY4YTgwYzgyODBiYjg0MDc5MzIzNGFhMTE4ZjA2MjMxZDZmMWZjNjdlNzNjNWE1ZGVkYTBmNWI0OTY5NDNlOCcsXG4gICAgICAgICdkYjhiYTlmZmY0YjU4NmQwMGM0YjFmOTE3N2IwZTI4YjViMGU3YjhmNzg0NTI5NWEyOTRjODQyNjZiMTMzMTIwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyNGFlZDdkZjY1YzgwNDI1MmRjMDI3MDkwN2EzMGIwOTYxMmFlYjk3MzQ0OWNlYTQwOTU5ODBmYzI4ZDNkNWQnLFxuICAgICAgICAnNjQ4YTM2NTc3NGI2MWYyZmYxMzBjMGMzNWFlYzFmNGYxOTIxM2IwYzdlMzMyODQzOTY3MjI0YWY5NmFiN2M4NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZGY5YzE0OTE5Y2RlNjFmNmQ1MWRmZGJlNWZlZTVkY2VlYzQxNDNiYThkMWNhODg4ZThiZDM3M2ZkMDU0Yzk2JyxcbiAgICAgICAgJzM1ZWM1MTA5MmQ4NzI4MDUwOTc0YzIzYTFkODVkNGI1ZDUwNmNkYzI4ODQ5MDE5MmViYWMwNmNhZDEwZDVkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzljMzkxOWE4NGE0NzQ4NzBmYWVkOGE5YzFjYzY2MDIxNTIzNDg5MDU0ZDdmMDMwOGNiZmM5OWM4YWMxZjk4Y2QnLFxuICAgICAgICAnZGRiODRmMGY0YTRkZGQ1NzU4NGYwNDRiZjI2MGU2NDE5MDUzMjZmNzZjNjRjOGU2YmU3ZTVlMDNkNGZjNTk5ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2MDU3MTcwYjFkZDEyZmRmOGRlMDVmMjgxZDhlMDZiYjkxZTE0OTNhOGI5MWQ0Y2M1YTIxMzgyMTIwYTk1OWU1JyxcbiAgICAgICAgJzlhMWFmMGIyNmE2YTQ4MDdhZGQ5YTJkYWY3MWRmMjYyNDY1MTUyYmMzZWUyNGM2NWU4OTliZTkzMjM4NWEyYTgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU3NmRmOGUyM2EwODQxMTQyMTQzOWE0NTE4ZGEzMTg4MGNlZjBmYmE3ZDRkZjEyYjFhNjk3M2VlY2I5NDI2NicsXG4gICAgICAgICc0MGE2YmYyMGU3NjY0MGIyYzkyYjk3YWZlNThjZDgyYzQzMmUxMGE3ZjUxNGQ5ZjNlZThiZTExYWUxYjI4ZWM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NzhhNzhjMjhkZWMzZTMwYTA1ZmU5NjI5ZGU4YzM4YmIzMGQxZjVjZjlhM2EyMDhmNzYzODg5YmU1OGFkNzEnLFxuICAgICAgICAnMzQ2MjZkOWFiNWE1YjIyZmY3MDk4ZTEyZjJmZjU4MDA4N2IzODQxMWZmMjRhYzU2M2I1MTNmYzFmZDlmNDNhYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5Mjg5NTVlZTYzN2E4NDQ2MzcyOWZkMzBlN2FmZDJlZDVmOTYyNzRlNWFkN2U1Y2IwOWVkYTljMDZkOTAzYWMnLFxuICAgICAgICAnYzI1NjIxMDAzZDNmNDJhODI3Yjc4YTEzMDkzYTk1ZWVhYzNkMjZlZmE4YThkODNmYzUxODBlOTM1YmNkMDkxZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWQwZmVmM2VjNmRiMTA5Mzk5MDY0ZjNhMGUzYjI4NTU2NDViNGE5MDdhZDM1NDUyN2FhZTc1MTYzZDgyNzUxJyxcbiAgICAgICAgJzFmMDM2NDg0MTNhMzhjMGJlMjlkNDk2ZTU4MmNmNTY2M2U4NzUxZTk2ODc3MzMxNTgyYzIzN2EyNGViMWY5NjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYyYjBkY2U5N2VlY2U5N2MxYzliNjA0MTc5OGI4NWRmZGZiNmQ4ODgyZGEyMDMwOGY1NDA0ODI0NTI2MDg3ZScsXG4gICAgICAgICc0OTNkMTNmZWY1MjRiYTE4OGFmNGM0ZGM1NGQwNzkzNmM3YjdlZDZmYjkwZTJjZWIyYzk1MWUwMWYwYzI5OTA3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgyN2ZiYmU0YjFlODgwZWE5ZWQyYjJlNjMwMWIyMTJiNTdmMWVlMTQ4Y2Q2ZGQyODc4MGU1ZTJjZjg1NmUyNDEnLFxuICAgICAgICAnYzYwZjljOTIzYzcyN2IwYjcxYmVmMmM2N2QxZDEyNjg3ZmY3YTYzMTg2OTAzMTY2ZDYwNWI2OGJhZWMyOTNlYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE2NDlmMjFmNTFiZGJhZTdiZTRhZTM0Y2U2ZTUyMTdhNThmZGNlN2Y0N2Y5YWE3ZjNiNThmYTIxMjBlMmIzJyxcbiAgICAgICAgJ2JlMzI3OWVkNWJiYmIwM2FjNjlhODBmODk4NzlhYTVhMDFhNmI5NjVmMTNmN2U1OWQ0N2E1MzA1YmE1YWQ5M2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTRhNDJkNDNjNWNmMTY5ZDkzOTFkZjZkZWNmNDJlZTU0MWI2ZDhmMGM5YTEzNzQwMWUyMzYzMmRkYTM0ZDI0ZicsXG4gICAgICAgICc0ZDlmOTJlNzE2ZDFjNzM1MjZmYzk5Y2NmYjhhZDM0Y2U4ODZlZWRmYThkOGU0ZjEzYTdmNzEzMWRlYmE5NDE0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlYzgwZmVmMzYwY2JkZDk1NDE2MGZhZGFiMzUyYjZiOTJiNTM1NzZhODhmZWE0OTQ3MTczYjlkNDMwMGJmMTknLFxuICAgICAgICAnYWVlZmU5Mzc1NmI1MzQwZDJmM2E0OTU4YTdhYmJmNWUwMTQ2ZTc3ZjYyOTVhMDdiNjcxY2RjMWNjMTA3Y2VmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNDZhNzc4YzA0NjcwYzJmOTFiMDBhZjQ2ODBkZmE4YmNlMzQ5MDcxN2Q1OGJhODg5ZGRiNTkyODM2NjY0MmJlJyxcbiAgICAgICAgJ2IzMThlMGVjMzM1NDAyOGFkZDY2OTgyN2Y5ZDRiMjg3MGFhYTk3MWQyZjdlNWVkMWQwYjI5NzQ4M2Q4M2VmZDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmE1MGMwZjYxZDIyZTVmMDdlM2FjZWJiMWFhMDdiMTI4ZDAwMTIyMDlhMjhiOTc3NmQ3NmE4NzkzMTgwZWVmOScsXG4gICAgICAgICc2Yjg0YzY5MjIzOTdlYmE5YjcyY2QyODcyMjgxYTY4YTVlNjgzMjkzYTU3YTIxM2IzOGNkOGQ3ZDNmNGYyODExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhMWQ2MWQwY2E3MjFhMTFiMWE1YmY2YjdkODhlODQyMWEyODhhYjVkNWJiYTUyMjBlNTNkMzJiNWYwNjdlYzInLFxuICAgICAgICAnODE1N2Y1NWE3Yzk5MzA2Yzc5YzA3NjYxNjFjOTFlMjk2NmE3Mzg5OWQyNzliNDhhNjU1ZmJhMGYxYWQ4MzZmMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhOGUyODJmZjBjOTcwNjkwNzIxNWZmOThlOGZkNDE2NjE1MzExZGUwNDQ2ZjFlMDYyYTczYjA2MTBkMDY0ZTEzJyxcbiAgICAgICAgJzdmOTczNTViOGRiODFjMDlhYmZiN2YzYzViMjUxNTg4OGI2NzlhM2U1MGRkNmJkNmNlZjdjNzMxMTFmNGNjMGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc0YTUzYjljOWEyODU4NzJkMzllNTZlNjkxM2NhYjE1ZDU5YjFmYTUxMjUwOGMwMjJmMzgyZGU4MzE5NDk3YycsXG4gICAgICAgICdjY2M5ZGMzN2FiZmM5YzE2NTdiNDE1NWYyYzQ3ZjllNjY0NmIzYTFkOGNiOTg1NDM4M2RhMTNhYzA3OWFmYTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk1OTM5Njk4MTk0Mzc4NWMzZDNlNTdlZGY1MDE4Y2RiZTAzOWU3MzBlNDkxOGIzZDg4NGZkZmYwOTQ3NWI3YmEnLFxuICAgICAgICAnMmU3ZTU1Mjg4OGMzMzFkZDhiYTAzODZhNGI5Y2Q2ODQ5YzY1M2Y2NGM4NzA5Mzg1ZTliOGFiZjg3NTI0ZjJmZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMmE2M2E1MGFlNDAxZTU2ZDY0NWExMTUzYjEwOWE4ZmNjYTBhNDNkNTYxZmJhMmRiYjUxMzQwYzlkODJiMTUxJyxcbiAgICAgICAgJ2U4MmQ4NmZiNjQ0M2ZjYjc1NjVhZWU1OGIyOTQ4MjIwYTcwZjc1MGFmNDg0Y2E1MmQ0MTQyMTc0ZGNmODk0MDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjQ1ODdlMjMzNTQ3MWViODkwZWU3ODk2ZDdjZmRjODY2YmFjYmRiZDM4MzkzMTdiMzQzNmY5YjQ1NjE3ZTA3MycsXG4gICAgICAgICdkOTlmY2RkNWJmNjkwMmUyYWU5NmRkNjQ0N2MyOTlhMTg1YjkwYTM5MTMzYWVhYjM1ODI5OWU1ZTlmYWY2NTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0ODFiZGUwZTRlNGQ4ODViM2E1NDZkM2U1NDlkZTA0MmYwYWE2Y2VhMjUwZTdmZDM1OGQ2Yzg2ZGQ0NWU0NTgnLFxuICAgICAgICAnMzhlZTdiOGNiYTU0MDRkZDg0YTI1YmYzOWNlY2IyY2E5MDBhNzljNDJiMjYyZTU1NmQ2NGIxYjU5Nzc5MDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxMzQ2NGE1N2E3ODEwMmFhNjJiNjk3OWFlODE3ZjQ2MzdmZmNmZWQzYzRiMWNlMzBiY2Q2MzAzZjZjYWY2NjZiJyxcbiAgICAgICAgJzY5YmUxNTkwMDQ2MTQ1ODBlZjdlNDMzNDUzY2NiMGNhNDhmMzAwYTgxZDA5NDJlMTNmNDk1YTkwN2Y2ZWNjMjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYmM0YTlkZjViNzEzZmUyZTlhZWY0MzBiY2MxZGM5N2EwY2Q5Y2NlZGUyZjI4NTg4Y2FkYTNhMGQyZDgzZjM2NicsXG4gICAgICAgICdkM2E4MWNhNmU3ODVjMDYzODM5MzdhZGY0Yjc5OGNhYTZlOGE5ZmJmYTU0N2IxNmQ3NThkNjY2NTgxZjMzYzEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMyOGE5N2JmODI5OGJjMGQyM2Q4Yzc0OTQ1MmEzMmU2OTRiNjVlMzBhOTQ3MmEzOTU0YWIzMGZlNTMyNGNhYScsXG4gICAgICAgICc0MGEzMDQ2M2EzMzA1MTkzMzc4ZmVkZjMxZjdjYzBlYjdhZTc4NGYwNDUxY2I5NDU5ZTcxZGM3M2NiZWY5NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhlYTk2NjYxMzk1MjdhOGMxZGQ5NGNlNGYwNzFmZDIzYzhiMzUwYzVhNGJiMzM3NDhjNGJhMTExZmFjY2FlMCcsXG4gICAgICAgICc2MjBlZmFiYmM4ZWUyNzgyZTI0ZTdjMGNmYjk1YzVkNzM1Yjc4M2JlOWNmMGY4ZTk1NWFmMzRhMzBlNjJiOTQ1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RkMzYyNWZhZWY1YmEwNjA3NDY2OTcxNmJiZDM3ODhkODliZGRlODE1OTU5OTY4MDkyZjc2Y2M0ZWI5YTk3ODcnLFxuICAgICAgICAnN2ExODhmYTM1MjBlMzBkNDYxZGEyNTAxMDQ1NzMxY2E5NDE0NjE5ODI4ODMzOTU5MzdmNjhkMDBjNjQ0YTU3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmNzEwZDc5ZDllYjk2MjI5N2U0ZjYyMzJiNDBlOGY3ZmViMmJjNjM4MTQ2MTRkNjkyYzEyZGU3NTI0MDgyMjFlJyxcbiAgICAgICAgJ2VhOThlNjcyMzJkM2IzMjk1ZDNiNTM1NTMyMTE1Y2NhYzg2MTJjNzIxODUxNjE3NTI2YWU0N2E5Yzc3YmZjODInXG4gICAgICBdXG4gICAgXVxuICB9LFxuICBuYWY6IHtcbiAgICB3bmQ6IDcsXG4gICAgcG9pbnRzOiBbXG4gICAgICBbXG4gICAgICAgICdmOTMwOGEwMTkyNThjMzEwNDkzNDRmODVmODlkNTIyOWI1MzFjODQ1ODM2Zjk5YjA4NjAxZjExM2JjZTAzNmY5JyxcbiAgICAgICAgJzM4OGY3YjBmNjMyZGU4MTQwZmUzMzdlNjJhMzdmMzU2NjUwMGE5OTkzNGMyMjMxYjZjYjlmZDc1ODRiOGU2NzInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmY4YmRlNGQxYTA3MjA5MzU1YjRhNzI1MGE1YzUxMjhlODhiODRiZGRjNjE5YWI3Y2JhOGQ1NjliMjQwZWZlNCcsXG4gICAgICAgICdkOGFjMjIyNjM2ZTVlM2Q2ZDRkYmE5ZGRhNmM5YzQyNmY3ODgyNzFiYWIwZDY4NDBkY2E4N2QzYWE2YWM2MmQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVjYmRmMDY0NmU1ZGI0ZWFhMzk4ZjM2NWYyZWE3YTBlM2Q0MTliN2UwMzMwZTM5Y2U5MmJkZGVkY2FjNGY5YmMnLFxuICAgICAgICAnNmFlYmNhNDBiYTI1NTk2MGEzMTc4ZDZkODYxYTU0ZGJhODEzZDBiODEzZmRlN2I1YTUwODI2MjgwODcyNjRkYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhY2Q0ODRlMmYwYzdmNjUzMDlhZDE3OGE5ZjU1OWFiZGUwOTc5Njk3NGM1N2U3MTRjMzVmMTEwZGZjMjdjY2JlJyxcbiAgICAgICAgJ2NjMzM4OTIxYjBhN2Q5ZmQ2NDM4MDk3MTc2M2I2MWU5YWRkODg4YTQzNzVmOGUwZjA1Y2MyNjJhYzY0ZjljMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc0YWU3Zjg1OGE5NDExZTVlZjQyNDZiNzBjNjVhYWM1NjQ5OTgwYmU1YzE3ODkxYmJlYzE3ODk1ZGEwMDhjYicsXG4gICAgICAgICdkOTg0YTAzMmViNmI1ZTE5MDI0M2RkNTZkN2I3YjM2NTM3MmRiMWUyZGZmOWQ2YTgzMDFkNzRjOWM5NTNjNjFiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyODc3M2MyZDk3NTI4OGJjN2QxZDIwNWMzNzQ4NjUxYjA3NWZiYzY2MTBlNThjZGRlZWRkZjhmMTk0MDVhYTgnLFxuICAgICAgICAnYWIwOTAyZThkODgwYTg5NzU4MjEyZWI2NWNkYWY0NzNhMWEwNmRhNTIxZmE5MWYyOWI1Y2I1MmRiMDNlZDgxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q3OTI0ZDRmN2Q0M2VhOTY1YTQ2NWFlMzA5NWZmNDExMzFlNTk0NmYzYzg1Zjc5ZTQ0YWRiY2Y4ZTI3ZTA4MGUnLFxuICAgICAgICAnNTgxZTI4NzJhODZjNzJhNjgzODQyZWMyMjhjYzZkZWZlYTQwYWYyYmQ4OTZkM2E1YzUwNGRjOWZmNmEyNmI1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZWZkZWE0Y2RiNjc3NzUwYTQyMGZlZTgwN2VhY2YyMWViOTg5OGFlNzliOTc2ODc2NmU0ZmFhMDRhMmQ0YTM0JyxcbiAgICAgICAgJzQyMTFhYjA2OTQ2MzUxNjhlOTk3YjBlYWQyYTkzZGFlY2VkMWY0YTA0YTk1YzBmNmNmYjE5OWY2OWU1NmViNzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMmI0ZWEwYTc5N2E0NDNkMjkzZWY1Y2ZmNDQ0ZjQ5NzlmMDZhY2ZlYmQ3ZTg2ZDI3NzQ3NTY1NjEzODM4NWI2YycsXG4gICAgICAgICc4NWU4OWJjMDM3OTQ1ZDkzYjM0MzA4M2I1YTFjODYxMzFhMDFmNjBjNTAyNjk3NjNiNTcwYzg1NGU1YzA5YjdhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MmJiZjRhNGNkZDEyNTY0ZjkzZmEzMzJjZTMzMzMwMWQ5YWQ0MDI3MWY4MTA3MTgxMzQwYWVmMjViZTU5ZDUnLFxuICAgICAgICAnMzIxZWI0MDc1MzQ4ZjUzNGQ1OWMxODI1OWRkYTNlMWY0YTFiM2IyZTcxYjEwMzljNjdiZDNkOGJjZjgxOTk4YydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZmEyMTA0ZDZiMzhkMTFiMDIzMDAxMDU1OTg3OTEyNGU0MmFiOGRmZWZmNWZmMjlkYzljZGFkZDRlY2FjYzNmJyxcbiAgICAgICAgJzJkZTEwNjgyOTVkZDg2NWI2NDU2OTMzNWJkNWRkODAxODFkNzBlY2ZjODgyNjQ4NDIzYmE3NmI1MzJiN2Q2NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MjQ4Mjc5YjA5YjRkNjhkYWIyMWE5YjA2NmVkZGE4MzI2M2MzZDg0ZTA5NTcyZTI2OWNhMGNkN2Y1NDUzNzE0JyxcbiAgICAgICAgJzczMDE2ZjdiZjIzNGFhZGU1ZDFhYTcxYmRlYTJiMWZmM2ZjMGRlMmE4ODc5MTJmZmU1NGEzMmNlOTdjYjM0MDInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGFlZDRmMmJlM2E4YmYyNzhlNzAxMzJmYjBiZWI3NTIyZjU3MGUxNDRiZjYxNWMwN2U5OTZkNDQzZGVlODcyOScsXG4gICAgICAgICdhNjlkY2U0YTdkNmM5OGU4ZDRhMWFjYTg3ZWY4ZDcwMDNmODNjMjMwZjNhZmE3MjZhYjQwZTUyMjkwYmUxYzU1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0NGQxMmM3MDY1ZDgxMmU4YWNmMjhkN2NiYjE5ZjkwMTFlY2Q5ZTlmZGYyODFiMGU2YTNiNWU4N2QyMmU3ZGInLFxuICAgICAgICAnMjExOWE0NjBjZTMyNmNkYzc2YzQ1OTI2Yzk4MmZkYWMwZTEwNmU4NjFlZGY2MWM1YTAzOTA2M2YwZTBlNjQ4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2YTI0NWJmNmRjNjk4NTA0Yzg5YTIwY2ZkZWQ2MDg1MzE1MmI2OTUzMzZjMjgwNjNiNjFjNjVjYmQyNjllNmI0JyxcbiAgICAgICAgJ2UwMjJjZjQyYzJiZDRhNzA4YjNmNTEyNmYxNmEyNGFkOGIzM2JhNDhkMDQyM2I2ZWZkNWU2MzQ4MTAwZDhhODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTY5N2ZmYTZmZDlkZTYyN2MwNzdlM2QyZmU1NDEwODRjZTEzMzAwYjBiZWMxMTQ2Zjk1YWU1N2YwZDBiZDZhNScsXG4gICAgICAgICdiOWMzOThmMTg2ODA2ZjVkMjc1NjE1MDZlNDU1NzQzM2EyY2YxNTAwOWU0OThhZTdhZGVlOWQ2M2QwMWIyMzk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNWJkYjAxOTk4MTcxOGI5ODZkMGYwN2U4MzRjYjBkOWRlYjgzNjBmZmI3ZjYxZGY5ODIzNDVlZjI3YTc0NzknLFxuICAgICAgICAnMjk3MmQyZGU0ZjhkMjA2ODFhNzhkOTNlYzk2ZmUyM2MyNmJmYWU4NGZiMTRkYjQzYjAxZTFlOTA1NmI4YzQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyZDE0ZGFiNDE1MGJmNDk3NDAyZmRjNDVhMjE1ZTEwZGNiMDFjMzU0OTU5YjEwY2ZlMzFjN2U5ZDg3ZmYzM2QnLFxuICAgICAgICAnODBmYzA2YmQ4Y2M1YjAxMDk4MDg4YTE5NTBlZWQwZGIwMWFhMTMyOTY3YWI0NzIyMzVmNTY0MjQ4M2IyNWVhZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MGM2MGFkMDA0MGYyN2RhZGU1YjRiMDZjNDA4ZTU2YjJjNTBlOWY1NmI5YjhiNDI1ZTU1NWMyZjg2MzA4YjZmJyxcbiAgICAgICAgJzFjMzgzMDNmMWNjNWMzMGYyNmU2NmJhZDdmZTcyZjcwYTY1ZWVkNGNiZTcwMjRlYjFhYTAxZjU2NDMwYmQ1N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2E5Mzc1YWQ2MTY3YWQ1NGFhNzRjNjM0OGNjNTRkMzQ0Y2M1ZGM5NDg3ZDg0NzA0OWQ1ZWFiYjBmYTAzYzhmYicsXG4gICAgICAgICdkMGUzZmE5ZWNhODcyNjkwOTU1OWUwZDc5MjY5MDQ2YmRjNTllYTEwYzcwY2UyYjAyZDQ5OWVjMjI0ZGM3ZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDUyOGVjZDliNjk2YjU0YzkwN2E5ZWQwNDU0NDdhNzliYjQwOGVjMzliNjhkZjUwNGJiNTFmNDU5YmMzZmZjOScsXG4gICAgICAgICdlZWNmNDEyNTMxMzZlNWY5OTk2NmYyMTg4MWZkNjU2ZWJjNDM0NTQwNWM1MjBkYmMwNjM0NjViNTIxNDA5OTMzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ5MzcwYTRiNWY0MzQxMmVhMjVmNTE0ZThlY2RhZDA1MjY2MTE1ZTRhN2VjYjEzODcyMzE4MDhmOGI0NTk2MycsXG4gICAgICAgICc3NThmM2Y0MWFmZDZlZDQyOGIzMDgxYjA1MTJmZDYyYTU0YzNmM2FmYmI1YjY3NjRiNjUzMDUyYTEyOTQ5YzlhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3ZjIzMDkzNmVlODhjYmJkNzNkZjkzMGQ2NDcwMmVmODgxZDgxMWUwZTE0OThlMmYxYzEzZWIxZmMzNDVkNzQnLFxuICAgICAgICAnOTU4ZWY0MmE3ODg2YjY0MDBhMDgyNjZlOWJhMWIzNzg5NmM5NTMzMGQ5NzA3N2NiYmU4ZWIzYzc2NzFjNjBkNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMmRhYzk5MWNjNGNlNGI5ZWE0NDg4N2U1YzdjMGJjZTU4YzgwMDc0YWI5ZDRkYmFlYjI4NTMxYjc3MzlmNTMwJyxcbiAgICAgICAgJ2UwZGVkYzliM2IyZjhkYWQ0ZGExZjMyZGVjMjUzMWRmOWViNWZiZWIwNTk4ZTRmZDFhMTE3ZGJhNzAzYTNjMzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzYjNkOWY2NjI2MjFmYjFiNGJlOGZiYmUyNTIwMTI1YTIxNmNkZmM5ZGFlM2RlYmNiYTQ4NTBjNjkwZDQ1YicsXG4gICAgICAgICc1ZWQ0MzBkNzhjMjk2YzM1NDMxMTQzMDZkZDg2MjJkN2M2MjJlMjdjOTcwYTFkZTMxY2IzNzdiMDFhZjczMDdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YxNmY4MDQyNDRlNDZlMmEwOTIzMmQ0YWZmM2I1OTk3NmI5OGZhYzE0MzI4YTJkMWEzMjQ5NmI0OTk5OGYyNDcnLFxuICAgICAgICAnY2VkYWJkOWI4MjIwM2Y3ZTEzZDIwNmZjZGY0ZTMzZDkyYTZjNTNjMjZlNWNjZTI2ZDY1Nzk5NjJjNGUzMWRmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYWY3NTQyNzJkYzg0NTYzYjAzNTJiN2ExNDMxMWFmNTVkMjQ1MzE1YWNlMjdjNjUzNjllMTVmNzE1MWQ0MWQxJyxcbiAgICAgICAgJ2NiNDc0NjYwZWYzNWY1ZjJhNDFiNjQzZmE1ZTQ2MDU3NWY0ZmE5Yjc5NjIyMzJhNWMzMmY5MDgzMThhMDQ0NzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjYwMGNhNGIyODJjYjk4NmY4NWQwZjE3MDk5NzlkOGI0NGEwOWMwN2NiODZkN2MxMjQ0OTdiYzg2ZjA4MjEyMCcsXG4gICAgICAgICc0MTE5Yjg4NzUzYzE1YmQ2YTY5M2IwM2ZjZGRiYjQ1ZDVhYzZiZTc0YWI1ZjBlZjQ0YjBiZTk0NzVhN2U0YjQwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2MzVjYTcyZDdlODQzMmMzMzhlYzUzY2QxMjIyMGJjMDFjNDg2ODVlMjRmN2RjOGM2MDJhNzc0Njk5OGU0MzUnLFxuICAgICAgICAnOTFiNjQ5NjA5NDg5ZDYxM2QxZDVlNTkwZjc4ZTZkNzRlY2ZjMDYxZDU3MDQ4YmFkOWU3NmYzMDJjNWI5YzYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc1NGUzMjM5ZjMyNTU3MGNkYmJmNGE4N2RlZWU4YTY2YjdmMmIzMzQ3OWQ0NjhmYmMxYTUwNzQzYmY1NmNjMTgnLFxuICAgICAgICAnNjczZmI4NmU1YmRhMzBmYjNjZDBlZDMwNGVhNDlhMDIzZWUzM2QwMTk3YTY5NWQwYzVkOTgwOTNjNTM2NjgzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzZTZiZDEwNzFhMWU5NmFmZjU3ODU5YzgyZDU3MGYwMzMwODAwNjYxZDFjOTUyZjlmZTI2OTQ2OTFkOWI5ZTgnLFxuICAgICAgICAnNTljOWUwYmJhMzk0ZTc2ZjQwYzBhYTU4Mzc5YTNjYjZhNWEyMjgzOTkzZTkwYzQxNjcwMDJhZjQ5MjBlMzdmNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxODZiNDgzZDA1NmEwMzM4MjZhZTczZDg4ZjczMjk4NWM0Y2NiMWYzMmJhMzVmNGI0Y2M0N2ZkY2YwNGFhNmViJyxcbiAgICAgICAgJzNiOTUyZDMyYzY3Y2Y3N2UyZTE3NDQ2ZTIwNDE4MGFiMjFmYjgwOTA4OTUxMzhiNGE0YTc5N2Y4NmU4MDg4OGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGY5ZDcwYTZiOTg3NmNlNTQ0Yzk4NTYxZjRiZTRmNzI1NDQyZTZkMmI3MzdkOWM5MWE4MzIxNzI0Y2UwOTYzZicsXG4gICAgICAgICc1NWViMmRhZmQ4NGQ2Y2NkNWY4NjJiNzg1ZGMzOWQ0YWIxNTcyMjI3MjBlZjlkYTIxN2I4YzQ1Y2YyYmEyNDE3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlZGQ1Y2MyM2M1MWU4N2E0OTdjYTgxNWQ1ZGNlMGY4YWI1MjU1NGY4NDllZDg5OTVkZTY0YzVmMzRjZTcxNDMnLFxuICAgICAgICAnZWZhZTljOGRiYzE0MTMwNjYxZThjZWMwMzBjODlhZDBjMTNjNjZjMGQxN2EyOTA1Y2RjNzA2YWI3Mzk5YTg2OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOTA3OThjMmI2NDc2ODMwZGExMmZlMDIyODdlOWU3NzdhYTNmYmExYzM1NWIxN2E3MjJkMzYyZjg0NjE0ZmJhJyxcbiAgICAgICAgJ2UzOGRhNzZkY2Q0NDA2MjE5ODhkMDBiY2Y3OWFmMjVkNWIyOWMwOTRkYjJhMjMxNDZkMDAzYWZkNDE5NDNlN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWYzYzQyM2E5NWQ5ZjViMzA1NDc1NGVmYTE1MGFjMzljZDI5NTUyZmUzNjAyNTczNjJkZmRlY2VmNDA1M2I0NScsXG4gICAgICAgICdmOThhM2ZkODMxZWIyYjc0OWE5M2IwZTZmMzVjZmI0MGM4Y2Q1YWE2NjdhMTU1ODFiYzJmZWRlZDQ5OGZkOWM2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2NmRiYjI0ZDEzNGU3NDVjY2NhYTI4Yzk5YmYyNzQ5MDZiYjY2YjI2ZGNmOThkZjhkMmZlZDUwZDg4NDI0OWEnLFxuICAgICAgICAnNzQ0YjExNTJlYWNiZTVlMzhkY2M4ODc5ODBkYTM4Yjg5NzU4NGE2NWZhMDZjZWRkMmM5MjRmOTdjYmFjNTk5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OWRiZjQ2ZjhjOTQ3NTliYTIxMjc3YzMzNzg0ZjQxNjQ1ZjdiNDRmNmM1OTZhNThjZTkyZTY2NjE5MWFiZTNlJyxcbiAgICAgICAgJ2M1MzRhZDQ0MTc1ZmJjMzAwZjRlYTZjZTY0ODMwOWEwNDJjZTczOWE3OTE5Nzk4Y2Q4NWUyMTZjNGEzMDdmNmUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjEzYWRhOTUxMDNjNDUzNzMwNWU2OTFlNzRlOWE0YThkZDY0N2U3MTFhOTVlNzNjYjYyZGM2MDE4Y2ZkODdiOCcsXG4gICAgICAgICdlMTM4MTdiNDRlZTE0ZGU2NjNiZjRiYzgwODM0MWYzMjY5NDllMjFhNmE3NWMyNTcwNzc4NDE5YmRhZjU3MzNkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc3NTRiNGZhMGU4YWNlZDA2ZDQxNjdhMmM1OWNjYTRjZGExODY5YzA2ZWJhZGZiNjQ4ODU1MDAxNWE4ODUyMmMnLFxuICAgICAgICAnMzBlOTNlODY0ZTY2OWQ4MjIyNGI5NjdjMzAyMGI4ZmE4ZDFlNGUzNTBiNmNiY2M1MzdhNDhiNTc4NDExNjNhMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5NDhkY2FkZjU5OTBlMDQ4YWEzODc0ZDQ2YWJlZjlkNzAxODU4Zjk1ZGU4MDQxZDJhNjgyOGM5OWUyMjYyNTE5JyxcbiAgICAgICAgJ2U0OTFhNDI1MzdmNmU1OTdkNWQyOGEzMjI0YjFiYzI1ZGY5MTU0ZWZiZDJlZjFkMmNiYmEyY2FlNTM0N2Q1N2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzk2MjQxNDQ1MGM3NmMxNjg5YzdiNDhmODIwMmVjMzdmYjIyNGNmNWFjMGJmYTE1NzAzMjhhOGEzZDdjNzdhYicsXG4gICAgICAgICcxMDBiNjEwZWM0ZmZiNDc2MGQ1YzFmYzEzM2VmNmY2YjEyNTA3YTA1MWYwNGFjNTc2MGFmYTViMjlkYjgzNDM3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM1MTQwODc4MzQ5NjRiNTRiMTViMTYwNjQ0ZDkxNTQ4NWExNjk3NzIyNWI4ODQ3YmIwZGQwODUxMzdlYzQ3Y2EnLFxuICAgICAgICAnZWYwYWZiYjIwNTYyMDU0NDhlMTY1MmM0OGU4MTI3ZmM2MDM5ZTc3YzE1YzIzNzhiN2U3ZDE1YTBkZTI5MzMxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2NjMzBhZDZiNDgzZTRiYzc5Y2UyYzlkZDhiYzU0OTkzZTk0N2ViOGRmNzg3YjQ0Mjk0M2QzZjdiNTI3ZWFmJyxcbiAgICAgICAgJzhiMzc4YTIyZDgyNzI3OGQ4OWM1ZTliZThmOTUwOGFlM2MyYWQ0NjI5MDM1ODYzMGFmYjM0ZGIwNGVlZGUwYTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTYyNGQ4NDc4MDczMjg2MGNlMWM3OGZjYmZlZmUwOGIyYjI5ODIzZGI5MTNmNjQ5Mzk3NWJhMGZmNDg0NzYxMCcsXG4gICAgICAgICc2ODY1MWNmOWI2ZGE5MDNlMDkxNDQ0OGM2Y2Q5ZDRjYTg5Njg3OGY1MjgyYmU0YzhjYzA2ZTJhNDA0MDc4NTc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzczM2NlODBkYTk1NWE4YTI2OTAyYzk1NjMzZTYyYTk4NTE5MjQ3NGI1YWYyMDdkYTZkZjdiNGZkNWZjNjFjZDQnLFxuICAgICAgICAnZjU0MzVhMmJkMmJhZGY3ZDQ4NWE0ZDhiOGRiOWZjY2UzZTFlZjhlMDIwMWU0NTc4YzU0NjczYmMxZGM1ZWExZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNWQ5NDQxMjU0OTQ1MDY0Y2YxYTFjMzNiYmQzYjQ5Zjg5NjZjNTA5MjE3MWU2OTllZjI1OGRmYWI4MWMwNDVjJyxcbiAgICAgICAgJ2Q1NmViMzBiNjk0NjNlNzIzNGY1MTM3YjczYjg0MTc3NDM0ODAwYmFjZWJmYzY4NWZjMzdiYmU5ZWZlNDA3MGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTFkMGZjZjJlYzlkZTY3NWI2MTIxMzZlNWNlNzBkMjcxYzIxNDE3YzlkMmI4YWFhYWMxMzg1OTlkMDcxNzk0MCcsXG4gICAgICAgICdlZGQ3N2Y1MGJjYjVhM2NhYjJlOTA3MzczMDk2NjdmMjY0MTQ2MmE1NDA3MGYzZDUxOTIxMmQzOWMxOTdhNjI5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyMmZiZTE1YzBhZjhjY2M1NzgwYzA3MzVmODRkYmU5YTc5MGJhZGVlODI0NWMwNmM3Y2EzNzMzMWNiMzY5ODAnLFxuICAgICAgICAnYTg1NWJhYmFkNWNkNjBjODhiNDMwYTY5ZjUzYTFhN2EzODI4OTE1NDk2NDc5OWJlNDNkMDZkNzdkMzFkYTA2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMxMTA5MWRkOTg2MGU4ZTIwZWUxMzQ3M2MxMTU1ZjVmNjk2MzVlMzk0NzA0ZWFhNzQwMDk0NTIyNDZjZmE5YjMnLFxuICAgICAgICAnNjZkYjY1NmY4N2QxZjA0ZmZmZDFmMDQ3ODhjMDY4MzA4NzFlYzVhNjRmZWVlNjg1YmQ4MGYwYjEyODZkODM3NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNGMxZmQwNGQzMDFiZTg5YjMxYzA0NDJkM2U2YWMyNDg4MzkyOGI0NWE5MzQwNzgxODY3ZDQyMzJlYzJkYmRmJyxcbiAgICAgICAgJzk0MTQ2ODVlOTdiMWI1OTU0YmQ0NmY3MzAxNzQxMzZkNTdmMWNlZWI0ODc0NDNkYzUzMjE4NTdiYTczYWJlZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMjE5ZWE1ZDZiNTQ3MDFjMWMxNGRlNWI1NTdlYjQyYThkMTNmM2FiYmNkMDhhZmZjYzJhNWU2YjA0OWI4ZDYzJyxcbiAgICAgICAgJzRjYjk1OTU3ZTgzZDQwYjBmNzNhZjQ1NDRjY2NmNmIxZjRiMDhkM2MwN2IyN2ZiOGQ4YzI5NjJhNDAwNzY2ZDEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDdiODc0MGY3NGE4ZmJhYWIxZjY4M2RiOGY0NWRlMjY1NDNhNTQ5MGJjYTYyNzA4NzIzNjkxMjQ2OWEwYjQ0OCcsXG4gICAgICAgICdmYTc3OTY4MTI4ZDljOTJlZTEwMTBmMzM3YWQ0NzE3ZWZmMTVkYjVlZDNjMDQ5YjM0MTFlMDMxNWVhYTQ1OTNiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyZDMxYzIyMmY4ZjZmMGVmODZmN2M5OGQzYTMzMzVlYWQ1YmNkMzJhYmRkOTQyODlmZTRkMzA5MWFhODI0YmYnLFxuICAgICAgICAnNWYzMDMyZjU4OTIxNTZlMzljY2QzZDc5MTViOWUxZGEyZTZkYWM5ZTZmMjZlOTYxMTE4ZDE0Yjg0NjJlMTY2MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NDYxZjM3MTkxNGFiMzI2NzEwNDVhMTU1ZDk4MzFlYTg3OTNkNzdjZDU5NTkyYzQzNDBmODZjYmMxODM0N2I1JyxcbiAgICAgICAgJzhlYzBiYTIzOGI5NmJlYzBjYmRkZGNhZTBhYTQ0MjU0MmVlZTFmZjUwYzk4NmVhNmIzOTg0N2IzY2MwOTJmZjYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUwNzlhZGIxZGYxODYwMDc0MzU2YTI1YWEzODIwNmE2ZDcxNmIyYzNlNjc0NTNkMjg3Njk4YmFkN2IyYjJkNicsXG4gICAgICAgICc4ZGMyNDEyYWFmZTNiZTVjNGM1ZjM3ZTBlY2M1ZjlmNmE0NDY5ODlhZjA0YzRlMjVlYmFhYzQ3OWVjMWM4YzFlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE2ZWM5M2U0NDdlYzgzZjA0NjdiMTgzMDJlZTYyMGY3ZTY1ZGUzMzE4NzRjOWRjNzJiZmQ4NjE2YmE5ZGE2YjUnLFxuICAgICAgICAnNWU0NjMxMTUwZTYyZmI0MGQwZThjMmE3Y2E1ODA0YTM5ZDU4MTg2YTUwZTQ5NzEzOTYyNjc3OGUyNWIwNjc0ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYWE1Zjk4MGMyNDVmNmYwMzg5NzgyOTBhZmE3MGI2YmQ4ODU1ODk3Zjk4YjZhYTQ4NWI5NjA2NWQ1MzdiZDk5JyxcbiAgICAgICAgJ2Y2NWY1ZDNlMjkyYzJlMDgxOWE1MjgzOTFjOTk0NjI0ZDc4NDg2OWQ3ZTZlYTY3ZmIxODA0MTAyNGVkYzA3ZGMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzhjOTQwNzU0NGFjMTMyNjkyZWUxOTEwYTAyNDM5OTU4YWUwNDg3NzE1MTM0MmVhOTZjNGI2YjM1YTQ5ZjUxJyxcbiAgICAgICAgJ2YzZTAzMTkxNjllYjliODVkNTQwNDc5NTUzOWE1ZTY4ZmExZmJkNTgzYzA2NGQyNDYyYjY3NWYxOTRhM2RkYjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDk0ZjRiZTIxOWExYTc3MDE2ZGNkODM4NDMxYWVhMDAwMWNkYzhhZTdhNmZjNjg4NzI2NTc4ZDk3MDI4NTdhNScsXG4gICAgICAgICc0MjI0MmE5NjkyODNhNWYzMzliYTdmMDc1ZTM2YmEyYWY5MjVjZTMwZDc2N2VkNmU1NWY0YjAzMTg4MGQ1NjJjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E1OThhODAzMGRhNmQ4NmM2YmM3ZjJmNTE0NGVhNTQ5ZDI4MjExZWE1OGZhYTcwZWJmNGMxZTY2NWMxZmU5YjUnLFxuICAgICAgICAnMjA0YjVkNmY4NDgyMmMzMDdlNGI0YTcxNDA3MzdhZWMyM2ZjNjNiNjViMzVmODZhMTAwMjZkYmQyZDg2NGU2YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNDE5MTYzNjVhYmIyYjVkMDkxOTJmNWYyZGJlYWZlYzIwOGYwMjBmMTI1NzBhMTg0ZGJhZGMzZTU4NTk1OTk3JyxcbiAgICAgICAgJzRmMTQzNTFkMDA4N2VmYTQ5ZDI0NWIzMjg5ODQ5ODlkNWNhZjk0NTBmMzRiZmMwZWQxNmU5NmI1OGZhOTkxMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDFkNjA2M2E1ODZmYTQ3NWE3MjQ2MDRkYTAzYmM1YjkyYTJlMGQyZTBhMzZhY2ZlNGM3M2E1NTE0NzQyODgxJyxcbiAgICAgICAgJzczODY3ZjU5YzA2NTllODE5MDRmOWExYzc1NDM2OThlNjI1NjJkNjc0NGMxNjljZTdhMzZkZTAxYThkNjE1NCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1ZTk1YmIzOTlhNjk3MWQzNzYwMjY5NDdmODliZGUyZjI4MmIzMzgxMDkyOGJlNGRlZDExMmFjNGQ3MGUyMGQ1JyxcbiAgICAgICAgJzM5ZjIzZjM2NjgwOTA4NWJlZWJmYzcxMTgxMzEzNzc1YTk5YzlhZWQ3ZDhiYTM4YjE2MTM4NGM3NDYwMTI4NjUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzZlNDY0MWE1Mzk0OGZkNDc2YzM5ZjhhOTlmZDk3NGU1ZWMwNzU2NGI1MzE1ZDhiZjk5NDcxYmNhMGVmMmY2NicsXG4gICAgICAgICdkMjQyNGIxYjFhYmU0ZWI4MTY0MjI3YjA4NWM5YWE5NDU2ZWExMzQ5M2ZkNTYzZTA2ZmQ1MWNmNTY5NGM3OGZjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMzNjU4MWVhN2JmYmJiMjkwYzE5MWEyZjUwN2E0MWNmNTY0Mzg0MjE3MGU5MTRmYWVhYjI3YzJjNTc5ZjcyNicsXG4gICAgICAgICdlYWQxMjE2ODU5NWZlMWJlOTkyNTIxMjliNmU1NmIzMzkxZjdhYjE0MTBjZDFlMGVmM2RjZGNhYmQyZmRhMjI0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhhYjg5ODE2ZGFkZmQ2YjZhMWYyNjM0ZmNmMDBlYzg0MDM3ODEwMjVlZDY4OTBjNDg0OTc0MjcwNmJkNDNlZGUnLFxuICAgICAgICAnNmZkY2VmMDlmMmY2ZDBhMDQ0ZTY1NGFlZjYyNDEzNmY1MDNkNDU5YzNlODk4NDU4NThhNDdhOTEyOWNkZDI0ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxZTMzZjFhNzQ2YzljNTc3ODEzMzM0NGQ5Mjk5ZmNhYTIwYjA5MzhlOGFjZmYyNTQ0YmI0MDI4NGI4YzVmYjk0JyxcbiAgICAgICAgJzYwNjYwMjU3ZGQxMWIzYWE5YzhlZDYxOGQyNGVkZmYyMzA2ZDMyMGYxZDAzMDEwZTMzYTdkMjA1N2YzYjNiNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NWI3YzFkY2IzY2VjMWI3ZWU3ZjMwZGVkNzlkZDIwYTBlZDFmNGNjMThjYmNmY2ZhNDEwMzYxZmQ4ZjA4ZjMxJyxcbiAgICAgICAgJzNkOThhOWNkZDAyNmRkNDNmMzkwNDhmMjVhODg0N2Y0ZmNhZmFkMTg5NWQ3YTYzM2M2ZmVkM2MzNWU5OTk1MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMjlkZjlmYmQ4ZDllNDY1MDkyNzVmNGIxMjVkNmQ0NWQ3ZmJlOWEzYjg3OGE3YWY4NzJhMjgwMDY2MWFjNWY1MScsXG4gICAgICAgICdiNGM0ZmU5OWM3NzVhNjA2ZTJkODg2MjE3OTEzOWZmZGE2MWRjODYxYzAxOWU1NWNkMjg3NmViMmEyN2Q4NGInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTBiMWNhZTA2YjBhODQ3YTNmZWE2ZTY3MWFhZjhhZGZkZmU1OGNhMmY3NjgxMDVjODA4MmIyZTQ0OWZjZTI1MicsXG4gICAgICAgICdhZTQzNDEwMmVkZGUwOTU4ZWM0YjE5ZDkxN2E2YTI4ZTZiNzJkYTE4MzRhZmYwZTY1MGYwNDk1MDNhMjk2Y2YyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlOGNlYWZiOWIzZTlhMTM2ZGM3ZmY2N2U4NDAyOTViNDk5ZGZiM2IyMTMzZTRiYTExM2YyZTRjMGUxMjFlNScsXG4gICAgICAgICdjZjIxNzQxMThjOGI2ZDdhNGI0OGY2ZDUzNGNlNWM3OTQyMmMwODZhNjM0NjA1MDJiODI3Y2U2MmEzMjY2ODNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyNGE0NGUwNDdlMTliNmY1YWZiODFjN2NhMmY2OTA4MGE1MDc2Njg5YTAxMDkxOWY0MjcyNWMyYjc4OWEzM2InLFxuICAgICAgICAnNmZiOGQ1NTkxYjQ2NmY4ZmM2M2RiNTBmMWMwZjFjNjkwMTNmOTk2ODg3YjgyNDRkMmNkZWM0MTdhZmVhOGZhMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYTAxNjA2YTdhNmM5Y2RkMjQ5ZmRmY2ZhY2I5OTU4NDAwMWVkZDI4YWJiYWI3N2I1MTA0ZTk4ZThlM2IzNWQ0JyxcbiAgICAgICAgJzMyMmFmNDkwOGM3MzEyYjBjZmJmZTM2OWY3YTdiM2NkYjdkNDQ5NGJjMjgyMzcwMGNmZDY1MjE4OGEzZWE5OGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYWY4YWRkYmYyYjY2MWM4YTZjNjMyODY1NWViOTY2NTEyNTIwMDdkOGM1ZWEzMWJlNGFkMTk2ZGU4Y2UyMTMxZicsXG4gICAgICAgICc2NzQ5ZTY3YzAyOWI4NWY1MmEwMzRlYWZkMDk2ODM2YjI1MjA4MTg2ODBlMjZhYzhmM2RmYmNkYjcxNzQ5NzAwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UzYWUxOTc0NTY2Y2EwNmNjNTE2ZDQ3ZTBmYjE2NWE2NzRhM2RhYmNmY2ExNWU3MjJmMGUzNDUwZjQ1ODg5JyxcbiAgICAgICAgJzJhZWFiZTdlNDUzMTUxMDExNjIxN2YwN2JmNGQwNzMwMGRlOTdlNDg3NGY4MWY1MzM0MjBhNzJlZWIwYmQ2YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTkxZWUzNTUzMTNkOTk3MjFjZjY5OTNmZmVkMWUzZTMwMTk5M2ZmM2VkMjU4ODAyMDc1ZWE4Y2VkMzk3ZTI0NicsXG4gICAgICAgICdiMGVhNTU4YTExM2MzMGJlYTYwZmM0Nzc1NDYwYzc5MDFmZjBiMDUzZDI1Y2EyYmRlZWU5OGYxYTRiZTVkMTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzExMzk2ZDU1ZmRhNTRjNDlmMTlhYTk3MzE4ZDhkYTYxZmE4NTg0ZTQ3YjA4NDk0NTA3N2NmMDMyNTViNTI5ODQnLFxuICAgICAgICAnOTk4Yzc0YThjZDQ1YWMwMTI4OWQ1ODMzYTdiZWI0NzQ0ZmY1MzZiMDFiMjU3YmU0YzU3NjdiZWE5M2VhNTdhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczYzVkMmExYmEzOWM1YTE3OTAwMDA3MzhjOWUwYzQwYjhkY2RmZDU0Njg3NTRiNjQwNTU0MDE1N2UwMTdhYTdhJyxcbiAgICAgICAgJ2IyMjg0Mjc5OTk1YTM0ZTJmOWQ0ZGU3Mzk2ZmMxOGI4MGY5YjhiOWZkZDI3MGY2NjYxZjc5Y2E0YzgxYmQyNTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2M4NzA0YjhhNjBhMGRlZmEzYTk5YTcyOTlmMmU5YzNmYmMzOTVhZmIwNGFjMDc4NDI1ZWY4YTE3OTNjYzAzMCcsXG4gICAgICAgICdiZGQ0NjAzOWZlZWQxNzg4MWQxZTA4NjJkYjM0N2Y4Y2YzOTViNzRmYzRiY2RjNGU5NDBiNzRlM2FjMWYxYjEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M1MzNlNGY3ZWE4NTU1YWFjZDk3NzdhYzVjYWQyOWI5N2RkNGRlZmNjYzUzZWU3ZWEyMDQxMTliMjg4OWIxOTcnLFxuICAgICAgICAnNmYwYTI1NmJjNWVmZGY0MjlhMmZiNjI0MmYxYTQzYTJkOWI5MjViYjRhNGIzYTI2YmI4ZTBmNDVlYjU5NjA5NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjMTRmOGYyY2NiMjdkNmYxMDlmNmQwOGQwM2NjOTZhNjliYThjMzRlZWMwN2JiY2Y1NjZkNDhlMzNkYTY1OTMnLFxuICAgICAgICAnYzM1OWQ2OTIzYmIzOThmN2ZkNDQ3M2UxNmZlMWMyODQ3NWI3NDBkZDA5ODA3NWU2YzBlODY0OTExM2RjM2EzOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNmNiYzMwNDZiYzZhNDUwYmFjMjQ3ODlmYTE3MTE1YTRjOTczOWVkNzVmOGYyMWNlNDQxZjcyZTBiOTBlNmVmJyxcbiAgICAgICAgJzIxYWU3ZjQ2ODBlODg5YmIxMzA2MTllMmMwZjk1YTM2MGNlYjU3M2M3MDYwMzEzOTg2MmFmZDYxN2ZhOWI5ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNDdkNmQ5YTAyYzQ4OTI3ZWJmYjg2YzEzNTliMWNhZjEzMGEzYzAyNjdkMTFjZTYzNDRiMzlmOTlkNDNjYzM4JyxcbiAgICAgICAgJzYwZWE3ZjYxYTM1MzUyNGQxYzk4N2Y2ZWNlYzkyZjA4NmQ1NjVhYjY4Nzg3MGNiMTI2ODlmZjFlMzFjNzQ0NDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGE2NTQ1ZDIxODFkYjhkOTgzZjdkY2IzNzVlZjU4NjZkNDdjNjdiMWJmMzFjOGNmODU1ZWY3NDM3YjcyNjU2YScsXG4gICAgICAgICc0OWI5NjcxNWFiNjg3OGE3OWU3OGYwN2NlNTY4MGM1ZDY2NzMwNTFiNDkzNWJkODk3ZmVhODI0Yjc3ZGMyMDhhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MDc0N2NjOWQwMTJjYjFhMTNiODE0ODMwOWM2ZGU3ZWMyNWQ2OTQ1ZDY1NzE0NmI5ZDU5OTRiOGZlYjExMTEnLFxuICAgICAgICAnNWNhNTYwNzUzYmUyYTEyZmM2ZGU2Y2FmMmNiNDg5NTY1ZGI5MzYxNTZiOTUxNGUxYmI1ZTgzMDM3ZTBmYTJkNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTQyYzhlYzgyYzk5Nzk4Y2NmM2E2MTBiZTg3MGU3ODMzOGM3ZjcxMzM0OGJkMzRjODIwM2VmNDAzN2YzNTAyJyxcbiAgICAgICAgJzc1NzFkNzRlZTVlMGZiOTJhN2E4YjMzYTA3NzgzMzQxYTU0OTIxNDRjYzU0YmNjNDBhOTQ0NzM2OTM2MDY0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzc3NWFiNzA4OWJjNmFmODIzYWJhMmUxYWY3MGIyMzZkMjUxY2FkYjBjODY3NDMyODc1MjJhMWIzYjBkZWRlYScsXG4gICAgICAgICdiZTUyZDEwN2JjZmEwOWQ4YmNiOTczNmE4MjhjZmE3ZmFjOGRiMTdiZjdhNzZhMmM0MmFkOTYxNDA5MDE4Y2Y3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NlZTMxY2JmN2UzNGVjMzc5ZDk0ZmI4MTRkM2Q3NzVhZDk1NDU5NWQxMzE0YmE4ODQ2OTU5ZTNlODJmNzRlMjYnLFxuICAgICAgICAnOGZkNjRhMTRjMDZiNTg5YzI2Yjk0N2FlMmJjZjZiZmEwMTQ5ZWYwYmUxNGVkNGQ4MGY0NDhhMDFjNDNiMWM2ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNGY5ZWFlYTA5YjY5MTc2MTlmNmVhNmE0ZWI1NDY0ZWZkZGI1OGZkNDViMWViZWZjZGMxYTAxZDA4YjQ3OTg2JyxcbiAgICAgICAgJzM5ZTVjOTkyNWI1YTU0YjA3NDMzYTRmMThjNjE3MjZmOGJiMTMxYzAxMmNhNTQyZWIyNGE4YWMwNzIwMDY4MmEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDQyNjNkZmMzZDJkZjkyM2EwMTc5YTQ4OTY2ZDMwY2U4NGUyNTE1YWZjM2RjY2MxYjc3OTA3NzkyZWJjYzYwZScsXG4gICAgICAgICc2MmRmYWYwN2EwZjc4ZmViMzBlMzBkNjI5NTg1M2NlMTg5ZTEyNzc2MGFkNmNmN2ZhZTE2NGUxMjJhMjA4ZDU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ4NDU3NTI0ODIwZmE2NWE0ZjhkMzVlYjY5MzA4NTdjMDAzMmFjYzBhNGEyZGU0MjIyMzNlZWRhODk3NjEyYzQnLFxuICAgICAgICAnMjVhNzQ4YWIzNjc5NzlkOTg3MzNjMzhhMWZhMWMyZTdkYzZjYzA3ZGIyZDYwYTlhZTdhNzZhYWE0OWJkMGY3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZmVlZWYxODgxMTAxZjJjYjExNjQ0ZjNhMmFmZGZjMjA0NWUxOTkxOTE1MjkyM2YzNjdhMTc2N2MxMWNjZWRhJyxcbiAgICAgICAgJ2VjZmI3MDU2Y2YxZGUwNDJmOTQyMGJhYjM5Njc5M2MwYzM5MGJkZTc0YjRiYmRmZjE2YTgzYWUwOWE5YTc1MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNmQ3ZWY2YjE3NTQzZjgzNzNjNTczZjQ0ZTFmMzg5ODM1ZDg5YmNiYzYwNjJjZWQzNmM4MmRmODNiOGZhZTg1OScsXG4gICAgICAgICdjZDQ1MGVjMzM1NDM4OTg2ZGZlZmExMGM1N2ZlYTliY2M1MjFhMDk1OWIyZDgwYmJmNzRiMTkwZGNhNzEyZDEwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3NTYwNWQ1OTEwMmE1YTI2ODQ1MDBkM2I5OTFmMmUzZjNjODhiOTMyMjU1NDcwMzVhZjI1YWY2NmUwNDU0MWYnLFxuICAgICAgICAnZjVjNTQ3NTRhOGY3MWVlNTQwYjliNDg3Mjg0NzNlMzE0ZjcyOWFjNTMwOGIwNjkzODM2MDk5MGUyYmZhZDEyNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlYjk4NjYwZjRjNGRmYWEwNmEyYmU0NTNkNTAyMGJjOTlhMGMyZTYwYWJlMzg4NDU3ZGQ0M2ZlZmIxZWQ2MjBjJyxcbiAgICAgICAgJzZjYjlhODg3NmQ5Y2I4NTIwNjA5YWYzYWRkMjZjZDIwYTBhN2NkOGE5NDExMTMxY2U4NWY0NDEwMDA5OTIyM2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTNlODdiMDI3ZDg1MTRkMzU5MzlmMmU2ODkyYjE5OTIyMTU0NTk2OTQxODg4MzM2ZGMzNTYzZTNiOGRiYTk0MicsXG4gICAgICAgICdmZWY1YTNjNjgwNTlhNmRlYzVkNjI0MTE0YmYxZTkxYWFjMmI5ZGE1NjhkNmFiZWIyNTcwZDU1NjQ2YjhhZGYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VlMTYzMDI2ZTlmZDZmZTAxN2MzOGYwNmE1YmU2ZmMxMjU0MjRiMzcxY2UyNzA4ZTdiZjQ0OTE2OTFlNTc2NGEnLFxuICAgICAgICAnMWFjYjI1MGYyNTVkZDYxYzQzZDk0Y2NjNjcwZDBmNThmNDlhZTNmYTE1Yjk2NjIzZTU0MzBkYTBhZDZjNjJiMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiMjY4ZjVlZjlhZDUxZTRkNzhkZTNhNzUwYzJkYzg5YjFlNjI2ZDQzNTA1ODY3OTk5OTMyZTVkYjMzYWYzZDgwJyxcbiAgICAgICAgJzVmMzEwZDRiM2M5OWI5ZWJiMTlmNzdkNDFjMWRlZTAxOGNmMGQzNGZkNDE5MTYxNDAwM2U5NDVhMTIxNmU0MjMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmYwN2YzMTE4YTlkZjAzNWU5ZmFkODVlYjZjN2JmZTQyYjAyZjAxY2E5OWNlZWEzYmY3ZmZkYmE5M2M0NzUwZCcsXG4gICAgICAgICc0MzgxMzZkNjAzZTg1OGEzYTVjNDQwYzM4ZWNjYmFkZGMxZDI5NDIxMTRlMmVkZGQ0NzQwZDA5OGNlZDFmMGQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhkOGI5ODU1YzdjMDUyYTM0MTQ2ZmQyMGZmYjY1OGJlYTRiOWY2OWUwZDgyNWViZWMxNmU4YzNjZTJiNTI2YTEnLFxuICAgICAgICAnY2RiNTU5ZWVkYzJkNzlmOTI2YmFmNDRmYjg0ZWE0ZDQ0YmNmNTBmZWU1MWQ3Y2ViMzBlMmU3ZjQ2MzAzNjc1OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MmRiMGI1Mzg0ZGZiZjA1YmZhOWQ0NzJkN2FlMjZkZmU0Yjg1MWNlY2E5MWIxZWJhNTQyNjMxODBkYTMyYjYzJyxcbiAgICAgICAgJ2MzYjk5N2QwNTBlZTVkNDIzZWJhZjY2YTZkYjlmNTdiMzE4MGM5MDI4NzU2NzlkZTkyNGI2OWQ4NGE3YjM3NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNjJmOTQ5MGQzZDUxZGE2Mzk1ZWZkMjRlODA5MTljYzdkMGYyOWMzZjNmYTQ4YzZmZmY1NDNiZWNiZDQzMzUyJyxcbiAgICAgICAgJzZkODlhZDdiYTQ4NzZiMGIyMmMyY2EyODBjNjgyODYyZjM0MmM4NTkxZjFkYWY1MTcwZTA3YmZkOWNjYWZhN2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnN2YzMGVhMjQ3NmIzOTliNDk1NzUwOWM4OGY3N2QwMTkxYWZhMmZmNWNiN2IxNGZkNmQ4ZTdkNjVhYWFiMTE5MycsXG4gICAgICAgICdjYTVlZjdkNGIyMzFjOTRjM2IxNTM4OWE1ZjYzMTFlOWRhZmY3YmI2N2IxMDNlOTg4MGVmNGJmZjYzN2FjYWVjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUwOThmZjFlMWQ5ZjE0ZmI0NmEyMTBmYWRhNmM5MDNmZWYwZmI3YjRhMWRkMWQ5YWM2MGEwMzYxODAwYjdhMDAnLFxuICAgICAgICAnOTczMTE0MWQ4MWZjOGY4MDg0ZDM3YzZlNzU0MjAwNmIzZWUxYjQwZDYwZGZlNTM2MmE1YjEzMmZkMTdkZGMwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMyYjc4YzdkZTllZTUxMmE3Mjg5NWJlNmI5Y2JlZmE2ZTJmM2M0Y2NjZTQ0NWM5NmI5ZjJjODFlMjc3OGFkNTgnLFxuICAgICAgICAnZWUxODQ5ZjUxM2RmNzFlMzJlZmMzODk2ZWUyODI2MGM3M2JiODA1NDdhZTIyNzViYTQ5NzIzNzc5NGM4NzUzYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMmNiNzRmZGRjOGU5ZmJjZDA3NmVlZjJhN2M3MmIwY2UzN2Q1MGYwODI2OWRmYzA3NGI1ODE1NTA1NDdhNGY3JyxcbiAgICAgICAgJ2QzYWEyZWQ3MWM5ZGQyMjQ3YTYyZGYwNjI3MzZlYjBiYWRkZWE5ZTM2MTIyZDJiZTg2NDFhYmNiMDA1Y2M0YTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQzODQ0NzU2NmQ0ZDdiZWRhZGMyOTk0OTZhYjM1NzQyNjAwOWEzNWYyMzVjYjE0MWJlMGQ5OWNkMTBhZTNhOCcsXG4gICAgICAgICdjNGUxMDIwOTE2OTgwYTRkYTVkMDFhYzVlNmFkMzMwNzM0ZWYwZDc5MDY2MzFjNGYyMzkwNDI2YjJlZGQ3OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQxNjJkNDg4Yjg5NDAyMDM5YjU4NGM2ZmM2YzMwODg3MDU4N2Q5YzQ2ZjY2MGI4NzhhYjY1YzgyYzcxMWQ2N2UnLFxuICAgICAgICAnNjcxNjNlOTAzMjM2Mjg5Zjc3NmYyMmMyNWZiOGEzYWZjMTczMmYyYjg0YjRlOTVkYmRhNDdhZTVhMDg1MjY0OSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczZmFkM2ZhODRjYWYwZjM0ZjBmODliZmQyZGNmNTRmYzE3NWQ3NjdhZWMzZTUwNjg0ZjNiYTRhNGJmNWY2ODNkJyxcbiAgICAgICAgJ2NkMWJjN2NiNmNjNDA3YmIyZjBjYTY0N2M3MThhNzMwY2Y3MTg3MmU3ZDBkMmE1M2ZhMjBlZmNkZmU2MTgyNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NzRmMjYwMGEzMDA3YTAwNTY4YzFhN2NlMDVkMDgxNmMxZmI4NGJmMTM3MDc5OGYxYzY5NTMyZmFlYjFhODZiJyxcbiAgICAgICAgJzI5OWQyMWY5NDEzZjMzYjNlZGY0M2IyNTcwMDQ1ODBiNzBkYjU3ZGEwYjE4MjI1OWUwOWVlY2M2OWUwZDM4YTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDMyZjRkYTU0YWRlNzRhYmI4MWI4MTVhZDFmYjNiMjYzZDgyZDZjNjkyNzE0YmNmZjg3ZDI5YmQ1ZWU5ZjA4ZicsXG4gICAgICAgICdmOTQyOWU3MzhiOGU1M2I5NjhlOTkwMTZjMDU5NzA3NzgyZTE0ZjQ1MzUzNTlkNTgyZmM0MTY5MTBiM2VlYTg3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwZTRlNjcwNDM1Mzg1NTU2ZTU5MzY1NzEzNTg0NWQzNmZiYjY5MzFmNzJiMDhjYjFlZDk1NGYxZTNjZTNmZjYnLFxuICAgICAgICAnNDYyZjliY2U2MTk4OTg2Mzg0OTkzNTAxMTNiYmM5YjEwYTg3OGQzNWRhNzA3NDBkYzY5NWE1NTllYjg4ZGI3YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiZTIwNjIwMDNjNTFjYzMwMDQ2ODI5MDQzMzBlNGRlZTdmM2RjZDEwYjAxZTU4MGJmMTk3MWIwNGQ0Y2FkMjk3JyxcbiAgICAgICAgJzYyMTg4YmM0OWQ2MWU1NDI4NTczZDQ4YTc0ZTFjNjU1YjFjNjEwOTA5MDU2ODJhMGQ1NTU4ZWQ3MmRjY2I5YmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTMxNDQ0MjNhY2UzNDUxZWQyOWUwZmI5YWMyYWYyMTFjYjZlODRhNjAxZGY1OTkzYzQxOTg1OWZmZjVkZjA0YScsXG4gICAgICAgICc3YzEwZGZiMTY0YzM0MjVmNWM3MWEzZjlkNzk5MjAzOGYxMDY1MjI0ZjcyYmI5ZDFkOTAyYTZkMTMwMzdiNDdjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IwMTVmODA0NGY1ZmNiZGNmMjFjYTI2ZDZjMzRmYjgxOTc4MjkyMDVjN2I3ZDJhN2NiNjY0MThjMTU3YjExMmMnLFxuICAgICAgICAnYWI4YzFlMDg2ZDA0ZTgxMzc0NGE2NTViMmRmOGQ1ZjgzYjNjZGM2ZmFhMzA4OGMxZDNhZWExNDU0ZTNhMWQ1ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNWU5ZTFkYTY0OWQ5N2Q4OWU0ODY4MTE3YTQ2NWEzYTRmOGExOGRlNTdhMTQwZDM2YjNmMmFmMzQxYTIxYjUyJyxcbiAgICAgICAgJzRjYjA0NDM3ZjM5MWVkNzMxMTFhMTNjYzFkNGRkMGRiMTY5MzQ2NWMyMjQwNDgwZDg5NTVlODU5MmYyNzQ0N2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDNhZTQxMDQ3ZGQ3Y2EwNjVkYmY4ZWQ3N2I5OTI0Mzk5ODMwMDVjZDcyZTE2ZDZmOTk2YTUzMTZkMzY5NjZiYicsXG4gICAgICAgICdiZDFhZWIyMWFkMjJlYmIyMmExMGYwMzAzNDE3YzZkOTY0ZjhjZGQ3ZGYwYWNhNjE0YjEwZGMxNGQxMjVhYzQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzQ2M2UyNzYzZDg4NWY5NThmYzY2Y2RkMjI4MDBmMGE0ODcxOTdkMGE4MmUzNzdiNDlmODBhZjg3Yzg5N2IwNjUnLFxuICAgICAgICAnYmZlZmFjZGIwZTVkMGZkN2RmM2EzMTFhOTRkZTA2MmIyNmI4MGM2MWZiYzk3NTA4Yjc5OTkyNjcxZWY3Y2E3ZidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTg1ZmRmZDEyN2MwNTY3YzZmNTNlYzFiYjYzZWMzMTU4ZTU5N2M0MGJmZTc0N2M4M2NkZGZjOTEwNjQxOTE3JyxcbiAgICAgICAgJzYwM2MxMmRhZjNkOTg2MmVmMmIyNWZlMWRlMjg5YWVkMjRlZDI5MWUwZWM2NzA4NzAzYTViZDU2N2YzMmVkMDMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzRhMWFkNmI1Zjc2ZTM5ZGIyZGQyNDk0MTBlYWM3Zjk5ZTc0YzU5Y2I4M2QyZDBlZDVmZjE1NDNkYTc3MDNlOScsXG4gICAgICAgICdjYzYxNTdlZjE4YzljNjNjZDYxOTNkODM2MzFiYmVhMDA5M2UwOTY4OTQyZThjMzNkNTczN2ZkNzkwZTBkYjA4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzMwNjgyYTUwNzAzMzc1ZjYwMmQ0MTY2NjRiYTE5YjdmYzliYWI0MmM3Mjc0NzQ2M2E3MWQwODk2YjIyZjZkYTMnLFxuICAgICAgICAnNTUzZTA0ZjZiMDE4YjRmYTZjOGYzOWU3ZjMxMWQzMTc2MjkwZDBlMGYxOWNhNzNmMTc3MTRkOTk3N2EyMmZmOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5ZTIxNThmMGQ3YzBkNWYyNmMzNzkxZWZlZmE3OTU5NzY1NGU3YTJiMjQ2NGY1MmIxZWU2YzEzNDc3NjllZjU3JyxcbiAgICAgICAgJzcxMmZjZGQxYjkwNTNmMDkwMDNhMzQ4MWZhNzc2MmU5ZmZkN2M4ZWYzNWEzODUwOWUyZmJmMjYyOTAwODM3MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzZlMjY5ODlhNDNjOWNmZWJhNDAyOWMyMDI1MzhjMjgxNzJlNTY2ZTNjNGZjZTczMjI4NTdmM2JlMzI3ZDY2JyxcbiAgICAgICAgJ2VkOGNjOWQwNGIyOWViODc3ZDI3MGI0ODc4ZGM0M2MxOWFlZmQzMWY0ZWVlMDllZTdiNDc4MzRjMWZhNGIxYzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzVkNDZlZmVhMzc3MWU2ZTY4YWJiODlhMTNhZDc0N2VjZjE4OTIzOTNkZmM0ZjFiNzAwNDc4OGM1MDM3NGRhOCcsXG4gICAgICAgICc5ODUyMzkwYTk5NTA3Njc5ZmQwYjg2ZmQyYjM5YTg2OGQ3ZWZjMjIxNTEzNDZlMWEzY2E0NzI2NTg2YTZiZWQ4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwOWEyMGM2N2Q2NDkwMGZmYjY5OGM0YzgyNWY2ZDVmMjMxMGZiMDQ1MWM4NjkzNDViNzMxOWY2NDU2MDU3MjEnLFxuICAgICAgICAnOWU5OTQ5ODBkOTkxN2UyMmI3NmIwNjE5MjdmYTA0MTQzZDA5NmNjYzU0OTYzZTZhNWViZmE1ZjNmOGUyODZjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxYjM4OTAzYTQzZjdmMTE0ZWQ0NTAwYjRlYWM3MDgzZmRlZmVjZTFjZjI5YzYzNTI4ZDU2MzQ0NmY5NzJjMTgwJyxcbiAgICAgICAgJzQwMzZlZGM5MzFhNjBhZTg4OTM1M2Y3N2ZkNTNkZTRhMjcwOGIyNmI2ZjVkYTcyYWQzMzk0MTE5ZGFmNDA4ZjknXG4gICAgICBdXG4gICAgXVxuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KGVsbGlwdGljLmN1cnZlcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zKSwgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGVsbGlwdGljLmN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgZWxsaXB0aWMuY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgZWxsaXB0aWMucmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCdcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykge1xuICAgIHZhciBrID0gb3B0aW9ucy5rID9cbiAgICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHZhciBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5fcmVzZWVkID0gbnVsbDtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMuSyA9IG51bGw7XG4gIHRoaXMuViA9IG51bGw7XG5cbiAgdmFyIGVudHJvcHkgPSB1dGlscy50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICdoZXgnKTtcbiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jIHx8ICdoZXgnKTtcbiAgdmFyIHBlcnMgPSB1dGlscy50b0FycmF5KG9wdGlvbnMucGVycywgb3B0aW9ucy5wZXJzRW5jIHx8ICdoZXgnKTtcbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcbiAgdGhpcy5faW5pdChlbnRyb3B5LCBub25jZSwgcGVycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHO1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKSB7XG4gIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTtcblxuICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgdGhpcy5WID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5WLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5LW2ldID0gMHgwMDtcbiAgICB0aGlzLlZbaV0gPSAweDAxO1xuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHNlZWQpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gMHgxMDAwMDAwMDAwMDAwOyAgLy8gMl40OFxufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl9obWFjID0gZnVuY3Rpb24gaG1hYygpIHtcbiAgcmV0dXJuIG5ldyBoYXNoLmhtYWModGhpcy5oYXNoLCB0aGlzLkspO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2VlZCkge1xuICB2YXIga21hYyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDAgXSk7XG4gIGlmIChzZWVkKVxuICAgIGttYWMgPSBrbWFjLnVwZGF0ZShzZWVkKTtcbiAgdGhpcy5LID0ga21hYy5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICBpZiAoIXNlZWQpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuSyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMSBdKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWVkKVxuICAgICAgICAgICAgICAgLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUucmVzZWVkID0gZnVuY3Rpb24gcmVzZWVkKGVudHJvcHksIGVudHJvcHlFbmMsIGFkZCwgYWRkRW5jKSB7XG4gIC8vIE9wdGlvbmFsIGVudHJvcHkgZW5jXG4gIGlmICh0eXBlb2YgZW50cm9weUVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW50cm9weUVuYztcbiAgICBlbnRyb3B5RW5jID0gbnVsbDtcbiAgfVxuXG4gIGVudHJvcHkgPSB1dGlscy50b0FycmF5KGVudHJvcHksIGVudHJvcHlFbmMpO1xuICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5fcmVzZWVkID4gdGhpcy5yZXNlZWRJbnRlcnZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc2VlZCBpcyByZXF1aXJlZCcpO1xuXG4gIC8vIE9wdGlvbmFsIGVuY29kaW5nXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuXG4gIC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YVxuICBpZiAoYWRkKSB7XG4gICAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyB8fCAnaGV4Jyk7XG4gICAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIH1cblxuICB2YXIgdGVtcCA9IFtdO1xuICB3aGlsZSAodGVtcC5sZW5ndGggPCBsZW4pIHtcbiAgICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gICAgdGVtcCA9IHRlbXAuY29uY2F0KHRoaXMuVik7XG4gIH1cblxuICB2YXIgcmVzID0gdGVtcC5zbGljZSgwLCBsZW4pO1xuICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgdGhpcy5fcmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIEtleVBhaXIoZWMsIG9wdGlvbnMpIHtcbiAgdGhpcy5lYyA9IGVjO1xuICB0aGlzLnByaXYgPSBudWxsO1xuICB0aGlzLnB1YiA9IG51bGw7XG5cbiAgLy8gS2V5UGFpcihlYywgeyBwcml2OiAuLi4sIHB1YjogLi4uIH0pXG4gIGlmIChvcHRpb25zLnByaXYpXG4gICAgdGhpcy5faW1wb3J0UHJpdmF0ZShvcHRpb25zLnByaXYsIG9wdGlvbnMucHJpdkVuYyk7XG4gIGlmIChvcHRpb25zLnB1YilcbiAgICB0aGlzLl9pbXBvcnRQdWJsaWMob3B0aW9ucy5wdWIsIG9wdGlvbnMucHViRW5jKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlYywgcHViLCBlbmMpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwdWI6IHB1YixcbiAgICBwdWJFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIuZnJvbVByaXZhdGUgPSBmdW5jdGlvbiBmcm9tUHJpdmF0ZShlYywgcHJpdiwgZW5jKSB7XG4gIGlmIChwcml2IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gcHJpdjtcblxuICByZXR1cm4gbmV3IEtleVBhaXIoZWMsIHtcbiAgICBwcml2OiBwcml2LFxuICAgIHByaXZFbmM6IGVuY1xuICB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUoKSB7XG4gIHZhciBwdWIgPSB0aGlzLmdldFB1YmxpYygpO1xuXG4gIGlmIChwdWIuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ0ludmFsaWQgcHVibGljIGtleScgfTtcbiAgaWYgKCFwdWIudmFsaWRhdGUoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdQdWJsaWMga2V5IGlzIG5vdCBhIHBvaW50JyB9O1xuICBpZiAoIXB1Yi5tdWwodGhpcy5lYy5jdXJ2ZS5uKS5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSAqIE4gIT0gTycgfTtcblxuICByZXR1cm4geyByZXN1bHQ6IHRydWUsIHJlYXNvbjogbnVsbCB9O1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGNvbXBhY3QsIGVuYykge1xuICAvLyBjb21wYWN0IGlzIG9wdGlvbmFsIGFyZ3VtZW50XG4gIGlmICh0eXBlb2YgY29tcGFjdCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmMgPSBjb21wYWN0O1xuICAgIGNvbXBhY3QgPSBudWxsO1xuICB9XG5cbiAgaWYgKCF0aGlzLnB1YilcbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuZy5tdWwodGhpcy5wcml2KTtcblxuICBpZiAoIWVuYylcbiAgICByZXR1cm4gdGhpcy5wdWI7XG5cbiAgcmV0dXJuIHRoaXMucHViLmVuY29kZShlbmMsIGNvbXBhY3QpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHJpdmF0ZSA9IGZ1bmN0aW9uIGdldFByaXZhdGUoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0aGlzLnByaXYudG9TdHJpbmcoMTYsIDIpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMucHJpdjtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLl9pbXBvcnRQcml2YXRlID0gZnVuY3Rpb24gX2ltcG9ydFByaXZhdGUoa2V5LCBlbmMpIHtcbiAgdGhpcy5wcml2ID0gbmV3IEJOKGtleSwgZW5jIHx8IDE2KTtcblxuICAvLyBFbnN1cmUgdGhhdCB0aGUgcHJpdiB3b24ndCBiZSBiaWdnZXIgdGhhbiBuLCBvdGhlcndpc2Ugd2UgbWF5IGZhaWxcbiAgLy8gaW4gZml4ZWQgbXVsdGlwbGljYXRpb24gbWV0aG9kXG4gIHRoaXMucHJpdiA9IHRoaXMucHJpdi51bW9kKHRoaXMuZWMuY3VydmUubik7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHVibGljID0gZnVuY3Rpb24gX2ltcG9ydFB1YmxpYyhrZXksIGVuYykge1xuICBpZiAoa2V5LnggfHwga2V5LnkpIHtcbiAgICAvLyBNb250Z29tZXJ5IHBvaW50cyBvbmx5IGhhdmUgYW4gYHhgIGNvb3JkaW5hdGUuXG4gICAgLy8gV2VpZXJzdHJhc3MvRWR3YXJkcyBwb2ludHMgb24gdGhlIG90aGVyIGhhbmQgaGF2ZSBib3RoIGB4YCBhbmRcbiAgICAvLyBgeWAgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ21vbnQnKSB7XG4gICAgICBhc3NlcnQoa2V5LngsICdOZWVkIHggY29vcmRpbmF0ZScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnc2hvcnQnIHx8XG4gICAgICAgICAgICAgICB0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdlZHdhcmRzJykge1xuICAgICAgYXNzZXJ0KGtleS54ICYmIGtleS55LCAnTmVlZCBib3RoIHggYW5kIHkgY29vcmRpbmF0ZScpO1xuICAgIH1cbiAgICB0aGlzLnB1YiA9IHRoaXMuZWMuY3VydmUucG9pbnQoa2V5LngsIGtleS55KTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLmRlY29kZVBvaW50KGtleSwgZW5jKTtcbn07XG5cbi8vIEVDREhcbktleVBhaXIucHJvdG90eXBlLmRlcml2ZSA9IGZ1bmN0aW9uIGRlcml2ZShwdWIpIHtcbiAgcmV0dXJuIHB1Yi5tdWwodGhpcy5wcml2KS5nZXRYKCk7XG59O1xuXG4vLyBFQ0RTQVxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZWMuc2lnbihtc2csIHRoaXMsIGVuYywgb3B0aW9ucyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUpIHtcbiAgcmV0dXJuIHRoaXMuZWMudmVyaWZ5KG1zZywgc2lnbmF0dXJlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICByZXR1cm4gJzxLZXkgcHJpdjogJyArICh0aGlzLnByaXYgJiYgdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKSkgK1xuICAgICAgICAgJyBwdWI6ICcgKyAodGhpcy5wdWIgJiYgdGhpcy5wdWIuaW5zcGVjdCgpKSArICcgPic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBTaWduYXR1cmUob3B0aW9ucywgZW5jKSB7XG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBvcHRpb25zO1xuXG4gIGlmICh0aGlzLl9pbXBvcnRERVIob3B0aW9ucywgZW5jKSlcbiAgICByZXR1cm47XG5cbiAgYXNzZXJ0KG9wdGlvbnMuciAmJiBvcHRpb25zLnMsICdTaWduYXR1cmUgd2l0aG91dCByIG9yIHMnKTtcbiAgdGhpcy5yID0gbmV3IEJOKG9wdGlvbnMuciwgMTYpO1xuICB0aGlzLnMgPSBuZXcgQk4ob3B0aW9ucy5zLCAxNik7XG4gIGlmIChvcHRpb25zLnJlY292ZXJ5UGFyYW0gPT09IHVuZGVmaW5lZClcbiAgICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuICBlbHNlXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gb3B0aW9ucy5yZWNvdmVyeVBhcmFtO1xufVxubW9kdWxlLmV4cG9ydHMgPSBTaWduYXR1cmU7XG5cbmZ1bmN0aW9uIFBvc2l0aW9uKCkge1xuICB0aGlzLnBsYWNlID0gMDtcbn1cblxuZnVuY3Rpb24gZ2V0TGVuZ3RoKGJ1ZiwgcCkge1xuICB2YXIgaW5pdGlhbCA9IGJ1ZltwLnBsYWNlKytdO1xuICBpZiAoIShpbml0aWFsICYgMHg4MCkpIHtcbiAgICByZXR1cm4gaW5pdGlhbDtcbiAgfVxuICB2YXIgb2N0ZXRMZW4gPSBpbml0aWFsICYgMHhmO1xuICB2YXIgdmFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZiA9IHAucGxhY2U7IGkgPCBvY3RldExlbjsgaSsrLCBvZmYrKykge1xuICAgIHZhbCA8PD0gODtcbiAgICB2YWwgfD0gYnVmW29mZl07XG4gIH1cbiAgcC5wbGFjZSA9IG9mZjtcbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gcm1QYWRkaW5nKGJ1Zikge1xuICB2YXIgaSA9IDA7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCFidWZbaV0gJiYgIShidWZbaSArIDFdICYgMHg4MCkgJiYgaSA8IGxlbikge1xuICAgIGkrKztcbiAgfVxuICBpZiAoaSA9PT0gMCkge1xuICAgIHJldHVybiBidWY7XG4gIH1cbiAgcmV0dXJuIGJ1Zi5zbGljZShpKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS5faW1wb3J0REVSID0gZnVuY3Rpb24gX2ltcG9ydERFUihkYXRhLCBlbmMpIHtcbiAgZGF0YSA9IHV0aWxzLnRvQXJyYXkoZGF0YSwgZW5jKTtcbiAgdmFyIHAgPSBuZXcgUG9zaXRpb24oKTtcbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgzMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoKGxlbiArIHAucGxhY2UpICE9PSBkYXRhLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBybGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICB2YXIgciA9IGRhdGEuc2xpY2UocC5wbGFjZSwgcmxlbiArIHAucGxhY2UpO1xuICBwLnBsYWNlICs9IHJsZW47XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHNsZW4gPSBnZXRMZW5ndGgoZGF0YSwgcCk7XG4gIGlmIChkYXRhLmxlbmd0aCAhPT0gc2xlbiArIHAucGxhY2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHMgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHNsZW4gKyBwLnBsYWNlKTtcbiAgaWYgKHJbMF0gPT09IDAgJiYgKHJbMV0gJiAweDgwKSkge1xuICAgIHIgPSByLnNsaWNlKDEpO1xuICB9XG4gIGlmIChzWzBdID09PSAwICYmIChzWzFdICYgMHg4MCkpIHtcbiAgICBzID0gcy5zbGljZSgxKTtcbiAgfVxuXG4gIHRoaXMuciA9IG5ldyBCTihyKTtcbiAgdGhpcy5zID0gbmV3IEJOKHMpO1xuICB0aGlzLnJlY292ZXJ5UGFyYW0gPSBudWxsO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gY29uc3RydWN0TGVuZ3RoKGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPCAweDgwKSB7XG4gICAgYXJyLnB1c2gobGVuKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG9jdGV0cyA9IDEgKyAoTWF0aC5sb2cobGVuKSAvIE1hdGguTE4yID4+PiAzKTtcbiAgYXJyLnB1c2gob2N0ZXRzIHwgMHg4MCk7XG4gIHdoaWxlICgtLW9jdGV0cykge1xuICAgIGFyci5wdXNoKChsZW4gPj4+IChvY3RldHMgPDwgMykpICYgMHhmZik7XG4gIH1cbiAgYXJyLnB1c2gobGVuKTtcbn1cblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0RFUiA9IGZ1bmN0aW9uIHRvREVSKGVuYykge1xuICB2YXIgciA9IHRoaXMuci50b0FycmF5KCk7XG4gIHZhciBzID0gdGhpcy5zLnRvQXJyYXkoKTtcblxuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChyWzBdICYgMHg4MClcbiAgICByID0gWyAwIF0uY29uY2F0KHIpO1xuICAvLyBQYWQgdmFsdWVzXG4gIGlmIChzWzBdICYgMHg4MClcbiAgICBzID0gWyAwIF0uY29uY2F0KHMpO1xuXG4gIHIgPSBybVBhZGRpbmcocik7XG4gIHMgPSBybVBhZGRpbmcocyk7XG5cbiAgd2hpbGUgKCFzWzBdICYmICEoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cbiAgdmFyIGFyciA9IFsgMHgwMiBdO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCByLmxlbmd0aCk7XG4gIGFyciA9IGFyci5jb25jYXQocik7XG4gIGFyci5wdXNoKDB4MDIpO1xuICBjb25zdHJ1Y3RMZW5ndGgoYXJyLCBzLmxlbmd0aCk7XG4gIHZhciBiYWNrSGFsZiA9IGFyci5jb25jYXQocyk7XG4gIHZhciByZXMgPSBbIDB4MzAgXTtcbiAgY29uc3RydWN0TGVuZ3RoKHJlcywgYmFja0hhbGYubGVuZ3RoKTtcbiAgcmVzID0gcmVzLmNvbmNhdChiYWNrSGFsZik7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIEtleVBhaXIgPSByZXF1aXJlKCcuL2tleScpO1xudmFyIFNpZ25hdHVyZSA9IHJlcXVpcmUoJy4vc2lnbmF0dXJlJyk7XG5cbmZ1bmN0aW9uIEVERFNBKGN1cnZlKSB7XG4gIGFzc2VydChjdXJ2ZSA9PT0gJ2VkMjU1MTknLCAnb25seSB0ZXN0ZWQgd2l0aCBlZDI1NTE5IHNvIGZhcicpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBFRERTQSkpXG4gICAgcmV0dXJuIG5ldyBFRERTQShjdXJ2ZSk7XG5cbiAgdmFyIGN1cnZlID0gZWxsaXB0aWMuY3VydmVzW2N1cnZlXS5jdXJ2ZTtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLmcgPSBjdXJ2ZS5nO1xuICB0aGlzLmcucHJlY29tcHV0ZShjdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgdGhpcy5wb2ludENsYXNzID0gY3VydmUucG9pbnQoKS5jb25zdHJ1Y3RvcjtcbiAgdGhpcy5lbmNvZGluZ0xlbmd0aCA9IE1hdGguY2VpbChjdXJ2ZS5uLmJpdExlbmd0aCgpIC8gOCk7XG4gIHRoaXMuaGFzaCA9IGhhc2guc2hhNTEyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVERFNBO1xuXG4vKipcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfEtleVBhaXJ9IHNlY3JldCAtIHNlY3JldCBieXRlcyBvciBhIGtleXBhaXJcbiogQHJldHVybnMge1NpZ25hdHVyZX0gLSBzaWduYXR1cmVcbiovXG5FRERTQS5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSwgc2VjcmV0KSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tU2VjcmV0KHNlY3JldCk7XG4gIHZhciByID0gdGhpcy5oYXNoSW50KGtleS5tZXNzYWdlUHJlZml4KCksIG1lc3NhZ2UpO1xuICB2YXIgUiA9IHRoaXMuZy5tdWwocik7XG4gIHZhciBSZW5jb2RlZCA9IHRoaXMuZW5jb2RlUG9pbnQoUik7XG4gIHZhciBzXyA9IHRoaXMuaGFzaEludChSZW5jb2RlZCwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpXG4gICAgICAgICAgICAgICAubXVsKGtleS5wcml2KCkpO1xuICB2YXIgUyA9IHIuYWRkKHNfKS51bW9kKHRoaXMuY3VydmUubik7XG4gIHJldHVybiB0aGlzLm1ha2VTaWduYXR1cmUoeyBSOiBSLCBTOiBTLCBSZW5jb2RlZDogUmVuY29kZWQgfSk7XG59O1xuXG4vKipcbiogQHBhcmFtIHtBcnJheX0gbWVzc2FnZSAtIG1lc3NhZ2UgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8U2lnbmF0dXJlfSBzaWcgLSBzaWcgYnl0ZXNcbiogQHBhcmFtIHtBcnJheXxTdHJpbmd8UG9pbnR8S2V5UGFpcn0gcHViIC0gcHVibGljIGtleVxuKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIHB1YmxpYyBrZXkgbWF0Y2hlcyBzaWcgb2YgbWVzc2FnZVxuKi9cbkVERFNBLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSwgc2lnLCBwdWIpIHtcbiAgbWVzc2FnZSA9IHBhcnNlQnl0ZXMobWVzc2FnZSk7XG4gIHNpZyA9IHRoaXMubWFrZVNpZ25hdHVyZShzaWcpO1xuICB2YXIga2V5ID0gdGhpcy5rZXlGcm9tUHVibGljKHB1Yik7XG4gIHZhciBoID0gdGhpcy5oYXNoSW50KHNpZy5SZW5jb2RlZCgpLCBrZXkucHViQnl0ZXMoKSwgbWVzc2FnZSk7XG4gIHZhciBTRyA9IHRoaXMuZy5tdWwoc2lnLlMoKSk7XG4gIHZhciBScGx1c0FoID0gc2lnLlIoKS5hZGQoa2V5LnB1YigpLm11bChoKSk7XG4gIHJldHVybiBScGx1c0FoLmVxKFNHKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5oYXNoSW50ID0gZnVuY3Rpb24gaGFzaEludCgpIHtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgaGFzaC51cGRhdGUoYXJndW1lbnRzW2ldKTtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShoYXNoLmRpZ2VzdCgpKS51bW9kKHRoaXMuY3VydmUubik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGtleUZyb21QdWJsaWMocHViKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5rZXlGcm9tU2VjcmV0ID0gZnVuY3Rpb24ga2V5RnJvbVNlY3JldChzZWNyZXQpIHtcbiAgcmV0dXJuIEtleVBhaXIuZnJvbVNlY3JldCh0aGlzLCBzZWNyZXQpO1xufTtcblxuRUREU0EucHJvdG90eXBlLm1ha2VTaWduYXR1cmUgPSBmdW5jdGlvbiBtYWtlU2lnbmF0dXJlKHNpZykge1xuICBpZiAoc2lnIGluc3RhbmNlb2YgU2lnbmF0dXJlKVxuICAgIHJldHVybiBzaWc7XG4gIHJldHVybiBuZXcgU2lnbmF0dXJlKHRoaXMsIHNpZyk7XG59O1xuXG4vKipcbiogKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvZHJhZnQtam9zZWZzc29uLWVkZHNhLWVkMjU1MTktMDMjc2VjdGlvbi01LjJcbipcbiogRUREU0EgZGVmaW5lcyBtZXRob2RzIGZvciBlbmNvZGluZyBhbmQgZGVjb2RpbmcgcG9pbnRzIGFuZCBpbnRlZ2Vycy4gVGhlc2UgYXJlXG4qIGhlbHBlciBjb252ZW5pZW5jZSBtZXRob2RzLCB0aGF0IHBhc3MgYWxvbmcgdG8gdXRpbGl0eSBmdW5jdGlvbnMgaW1wbGllZFxuKiBwYXJhbWV0ZXJzLlxuKlxuKi9cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVQb2ludCA9IGZ1bmN0aW9uIGVuY29kZVBvaW50KHBvaW50KSB7XG4gIHZhciBlbmMgPSBwb2ludC5nZXRZKCkudG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbiAgZW5jW3RoaXMuZW5jb2RpbmdMZW5ndGggLSAxXSB8PSBwb2ludC5nZXRYKCkuaXNPZGQoKSA/IDB4ODAgOiAwO1xuICByZXR1cm4gZW5jO1xufTtcblxuRUREU0EucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMpIHtcbiAgYnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzKGJ5dGVzKTtcblxuICB2YXIgbGFzdEl4ID0gYnl0ZXMubGVuZ3RoIC0gMTtcbiAgdmFyIG5vcm1lZCA9IGJ5dGVzLnNsaWNlKDAsIGxhc3RJeCkuY29uY2F0KGJ5dGVzW2xhc3RJeF0gJiB+MHg4MCk7XG4gIHZhciB4SXNPZGQgPSAoYnl0ZXNbbGFzdEl4XSAmIDB4ODApICE9PSAwO1xuXG4gIHZhciB5ID0gdXRpbHMuaW50RnJvbUxFKG5vcm1lZCk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50RnJvbVkoeSwgeElzT2RkKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5lbmNvZGVJbnQgPSBmdW5jdGlvbiBlbmNvZGVJbnQobnVtKSB7XG4gIHJldHVybiBudW0udG9BcnJheSgnbGUnLCB0aGlzLmVuY29kaW5nTGVuZ3RoKTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnl0ZXMpIHtcbiAgcmV0dXJuIHV0aWxzLmludEZyb21MRShieXRlcyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaXNQb2ludCA9IGZ1bmN0aW9uIGlzUG9pbnQodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiB0aGlzLnBvaW50Q2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIHBhcnNlQnl0ZXMgPSB1dGlscy5wYXJzZUJ5dGVzO1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGluc3RhbmNlXG4qIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFyYW1ldGVyc1xuKlxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnNlY3JldF0gLSBzZWNyZXQgc2VlZCBieXRlc1xuKiBAcGFyYW0ge1BvaW50fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IChha2EgYEFgIGluIGVkZHNhIHRlcm1zKVxuKiBAcGFyYW0ge0FycmF5PEJ5dGU+fSBbcGFyYW1zLnB1Yl0gLSBwdWJsaWMga2V5IHBvaW50IGVuY29kZWQgYXMgYnl0ZXNcbipcbiovXG5mdW5jdGlvbiBLZXlQYWlyKGVkZHNhLCBwYXJhbXMpIHtcbiAgdGhpcy5lZGRzYSA9IGVkZHNhO1xuICB0aGlzLl9zZWNyZXQgPSBwYXJzZUJ5dGVzKHBhcmFtcy5zZWNyZXQpO1xuICBpZiAoZWRkc2EuaXNQb2ludChwYXJhbXMucHViKSlcbiAgICB0aGlzLl9wdWIgPSBwYXJhbXMucHViO1xuICBlbHNlXG4gICAgdGhpcy5fcHViQnl0ZXMgPSBwYXJzZUJ5dGVzKHBhcmFtcy5wdWIpO1xufVxuXG5LZXlQYWlyLmZyb21QdWJsaWMgPSBmdW5jdGlvbiBmcm9tUHVibGljKGVkZHNhLCBwdWIpIHtcbiAgaWYgKHB1YiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHB1YjtcbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVkZHNhLCB7IHB1YjogcHViIH0pO1xufTtcblxuS2V5UGFpci5mcm9tU2VjcmV0ID0gZnVuY3Rpb24gZnJvbVNlY3JldChlZGRzYSwgc2VjcmV0KSB7XG4gIGlmIChzZWNyZXQgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBzZWNyZXQ7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBzZWNyZXQ6IHNlY3JldCB9KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnNlY3JldCA9IGZ1bmN0aW9uIHNlY3JldCgpIHtcbiAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbn07XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwdWJCeXRlcycsIGZ1bmN0aW9uIHB1YkJ5dGVzKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLnB1YigpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViJywgZnVuY3Rpb24gcHViKCkge1xuICBpZiAodGhpcy5fcHViQnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5fcHViQnl0ZXMpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5nLm11bCh0aGlzLnByaXYoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3ByaXZCeXRlcycsIGZ1bmN0aW9uIHByaXZCeXRlcygpIHtcbiAgdmFyIGVkZHNhID0gdGhpcy5lZGRzYTtcbiAgdmFyIGhhc2ggPSB0aGlzLmhhc2goKTtcbiAgdmFyIGxhc3RJeCA9IGVkZHNhLmVuY29kaW5nTGVuZ3RoIC0gMTtcblxuICB2YXIgYSA9IGhhc2guc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpO1xuICBhWzBdICY9IDI0ODtcbiAgYVtsYXN0SXhdICY9IDEyNztcbiAgYVtsYXN0SXhdIHw9IDY0O1xuXG4gIHJldHVybiBhO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2JywgZnVuY3Rpb24gcHJpdigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMucHJpdkJ5dGVzKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdoYXNoJywgZnVuY3Rpb24gaGFzaCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuaGFzaCgpLnVwZGF0ZSh0aGlzLnNlY3JldCgpKS5kaWdlc3QoKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnbWVzc2FnZVByZWZpeCcsIGZ1bmN0aW9uIG1lc3NhZ2VQcmVmaXgoKSB7XG4gIHJldHVybiB0aGlzLmhhc2goKS5zbGljZSh0aGlzLmVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbn0pO1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zaWduID0gZnVuY3Rpb24gc2lnbihtZXNzYWdlKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGNhbiBvbmx5IHZlcmlmeScpO1xuICByZXR1cm4gdGhpcy5lZGRzYS5zaWduKG1lc3NhZ2UsIHRoaXMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZykge1xuICByZXR1cm4gdGhpcy5lZGRzYS52ZXJpZnkobWVzc2FnZSwgc2lnLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFNlY3JldCA9IGZ1bmN0aW9uIGdldFNlY3JldChlbmMpIHtcbiAgYXNzZXJ0KHRoaXMuX3NlY3JldCwgJ0tleVBhaXIgaXMgcHVibGljIG9ubHknKTtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnNlY3JldCgpLCBlbmMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuZ2V0UHVibGljID0gZnVuY3Rpb24gZ2V0UHVibGljKGVuYykge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMucHViQnl0ZXMoKSwgZW5jKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5UGFpcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgdXRpbHMgPSBlbGxpcHRpYy51dGlscztcbnZhciBhc3NlcnQgPSB1dGlscy5hc3NlcnQ7XG52YXIgY2FjaGVkUHJvcGVydHkgPSB1dGlscy5jYWNoZWRQcm9wZXJ0eTtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcblxuLyoqXG4qIEBwYXJhbSB7RUREU0F9IGVkZHNhIC0gZWRkc2EgaW5zdGFuY2VcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58T2JqZWN0fSBzaWcgLVxuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPnxQb2ludH0gW3NpZy5SXSAtIFIgcG9pbnQgYXMgUG9pbnQgb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz58Ym59IFtzaWcuU10gLSBTIHNjYWxhciBhcyBibiBvciBieXRlc1xuKiBAcGFyYW0ge0FycmF5PEJ5dGVzPn0gW3NpZy5SZW5jb2RlZF0gLSBSIHBvaW50IGVuY29kZWRcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuU2VuY29kZWRdIC0gUyBzY2FsYXIgZW5jb2RlZFxuKi9cbmZ1bmN0aW9uIFNpZ25hdHVyZShlZGRzYSwgc2lnKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcblxuICBpZiAodHlwZW9mIHNpZyAhPT0gJ29iamVjdCcpXG4gICAgc2lnID0gcGFyc2VCeXRlcyhzaWcpO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHNpZykpIHtcbiAgICBzaWcgPSB7XG4gICAgICBSOiBzaWcuc2xpY2UoMCwgZWRkc2EuZW5jb2RpbmdMZW5ndGgpLFxuICAgICAgUzogc2lnLnNsaWNlKGVkZHNhLmVuY29kaW5nTGVuZ3RoKVxuICAgIH07XG4gIH1cblxuICBhc3NlcnQoc2lnLlIgJiYgc2lnLlMsICdTaWduYXR1cmUgd2l0aG91dCBSIG9yIFMnKTtcblxuICBpZiAoZWRkc2EuaXNQb2ludChzaWcuUikpXG4gICAgdGhpcy5fUiA9IHNpZy5SO1xuICBpZiAoc2lnLlMgaW5zdGFuY2VvZiBCTilcbiAgICB0aGlzLl9TID0gc2lnLlM7XG5cbiAgdGhpcy5fUmVuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5SKSA/IHNpZy5SIDogc2lnLlJlbmNvZGVkO1xuICB0aGlzLl9TZW5jb2RlZCA9IEFycmF5LmlzQXJyYXkoc2lnLlMpID8gc2lnLlMgOiBzaWcuU2VuY29kZWQ7XG59XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1MnLCBmdW5jdGlvbiBTKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5kZWNvZGVJbnQodGhpcy5TZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSJywgZnVuY3Rpb24gUigpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlUG9pbnQodGhpcy5SZW5jb2RlZCgpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdSZW5jb2RlZCcsIGZ1bmN0aW9uIFJlbmNvZGVkKCkge1xuICByZXR1cm4gdGhpcy5lZGRzYS5lbmNvZGVQb2ludCh0aGlzLlIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnU2VuY29kZWQnLCBmdW5jdGlvbiBTZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlSW50KHRoaXMuUygpKTtcbn0pO1xuXG5TaWduYXR1cmUucHJvdG90eXBlLnRvQnl0ZXMgPSBmdW5jdGlvbiB0b0J5dGVzKCkge1xuICByZXR1cm4gdGhpcy5SZW5jb2RlZCgpLmNvbmNhdCh0aGlzLlNlbmNvZGVkKCkpO1xufTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0hleCA9IGZ1bmN0aW9uIHRvSGV4KCkge1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHRoaXMudG9CeXRlcygpLCAnaGV4JykudG9VcHBlckNhc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9hc24xLmpzXG4vLyBGZWRvciwgeW91IGFyZSBhbWF6aW5nLlxuJ3VzZSBzdHJpY3QnXG5cbnZhciBhc24xID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbmV4cG9ydHMuY2VydGlmaWNhdGUgPSByZXF1aXJlKCcuL2NlcnRpZmljYXRlJylcblxudmFyIFJTQVByaXZhdGVLZXkgPSBhc24xLmRlZmluZSgnUlNBUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnbW9kdWx1cycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJsaWNFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcml2YXRlRXhwb25lbnQnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUxJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaW1lMicpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZXhwb25lbnQyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2NvZWZmaWNpZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHJpdmF0ZUtleSA9IFJTQVByaXZhdGVLZXlcblxudmFyIFJTQVB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdSU0FQdWJsaWNLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuUlNBUHVibGljS2V5ID0gUlNBUHVibGljS2V5XG5cbnZhciBQdWJsaWNLZXkgPSBhc24xLmRlZmluZSgnU3ViamVjdFB1YmxpY0tleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQdWJsaWNLZXknKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5QdWJsaWNLZXkgPSBQdWJsaWNLZXlcblxudmFyIEFsZ29yaXRobUlkZW50aWZpZXIgPSBhc24xLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ25vbmUnKS5udWxsXygpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2N1cnZlJykub2JqaWQoKS5vcHRpb25hbCgpLFxuICAgIHRoaXMua2V5KCdwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgncCcpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICAgIHRoaXMua2V5KCdnJykuaW50KClcbiAgICApLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFByaXZhdGVLZXlJbmZvID0gYXNuMS5kZWZpbmUoJ1ByaXZhdGVLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS51c2UoQWxnb3JpdGhtSWRlbnRpZmllciksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RQcml2YXRlS2V5Jykub2N0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuUHJpdmF0ZUtleSA9IFByaXZhdGVLZXlJbmZvXG52YXIgRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnRW5jcnlwdGVkUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdhbGdvcml0aG0nKS5zZXEoKS5vYmooXG4gICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgdGhpcy5rZXkoJ2RlY3J5cHQnKS5zZXEoKS5vYmooXG4gICAgICAgIHRoaXMua2V5KCdrZGUnKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2lkJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgna2RlcGFyYW1zJykuc2VxKCkub2JqKFxuICAgICAgICAgICAgdGhpcy5rZXkoJ3NhbHQnKS5vY3RzdHIoKSxcbiAgICAgICAgICAgIHRoaXMua2V5KCdpdGVycycpLmludCgpXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICB0aGlzLmtleSgnY2lwaGVyJykuc2VxKCkub2JqKFxuICAgICAgICAgIHRoaXMua2V5KCdhbGdvJykub2JqaWQoKSxcbiAgICAgICAgICB0aGlzLmtleSgnaXYnKS5vY3RzdHIoKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuXG5leHBvcnRzLkVuY3J5cHRlZFByaXZhdGVLZXkgPSBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mb1xuXG52YXIgRFNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdEU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3EnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnZycpLmludCgpLFxuICAgIHRoaXMua2V5KCdwdWJfa2V5JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZfa2V5JykuaW50KClcbiAgKVxufSlcbmV4cG9ydHMuRFNBUHJpdmF0ZUtleSA9IERTQVByaXZhdGVLZXlcblxuZXhwb3J0cy5EU0FwYXJhbSA9IGFzbjEuZGVmaW5lKCdEU0FwYXJhbScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5pbnQoKVxufSlcblxudmFyIEVDUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdFQ1ByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVLZXknKS5vY3RzdHIoKSxcbiAgICB0aGlzLmtleSgncGFyYW1ldGVycycpLm9wdGlvbmFsKCkuZXhwbGljaXQoMCkudXNlKEVDUGFyYW1ldGVycyksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0tleScpLm9wdGlvbmFsKCkuZXhwbGljaXQoMSkuYml0c3RyKClcbiAgKVxufSlcbmV4cG9ydHMuRUNQcml2YXRlS2V5ID0gRUNQcml2YXRlS2V5XG5cbnZhciBFQ1BhcmFtZXRlcnMgPSBhc24xLmRlZmluZSgnRUNQYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmNob2ljZSh7XG4gICAgbmFtZWRDdXJ2ZTogdGhpcy5vYmppZCgpXG4gIH0pXG59KVxuXG5leHBvcnRzLnNpZ25hdHVyZSA9IGFzbjEuZGVmaW5lKCdzaWduYXR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCdyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3MnKS5pbnQoKVxuICApXG59KVxuIiwidmFyIGFzbjEgPSByZXF1aXJlKCcuLi9hc24xJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgYXBpID0gZXhwb3J0cztcblxuYXBpLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShuYW1lLCBib2R5KSB7XG4gIHJldHVybiBuZXcgRW50aXR5KG5hbWUsIGJvZHkpO1xufTtcblxuZnVuY3Rpb24gRW50aXR5KG5hbWUsIGJvZHkpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5ib2R5ID0gYm9keTtcblxuICB0aGlzLmRlY29kZXJzID0ge307XG4gIHRoaXMuZW5jb2RlcnMgPSB7fTtcbn07XG5cbkVudGl0eS5wcm90b3R5cGUuX2NyZWF0ZU5hbWVkID0gZnVuY3Rpb24gY3JlYXRlTmFtZWQoYmFzZSkge1xuICB2YXIgbmFtZWQ7XG4gIHRyeSB7XG4gICAgbmFtZWQgPSByZXF1aXJlKCd2bScpLnJ1bkluVGhpc0NvbnRleHQoXG4gICAgICAnKGZ1bmN0aW9uICcgKyB0aGlzLm5hbWUgKyAnKGVudGl0eSkge1xcbicgK1xuICAgICAgJyAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XFxuJyArXG4gICAgICAnfSknXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIG5hbWVkID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgdGhpcy5faW5pdE5hbWVkKGVudGl0eSk7XG4gICAgfTtcbiAgfVxuICBpbmhlcml0cyhuYW1lZCwgYmFzZSk7XG4gIG5hbWVkLnByb3RvdHlwZS5faW5pdE5hbWVkID0gZnVuY3Rpb24gaW5pdG5hbWVkKGVudGl0eSkge1xuICAgIGJhc2UuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB9O1xuXG4gIHJldHVybiBuZXcgbmFtZWQodGhpcyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXREZWNvZGVyID0gZnVuY3Rpb24gX2dldERlY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBkZWNvZGVyXG4gIGlmICghdGhpcy5kZWNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZGVjb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZGVjb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmRlY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShkYXRhLCBlbmMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuX2dldERlY29kZXIoZW5jKS5kZWNvZGUoZGF0YSwgb3B0aW9ucyk7XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9nZXRFbmNvZGVyID0gZnVuY3Rpb24gX2dldEVuY29kZXIoZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAnZGVyJztcbiAgLy8gTGF6aWx5IGNyZWF0ZSBlbmNvZGVyXG4gIGlmICghdGhpcy5lbmNvZGVycy5oYXNPd25Qcm9wZXJ0eShlbmMpKVxuICAgIHRoaXMuZW5jb2RlcnNbZW5jXSA9IHRoaXMuX2NyZWF0ZU5hbWVkKGFzbjEuZW5jb2RlcnNbZW5jXSk7XG4gIHJldHVybiB0aGlzLmVuY29kZXJzW2VuY107XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCBlbmMsIC8qIGludGVybmFsICovIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLl9nZXRFbmNvZGVyKGVuYykuZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbn07XG4iLCJ2YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcblxudmFyIE9iamVjdF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChPYmplY3Qua2V5cykgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuKVxuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbih4c1tpXSwgaSwgeHMpO1xuICAgIH1cbn07XG5cbnZhciBkZWZpbmVQcm9wID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ18nLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIG9ialtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG5cbnZhciBnbG9iYWxzID0gWydBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRXZhbEVycm9yJywgJ0Z1bmN0aW9uJyxcbidJbmZpbml0eScsICdKU09OJywgJ01hdGgnLCAnTmFOJywgJ051bWJlcicsICdPYmplY3QnLCAnUmFuZ2VFcnJvcicsXG4nUmVmZXJlbmNlRXJyb3InLCAnUmVnRXhwJywgJ1N0cmluZycsICdTeW50YXhFcnJvcicsICdUeXBlRXJyb3InLCAnVVJJRXJyb3InLFxuJ2RlY29kZVVSSScsICdkZWNvZGVVUklDb21wb25lbnQnLCAnZW5jb2RlVVJJJywgJ2VuY29kZVVSSUNvbXBvbmVudCcsICdlc2NhcGUnLFxuJ2V2YWwnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLCAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICd1bmRlZmluZWQnLCAndW5lc2NhcGUnXTtcblxuZnVuY3Rpb24gQ29udGV4dCgpIHt9XG5Db250ZXh0LnByb3RvdHlwZSA9IHt9O1xuXG52YXIgU2NyaXB0ID0gZXhwb3J0cy5TY3JpcHQgPSBmdW5jdGlvbiBOb2RlU2NyaXB0IChjb2RlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjcmlwdCkpIHJldHVybiBuZXcgU2NyaXB0KGNvZGUpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkcyBhICdjb250ZXh0JyBhcmd1bWVudC5cIik7XG4gICAgfVxuICAgIFxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZiAoIWlmcmFtZS5zdHlsZSkgaWZyYW1lLnN0eWxlID0ge307XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgd0V2YWwgPSB3aW4uZXZhbCwgd0V4ZWNTY3JpcHQgPSB3aW4uZXhlY1NjcmlwdDtcblxuICAgIGlmICghd0V2YWwgJiYgd0V4ZWNTY3JpcHQpIHtcbiAgICAgICAgLy8gd2luLmV2YWwoKSBtYWdpY2FsbHkgYXBwZWFycyB3aGVuIHRoaXMgaXMgY2FsbGVkIGluIElFOlxuICAgICAgICB3RXhlY1NjcmlwdC5jYWxsKHdpbiwgJ251bGwnKTtcbiAgICAgICAgd0V2YWwgPSB3aW4uZXZhbDtcbiAgICB9XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNvbnRleHRba2V5XSkge1xuICAgICAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgd2luS2V5cyA9IE9iamVjdF9rZXlzKHdpbik7XG5cbiAgICB2YXIgcmVzID0gd0V2YWwuY2FsbCh3aW4sIHRoaXMuY29kZSk7XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyh3aW4pLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgY2lyY3VsYXIgb2JqZWN0cyBsaWtlIGB0b3BgIGFuZCBgd2luZG93YCBieSBvbmx5XG4gICAgICAgIC8vIHVwZGF0aW5nIGV4aXN0aW5nIGNvbnRleHQgcHJvcGVydGllcyBvciBuZXcgcHJvcGVydGllcyBpbiB0aGUgYHdpbmBcbiAgICAgICAgLy8gdGhhdCB3YXMgb25seSBpbnRyb2R1Y2VkIGFmdGVyIHRoZSBldmFsLlxuICAgICAgICBpZiAoa2V5IGluIGNvbnRleHQgfHwgaW5kZXhPZih3aW5LZXlzLCBrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gd2luW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gY29udGV4dCkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3AoY29udGV4dCwga2V5LCB3aW5ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5UaGlzQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZhbCh0aGlzLmNvZGUpOyAvLyBtYXliZS4uLlxufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5Jbk5ld0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjdHggPSBTY3JpcHQuY3JlYXRlQ29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0gdGhpcy5ydW5JbkNvbnRleHQoY3R4KTtcblxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY3R4KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjb250ZXh0W2tleV0gPSBjdHhba2V5XTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXM7XG59O1xuXG5mb3JFYWNoKE9iamVjdF9rZXlzKFNjcmlwdC5wcm90b3R5cGUpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGV4cG9ydHNbbmFtZV0gPSBTY3JpcHRbbmFtZV0gPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICB2YXIgcyA9IFNjcmlwdChjb2RlKTtcbiAgICAgICAgcmV0dXJuIHNbbmFtZV0uYXBwbHkocywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9O1xufSk7XG5cbmV4cG9ydHMuY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TY3JpcHQoY29kZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBTY3JpcHQuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgQ29udGV4dCgpO1xuICAgIGlmKHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn07XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZnVuY3Rpb24gUmVwb3J0ZXIob3B0aW9ucykge1xuICB0aGlzLl9yZXBvcnRlclN0YXRlID0ge1xuICAgIG9iajogbnVsbCxcbiAgICBwYXRoOiBbXSxcbiAgICBvcHRpb25zOiBvcHRpb25zIHx8IHt9LFxuICAgIGVycm9yczogW11cbiAgfTtcbn1cbmV4cG9ydHMuUmVwb3J0ZXIgPSBSZXBvcnRlcjtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmlzRXJyb3IgPSBmdW5jdGlvbiBpc0Vycm9yKG9iaikge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICByZXR1cm4geyBvYmo6IHN0YXRlLm9iaiwgcGF0aExlbjogc3RhdGUucGF0aC5sZW5ndGggfTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZShkYXRhKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgc3RhdGUub2JqID0gZGF0YS5vYmo7XG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGRhdGEucGF0aExlbik7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJLZXkgPSBmdW5jdGlvbiBlbnRlcktleShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5wdXNoKGtleSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXhpdEtleSA9IGZ1bmN0aW9uIGV4aXRLZXkoaW5kZXgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5wYXRoID0gc3RhdGUucGF0aC5zbGljZSgwLCBpbmRleCAtIDEpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlS2V5ID0gZnVuY3Rpb24gbGVhdmVLZXkoaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB0aGlzLmV4aXRLZXkoaW5kZXgpO1xuICBpZiAoc3RhdGUub2JqICE9PSBudWxsKVxuICAgIHN0YXRlLm9ialtrZXldID0gdmFsdWU7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUucGF0aCA9IGZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiB0aGlzLl9yZXBvcnRlclN0YXRlLnBhdGguam9pbignLycpO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVudGVyT2JqZWN0ID0gZnVuY3Rpb24gZW50ZXJPYmplY3QoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIHByZXYgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHt9O1xuICByZXR1cm4gcHJldjtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5sZWF2ZU9iamVjdCA9IGZ1bmN0aW9uIGxlYXZlT2JqZWN0KHByZXYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgbm93ID0gc3RhdGUub2JqO1xuICBzdGF0ZS5vYmogPSBwcmV2O1xuICByZXR1cm4gbm93O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHZhciBlcnI7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgdmFyIGluaGVyaXRlZCA9IG1zZyBpbnN0YW5jZW9mIFJlcG9ydGVyRXJyb3I7XG4gIGlmIChpbmhlcml0ZWQpIHtcbiAgICBlcnIgPSBtc2c7XG4gIH0gZWxzZSB7XG4gICAgZXJyID0gbmV3IFJlcG9ydGVyRXJyb3Ioc3RhdGUucGF0aC5tYXAoZnVuY3Rpb24oZWxlbSkge1xuICAgICAgcmV0dXJuICdbJyArIEpTT04uc3RyaW5naWZ5KGVsZW0pICsgJ10nO1xuICAgIH0pLmpvaW4oJycpLCBtc2cubWVzc2FnZSB8fCBtc2csIG1zZy5zdGFjayk7XG4gIH1cblxuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICB0aHJvdyBlcnI7XG5cbiAgaWYgKCFpbmhlcml0ZWQpXG4gICAgc3RhdGUuZXJyb3JzLnB1c2goZXJyKTtcblxuICByZXR1cm4gZXJyO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLndyYXBSZXN1bHQgPSBmdW5jdGlvbiB3cmFwUmVzdWx0KHJlc3VsdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuICBpZiAoIXN0YXRlLm9wdGlvbnMucGFydGlhbClcbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdWx0OiB0aGlzLmlzRXJyb3IocmVzdWx0KSA/IG51bGwgOiByZXN1bHQsXG4gICAgZXJyb3JzOiBzdGF0ZS5lcnJvcnNcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIFJlcG9ydGVyRXJyb3IocGF0aCwgbXNnKSB7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMucmV0aHJvdyhtc2cpO1xufTtcbmluaGVyaXRzKFJlcG9ydGVyRXJyb3IsIEVycm9yKTtcblxuUmVwb3J0ZXJFcnJvci5wcm90b3R5cGUucmV0aHJvdyA9IGZ1bmN0aW9uIHJldGhyb3cobXNnKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1zZyArICcgYXQ6ICcgKyAodGhpcy5wYXRoIHx8ICcoc2hhbGxvdyknKTtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKVxuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFJlcG9ydGVyRXJyb3IpO1xuXG4gIGlmICghdGhpcy5zdGFjaykge1xuICAgIHRyeSB7XG4gICAgICAvLyBJRSBvbmx5IGFkZHMgc3RhY2sgd2hlbiB0aHJvd25cbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuc3RhY2sgPSBlLnN0YWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG4iLCJ2YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5FbmNvZGVyQnVmZmVyO1xudmFyIERlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRGVjb2RlckJ1ZmZlcjtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbi8vIFN1cHBvcnRlZCB0YWdzXG52YXIgdGFncyA9IFtcbiAgJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2JqaWQnLCAnYm9vbCcsXG4gICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnb2JqRGVzYycsXG4gICdiaXRzdHInLCAnYm1wc3RyJywgJ2NoYXJzdHInLCAnZ2Vuc3RyJywgJ2dyYXBoc3RyJywgJ2lhNXN0cicsICdpc282NDZzdHInLFxuICAnbnVtc3RyJywgJ29jdHN0cicsICdwcmludHN0cicsICd0NjFzdHInLCAndW5pc3RyJywgJ3V0ZjhzdHInLCAndmlkZW9zdHInXG5dO1xuXG4vLyBQdWJsaWMgbWV0aG9kcyBsaXN0XG52YXIgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55JywgJ2NvbnRhaW5zJ1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbnZhciBvdmVycmlkZWQgPSBbXG4gICdfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLFxuICAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLFxuICAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsXG5cbiAgJ19lbmNvZGVDb21wb3NpdGUnLCAnX2VuY29kZVN0cicsICdfZW5jb2RlT2JqaWQnLCAnX2VuY29kZVRpbWUnLFxuICAnX2VuY29kZU51bGwnLCAnX2VuY29kZUludCcsICdfZW5jb2RlQm9vbCdcbl07XG5cbmZ1bmN0aW9uIE5vZGUoZW5jLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHRoaXMuX2Jhc2VTdGF0ZSA9IHN0YXRlO1xuXG4gIHN0YXRlLmVuYyA9IGVuYztcblxuICBzdGF0ZS5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsO1xuXG4gIC8vIFN0YXRlXG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmFyZ3MgPSBudWxsO1xuICBzdGF0ZS5yZXZlcnNlQXJncyA9IG51bGw7XG4gIHN0YXRlLmNob2ljZSA9IG51bGw7XG4gIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7XG4gIHN0YXRlLmFueSA9IGZhbHNlO1xuICBzdGF0ZS5vYmogPSBmYWxzZTtcbiAgc3RhdGUudXNlID0gbnVsbDtcbiAgc3RhdGUudXNlRGVjb2RlciA9IG51bGw7XG4gIHN0YXRlLmtleSA9IG51bGw7XG4gIHN0YXRlWydkZWZhdWx0J10gPSBudWxsO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuY29udGFpbnMgPSBudWxsO1xuXG4gIC8vIFNob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9uIGVhY2ggbWV0aG9kXG4gIGlmICghc3RhdGUucGFyZW50KSB7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl93cmFwKCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcblxudmFyIHN0YXRlUHJvcHMgPSBbXG4gICdlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsXG4gICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JyxcbiAgJ2ltcGxpY2l0JywgJ2NvbnRhaW5zJ1xuXTtcblxuTm9kZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgY3N0YXRlID0ge307XG4gIHN0YXRlUHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY3N0YXRlW3Byb3BdID0gc3RhdGVbcHJvcF07XG4gIH0pO1xuICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7XG4gIHJlcy5fYmFzZVN0YXRlID0gY3N0YXRlO1xuICByZXR1cm4gcmVzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3dyYXAgPSBmdW5jdGlvbiB3cmFwKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7XG4gICAgICByZXR1cm4gY2xvbmVbbWV0aG9kXS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgYm9keS5jYWxsKHRoaXMpO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlblxuICBzdGF0ZS5jaGlsZHJlbiA9IHN0YXRlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9PT0gdGhpcztcbiAgfSwgdGhpcyk7XG4gIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJncyhhcmdzKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7XG4gIH0sIHRoaXMpO1xuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuICEoYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpO1xuICAgIHN0YXRlLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAvLyBSZXBsYWNlIHBhcmVudCB0byBtYWludGFpbiBiYWNrd2FyZCBsaW5rXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPSB0aGlzO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5hcmdzID09PSBudWxsKTtcbiAgICBzdGF0ZS5hcmdzID0gYXJncztcbiAgICBzdGF0ZS5yZXZlcnNlQXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8IGFyZy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KVxuICAgICAgICByZXR1cm4gYXJnO1xuXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKVxuICAgICAgICAgIGtleSB8PSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIG5vdCBpbXBsZW1lbnRlZCBmb3IgZW5jb2Rpbmc6ICcgKyBzdGF0ZS5lbmMpO1xuICB9O1xufSk7XG5cbi8vXG4vLyBQdWJsaWMgbWV0aG9kc1xuLy9cblxudGFncy5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICBOb2RlLnByb3RvdHlwZVt0YWddID0gZnVuY3Rpb24gX3RhZ01ldGhvZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIGFzc2VydChpdGVtKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS51c2UgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub3B0aW9uYWwgPSBmdW5jdGlvbiBvcHRpb25hbCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmRlZiA9IGZ1bmN0aW9uIGRlZih2YWwpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IHZhbDtcbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZXhwbGljaXQgPSBmdW5jdGlvbiBleHBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuaW1wbGljaXQgPSBmdW5jdGlvbiBpbXBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub2JqID0gZnVuY3Rpb24gb2JqKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICBzdGF0ZS5vYmogPSB0cnVlO1xuXG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMClcbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24ga2V5KG5ld0tleSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmtleSA9PT0gbnVsbCk7XG4gIHN0YXRlLmtleSA9IG5ld0tleTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLmFueSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jaG9pY2UgPSBmdW5jdGlvbiBjaG9pY2Uob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuY2hvaWNlID09PSBudWxsKTtcbiAgc3RhdGUuY2hvaWNlID0gb2JqO1xuICB0aGlzLl91c2VBcmdzKE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhpdGVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUuY29udGFpbnMgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIERlY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIGlucHV0LndyYXBSZXN1bHQoc3RhdGUuY2hpbGRyZW5bMF0uX2RlY29kZShpbnB1dCwgb3B0aW9ucykpO1xuXG4gIHZhciByZXN1bHQgPSBzdGF0ZVsnZGVmYXVsdCddO1xuICB2YXIgcHJlc2VudCA9IHRydWU7XG5cbiAgdmFyIHByZXZLZXkgPSBudWxsO1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICB2YXIgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICAgICAgdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIHByZXNlbnQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVzZW50ID0gdGhpcy5fcGVla1RhZyhpbnB1dCwgdGFnLCBzdGF0ZS5hbnkpO1xuXG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihwcmVzZW50KSlcbiAgICAgICAgcmV0dXJuIHByZXNlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUHVzaCBvYmplY3Qgb24gc3RhY2tcbiAgdmFyIHByZXZPYmo7XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICBwcmV2T2JqID0gaW5wdXQuZW50ZXJPYmplY3QoKTtcblxuICBpZiAocHJlc2VudCkge1xuICAgIC8vIFVud3JhcCBleHBsaWNpdCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHRoaXMuX2RlY29kZVRhZyhpbnB1dCwgc3RhdGUuZXhwbGljaXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoZXhwbGljaXQpKVxuICAgICAgICByZXR1cm4gZXhwbGljaXQ7XG4gICAgICBpbnB1dCA9IGV4cGxpY2l0O1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IGlucHV0Lm9mZnNldDtcblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBpbnB1dC5vZmZzZXQsIGlucHV0Lmxlbmd0aCwgJ2NvbnRlbnQnKTtcblxuICAgIC8vIFNlbGVjdCBwcm9wZXIgbWV0aG9kIGZvciB0YWdcbiAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgcmVzdWx0ID0gcmVzdWx0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcblxuICAgIGlmIChpbnB1dC5pc0Vycm9yKHJlc3VsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgLy8gRGVjb2RlIGNoaWxkcmVuXG4gICAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsICYmIHN0YXRlLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlY29kZSBjb250YWluZWQvZW5jb2RlZCBieSBzY2hlbWEsIG9ubHkgaW4gYml0IG9yIG9jdGV0IHN0cmluZ3NcbiAgICBpZiAoc3RhdGUuY29udGFpbnMgJiYgKHN0YXRlLnRhZyA9PT0gJ29jdHN0cicgfHwgc3RhdGUudGFnID09PSAnYml0c3RyJykpIHtcbiAgICAgIHZhciBkYXRhID0gbmV3IERlY29kZXJCdWZmZXIocmVzdWx0KTtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAgIC5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcbiAgZWxzZSBpZiAocHJldktleSAhPT0gbnVsbClcbiAgICBpbnB1dC5leGl0S2V5KHByZXZLZXkpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcScgfHwgdGFnID09PSAnc2V0JylcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJyB8fCB0YWcgPT09ICdzZXRvZicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywgc3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBzdGF0ZS5hcmdzWzBdLCBzdGF0ZS5hcmdzWzFdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgbnVsbCwgbnVsbCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVUaW1lKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU51bGwoaW5wdXQsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlQm9vbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUludChpbnB1dCwgc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcblxuICBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iailcbiAgICAgICAgLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuICB9XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZ2V0VXNlID0gZnVuY3Rpb24gX2dldFVzZShlbnRpdHksIG9iaikge1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgLy8gQ3JlYXRlIGFsdGVyZWQgdXNlIGRlY29kZXIgaWYgaW1wbGljaXQgaXMgc2V0XG4gIHN0YXRlLnVzZURlY29kZXIgPSB0aGlzLl91c2UoZW50aXR5LCBvYmopO1xuICBhc3NlcnQoc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuY2hpbGRyZW5bMF07XG4gIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0KSB7XG4gICAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuY2xvbmUoKTtcbiAgICBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgfVxuICByZXR1cm4gc3RhdGUudXNlRGVjb2Rlcjtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVDaG9pY2UgPSBmdW5jdGlvbiBkZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgdmFyIG1hdGNoID0gZmFsc2U7XG5cbiAgT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKS5zb21lKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2tleV07XG4gICAgdHJ5IHtcbiAgICAgIHZhciB2YWx1ZSA9IG5vZGUuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCB0aGlzKTtcblxuICBpZiAoIW1hdGNoKVxuICAgIHJldHVybiBpbnB1dC5lcnJvcignQ2hvaWNlIG5vdCBtYXRjaGVkJyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vXG4vLyBFbmNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2NyZWF0ZUVuY29kZXJCdWZmZXIgPSBmdW5jdGlvbiBjcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBFbmNvZGVyQnVmZmVyKGRhdGEsIHRoaXMucmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwgJiYgc3RhdGVbJ2RlZmF1bHQnXSA9PT0gZGF0YSlcbiAgICByZXR1cm47XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2VuY29kZVZhbHVlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuO1xuXG4gIGlmICh0aGlzLl9za2lwRGVmYXVsdChyZXN1bHQsIHJlcG9ydGVyLCBwYXJlbnQpKVxuICAgIHJldHVybjtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVZhbHVlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gc3RhdGUuY2hpbGRyZW5bMF0uX2VuY29kZShkYXRhLCByZXBvcnRlciB8fCBuZXcgUmVwb3J0ZXIoKSk7XG5cbiAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgLy8gU2V0IHJlcG9ydGVyIHRvIHNoYXJlIGl0IHdpdGggYSBjaGlsZCBjbGFzc1xuICB0aGlzLnJlcG9ydGVyID0gcmVwb3J0ZXI7XG5cbiAgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwpXG4gICAgICBkYXRhID0gc3RhdGVbJ2RlZmF1bHQnXVxuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVuY29kZSBjaGlsZHJlbiBmaXJzdFxuICB2YXIgY29udGVudCA9IG51bGw7XG4gIHZhciBwcmltaXRpdmUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmFueSkge1xuICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyXG4gICAgcmVzdWx0ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaG9pY2UpIHtcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNvbnRhaW5zKSB7XG4gICAgY29udGVudCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICBwcmltaXRpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNoaWxkcmVuKSB7XG4gICAgY29udGVudCA9IHN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUudGFnID09PSAnbnVsbF8nKVxuICAgICAgICByZXR1cm4gY2hpbGQuX2VuY29kZShudWxsLCByZXBvcnRlciwgZGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLmtleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBzaG91bGQgaGF2ZSBhIGtleScpO1xuICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgZXhwZWN0ZWQsIGJ1dCBpbnB1dCBpcyBub3Qgb2JqZWN0Jyk7XG5cbiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnc2Vxb2YnIHx8IHN0YXRlLnRhZyA9PT0gJ3NldG9mJykge1xuICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbFxuICAgICAgaWYgKCEoc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzLmxlbmd0aCA9PT0gMSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVG9vIG1hbnkgYXJncyBmb3IgOiAnICsgc3RhdGUudGFnKTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ3NlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXknKTtcblxuICAgICAgdmFyIGNoaWxkID0gdGhpcy5jbG9uZSgpO1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IG51bGw7XG4gICAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLmFyZ3NbMF0sIGRhdGEpLl9lbmNvZGUoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgfSwgY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHRoaXMuX2VuY29kZVByaW1pdGl2ZShzdGF0ZS50YWcsIGRhdGEpO1xuICAgICAgcHJpbWl0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFbmNvZGUgZGF0YSBpdHNlbGZcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgdmFyIHRhZyA9IHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWc7XG4gICAgdmFyIGNscyA9IHN0YXRlLmltcGxpY2l0ID09PSBudWxsID8gJ3VuaXZlcnNhbCcgOiAnY29udGV4dCc7XG5cbiAgICBpZiAodGFnID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXBvcnRlci5lcnJvcignVGFnIGNvdWxkIGJlIG9taXR0ZWQgb25seSBmb3IgLnVzZSgpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZSh0YWcsIHByaW1pdGl2ZSwgY2xzLCBjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBXcmFwIGluIGV4cGxpY2l0XG4gIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUoc3RhdGUuZXhwbGljaXQsIGZhbHNlLCAnY29udGV4dCcsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVDaG9pY2UgPSBmdW5jdGlvbiBlbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2RhdGEudHlwZV07XG4gIGlmICghbm9kZSkge1xuICAgIGFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRhdGEudHlwZSArICcgbm90IGZvdW5kIGluICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKSkpO1xuICB9XG4gIHJldHVybiBub2RlLl9lbmNvZGUoZGF0YS52YWx1ZSwgcmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVByaW1pdGl2ZSA9IGZ1bmN0aW9uIGVuY29kZVByaW1pdGl2ZSh0YWcsIGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICgvc3RyJC8udGVzdCh0YWcpKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIHN0YXRlLnJldmVyc2VBcmdzWzBdLCBzdGF0ZS5hcmdzWzFdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBudWxsLCBudWxsKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVRpbWUoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVOdWxsKCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUludChkYXRhLCBzdGF0ZS5hcmdzICYmIHN0YXRlLnJldmVyc2VBcmdzWzBdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUJvb2woZGF0YSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdGFnOiAnICsgdGFnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc051bXN0ciA9IGZ1bmN0aW9uIGlzTnVtc3RyKHN0cikge1xuICByZXR1cm4gL15bMC05IF0qJC8udGVzdChzdHIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzUHJpbnRzdHIgPSBmdW5jdGlvbiBpc1ByaW50c3RyKHN0cikge1xuICByZXR1cm4gL15bQS1aYS16MC05ICdcXChcXClcXCssXFwtXFwuXFwvOj1cXD9dKiQvLnRlc3Qoc3RyKTtcbn07XG4iLCJ2YXIgY29uc3RhbnRzID0gcmVxdWlyZSgnLi4vY29uc3RhbnRzJyk7XG5cbmV4cG9ydHMudGFnQ2xhc3MgPSB7XG4gIDA6ICd1bml2ZXJzYWwnLFxuICAxOiAnYXBwbGljYXRpb24nLFxuICAyOiAnY29udGV4dCcsXG4gIDM6ICdwcml2YXRlJ1xufTtcbmV4cG9ydHMudGFnQ2xhc3NCeU5hbWUgPSBjb25zdGFudHMuX3JldmVyc2UoZXhwb3J0cy50YWdDbGFzcyk7XG5cbmV4cG9ydHMudGFnID0ge1xuICAweDAwOiAnZW5kJyxcbiAgMHgwMTogJ2Jvb2wnLFxuICAweDAyOiAnaW50JyxcbiAgMHgwMzogJ2JpdHN0cicsXG4gIDB4MDQ6ICdvY3RzdHInLFxuICAweDA1OiAnbnVsbF8nLFxuICAweDA2OiAnb2JqaWQnLFxuICAweDA3OiAnb2JqRGVzYycsXG4gIDB4MDg6ICdleHRlcm5hbCcsXG4gIDB4MDk6ICdyZWFsJyxcbiAgMHgwYTogJ2VudW0nLFxuICAweDBiOiAnZW1iZWQnLFxuICAweDBjOiAndXRmOHN0cicsXG4gIDB4MGQ6ICdyZWxhdGl2ZU9pZCcsXG4gIDB4MTA6ICdzZXEnLFxuICAweDExOiAnc2V0JyxcbiAgMHgxMjogJ251bXN0cicsXG4gIDB4MTM6ICdwcmludHN0cicsXG4gIDB4MTQ6ICd0NjFzdHInLFxuICAweDE1OiAndmlkZW9zdHInLFxuICAweDE2OiAnaWE1c3RyJyxcbiAgMHgxNzogJ3V0Y3RpbWUnLFxuICAweDE4OiAnZ2VudGltZScsXG4gIDB4MTk6ICdncmFwaHN0cicsXG4gIDB4MWE6ICdpc282NDZzdHInLFxuICAweDFiOiAnZ2Vuc3RyJyxcbiAgMHgxYzogJ3VuaXN0cicsXG4gIDB4MWQ6ICdjaGFyc3RyJyxcbiAgMHgxZTogJ2JtcHN0cidcbn07XG5leHBvcnRzLnRhZ0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZyk7XG4iLCJ2YXIgZGVjb2RlcnMgPSBleHBvcnRzO1xuXG5kZWNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZGVjb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgREVSRGVjb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTURlY29kZXIoZW50aXR5KSB7XG4gIERFUkRlY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTURlY29kZXIsIERFUkRlY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyO1xuXG5QRU1EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICB2YXIgbGFiZWwgPSBvcHRpb25zLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIHJlID0gL14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgdmFyIGJhc2U2NCA9IGxpbmVzLnNsaWNlKHN0YXJ0ICsgMSwgZW5kKS5qb2luKCcnKTtcbiAgLy8gUmVtb3ZlIGV4Y2Vzc2l2ZSBzeW1ib2xzXG4gIGJhc2U2NC5yZXBsYWNlKC9bXmEtejAtOVxcK1xcLz1dKy9naSwgJycpO1xuXG4gIHZhciBpbnB1dCA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7XG59O1xuIiwidmFyIGVuY29kZXJzID0gZXhwb3J0cztcblxuZW5jb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmVuY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYnVmID0gREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgdmFyIHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzXG4vLyB0aGFua3MgdG8gQFJhbnRhbmVuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBUaW1lID0gYXNuLmRlZmluZSgnVGltZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHV0Y1RpbWU6IHRoaXMudXRjdGltZSgpLFxuICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKVxuICB9KVxufSlcblxudmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3R5cGUnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpXG4gIClcbn0pXG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBTdWJqZWN0UHVibGljS2V5SW5mbyA9IGFzbi5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcblxudmFyIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUgPSBhc24uZGVmaW5lKCdSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldG9mKEF0dHJpYnV0ZVR5cGVWYWx1ZSlcbn0pXG5cbnZhciBSRE5TZXF1ZW5jZSA9IGFzbi5kZWZpbmUoJ1JETlNlcXVlbmNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcW9mKFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUpXG59KVxuXG52YXIgTmFtZSA9IGFzbi5kZWZpbmUoJ05hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpXG4gIH0pXG59KVxuXG52YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ25vdEJlZm9yZScpLnVzZShUaW1lKSxcbiAgICB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSlcbiAgKVxufSlcblxudmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2V4dG5JRCcpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksXG4gICAgdGhpcy5rZXkoJ2V4dG5WYWx1ZScpLm9jdHN0cigpXG4gIClcbn0pXG5cbnZhciBUQlNDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1RCU0NlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLFxuICAgIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdpc3N1ZXInKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSxcbiAgICB0aGlzLmtleSgnc3ViamVjdCcpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleUluZm8nKS51c2UoU3ViamVjdFB1YmxpY0tleUluZm8pLFxuICAgIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RVbmlxdWVJRCcpLmltcGxpY2l0KDIpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2V4dGVuc2lvbnMnKS5leHBsaWNpdCgzKS5zZXFvZihFeHRlbnNpb24pLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFg1MDlDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1g1MDlDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3Ric0NlcnRpZmljYXRlJykudXNlKFRCU0NlcnRpZmljYXRlKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlQWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpXG4gIClcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gWDUwOUNlcnRpZmljYXRlXG4iLCIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURbXFxuXFxyXStERUstSW5mbzogQUVTLSgoPzoxMjgpfCg/OjE5Mil8KD86MjU2KSktQ0JDLChbMC05QS1IXSspW1xcblxccl0rKFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylbXFxuXFxyXSsvbVxudmFyIHN0YXJ0UmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qIEtFWSl8Q0VSVElGSUNBVEUpLS0tLS0vbVxudmFyIGZ1bGxSZWdleCA9IC9eLS0tLS1CRUdJTiAoKD86LiogS0VZKXxDRVJUSUZJQ0FURSktLS0tLShbMC05QS16XFxuXFxyXFwrXFwvXFw9XSspLS0tLS1FTkQgXFwxLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnJyksICdiYXNlNjQnKVxuICB9IGVsc2Uge1xuICAgIHZhciBzdWl0ZSA9ICdhZXMnICsgbWF0Y2hbMV1cbiAgICB2YXIgaXYgPSBuZXcgQnVmZmVyKG1hdGNoWzJdLCAnaGV4JylcbiAgICB2YXIgY2lwaGVyVGV4dCA9IG5ldyBCdWZmZXIobWF0Y2hbM10ucmVwbGFjZSgvW1xcclxcbl0vZywgJycpLCAnYmFzZTY0JylcbiAgICB2YXIgY2lwaGVyS2V5ID0gZXZwKHBhc3N3b3JkLCBpdi5zbGljZSgwLCA4KSwgcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSkua2V5XG4gICAgdmFyIG91dCA9IFtdXG4gICAgdmFyIGNpcGhlciA9IGNpcGhlcnMuY3JlYXRlRGVjaXBoZXJpdihzdWl0ZSwgY2lwaGVyS2V5LCBpdilcbiAgICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICAgIG91dC5wdXNoKGNpcGhlci5maW5hbCgpKVxuICAgIGRlY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQob3V0KVxuICB9XG4gIHZhciB0YWcgPSBrZXkubWF0Y2goc3RhcnRSZWdleClbMV1cbiAgcmV0dXJuIHtcbiAgICB0YWc6IHRhZyxcbiAgICBkYXRhOiBkZWNyeXB0ZWRcbiAgfVxufVxuIiwiLy8gbXVjaCBvZiB0aGlzIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL3JzYS5qc1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lY1xudmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKVxudmFyIGN1cnZlcyA9IHJlcXVpcmUoJy4vY3VydmVzLmpzb24nKVxuXG5mdW5jdGlvbiB2ZXJpZnkgKHNpZywgaGFzaCwga2V5LCBzaWduVHlwZSwgdGFnKSB7XG4gIHZhciBwdWIgPSBwYXJzZUtleXMoa2V5KVxuICBpZiAocHViLnR5cGUgPT09ICdlYycpIHtcbiAgICAvLyByc2Ega2V5cyBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgZWNkc2Egb25lcyBpbiBvcGVuc3NsXG4gICAgaWYgKHNpZ25UeXBlICE9PSAnZWNkc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICAgIHJldHVybiBlY1ZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIGlmIChwdWIudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGRzYVZlcmlmeShzaWcsIGhhc2gsIHB1YilcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdyc2EnICYmIHNpZ25UeXBlICE9PSAnZWNkc2EvcnNhJykgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBwdWJsaWMga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHViLm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIHZhciBwYWQgPSBbIDEgXVxuICB2YXIgcGFkTnVtID0gMFxuICB3aGlsZSAoaGFzaC5sZW5ndGggKyBwYWQubGVuZ3RoICsgMiA8IGxlbikge1xuICAgIHBhZC5wdXNoKDB4ZmYpXG4gICAgcGFkTnVtKytcbiAgfVxuICBwYWQucHVzaCgweDAwKVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBoYXNoLmxlbmd0aCkge1xuICAgIHBhZC5wdXNoKGhhc2hbaV0pXG4gIH1cbiAgcGFkID0gbmV3IEJ1ZmZlcihwYWQpXG4gIHZhciByZWQgPSBCTi5tb250KHB1Yi5tb2R1bHVzKVxuICBzaWcgPSBuZXcgQk4oc2lnKS50b1JlZChyZWQpXG5cbiAgc2lnID0gc2lnLnJlZFBvdyhuZXcgQk4ocHViLnB1YmxpY0V4cG9uZW50KSlcbiAgc2lnID0gbmV3IEJ1ZmZlcihzaWcuZnJvbVJlZCgpLnRvQXJyYXkoKSlcbiAgdmFyIG91dCA9IHBhZE51bSA8IDggPyAxIDogMFxuICBsZW4gPSBNYXRoLm1pbihzaWcubGVuZ3RoLCBwYWQubGVuZ3RoKVxuICBpZiAoc2lnLmxlbmd0aCAhPT0gcGFkLmxlbmd0aCkgb3V0ID0gMVxuXG4gIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSBvdXQgfD0gc2lnW2ldIF4gcGFkW2ldXG4gIHJldHVybiBvdXQgPT09IDBcbn1cblxuZnVuY3Rpb24gZWNWZXJpZnkgKHNpZywgaGFzaCwgcHViKSB7XG4gIHZhciBjdXJ2ZUlkID0gY3VydmVzW3B1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJyldXG4gIGlmICghY3VydmVJZCkgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGN1cnZlICcgKyBwdWIuZGF0YS5hbGdvcml0aG0uY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIgcHVia2V5ID0gcHViLmRhdGEuc3ViamVjdFByaXZhdGVLZXkuZGF0YVxuXG4gIHJldHVybiBjdXJ2ZS52ZXJpZnkoaGFzaCwgc2lnLCBwdWJrZXkpXG59XG5cbmZ1bmN0aW9uIGRzYVZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIHAgPSBwdWIuZGF0YS5wXG4gIHZhciBxID0gcHViLmRhdGEucVxuICB2YXIgZyA9IHB1Yi5kYXRhLmdcbiAgdmFyIHkgPSBwdWIuZGF0YS5wdWJfa2V5XG4gIHZhciB1bnBhY2tlZCA9IHBhcnNlS2V5cy5zaWduYXR1cmUuZGVjb2RlKHNpZywgJ2RlcicpXG4gIHZhciBzID0gdW5wYWNrZWQuc1xuICB2YXIgciA9IHVucGFja2VkLnJcbiAgY2hlY2tWYWx1ZShzLCBxKVxuICBjaGVja1ZhbHVlKHIsIHEpXG4gIHZhciBtb250cCA9IEJOLm1vbnQocClcbiAgdmFyIHcgPSBzLmludm0ocSlcbiAgdmFyIHYgPSBnLnRvUmVkKG1vbnRwKVxuICAgIC5yZWRQb3cobmV3IEJOKGhhc2gpLm11bCh3KS5tb2QocSkpXG4gICAgLmZyb21SZWQoKVxuICAgIC5tdWwoeS50b1JlZChtb250cCkucmVkUG93KHIubXVsKHcpLm1vZChxKSkuZnJvbVJlZCgpKVxuICAgIC5tb2QocClcbiAgICAubW9kKHEpXG4gIHJldHVybiB2LmNtcChyKSA9PT0gMFxufVxuXG5mdW5jdGlvbiBjaGVja1ZhbHVlIChiLCBxKSB7XG4gIGlmIChiLmNtcG4oMCkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZycpXG4gIGlmIChiLmNtcChxKSA+PSBxKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJpZnlcbiIsInZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJ2VsbGlwdGljJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFQ0RIIChjdXJ2ZSkge1xuICByZXR1cm4gbmV3IEVDREgoY3VydmUpXG59XG5cbnZhciBhbGlhc2VzID0ge1xuICBzZWNwMjU2azE6IHtcbiAgICBuYW1lOiAnc2VjcDI1NmsxJyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBzZWNwMjI0cjE6IHtcbiAgICBuYW1lOiAncDIyNCcsXG4gICAgYnl0ZUxlbmd0aDogMjhcbiAgfSxcbiAgcHJpbWUyNTZ2MToge1xuICAgIG5hbWU6ICdwMjU2JyxcbiAgICBieXRlTGVuZ3RoOiAzMlxuICB9LFxuICBwcmltZTE5MnYxOiB7XG4gICAgbmFtZTogJ3AxOTInLFxuICAgIGJ5dGVMZW5ndGg6IDI0XG4gIH0sXG4gIGVkMjU1MTk6IHtcbiAgICBuYW1lOiAnZWQyNTUxOScsXG4gICAgYnl0ZUxlbmd0aDogMzJcbiAgfSxcbiAgc2VjcDM4NHIxOiB7XG4gICAgbmFtZTogJ3AzODQnLFxuICAgIGJ5dGVMZW5ndGg6IDQ4XG4gIH0sXG4gIHNlY3A1MjFyMToge1xuICAgIG5hbWU6ICdwNTIxJyxcbiAgICBieXRlTGVuZ3RoOiA2NlxuICB9XG59XG5cbmFsaWFzZXMucDIyNCA9IGFsaWFzZXMuc2VjcDIyNHIxXG5hbGlhc2VzLnAyNTYgPSBhbGlhc2VzLnNlY3AyNTZyMSA9IGFsaWFzZXMucHJpbWUyNTZ2MVxuYWxpYXNlcy5wMTkyID0gYWxpYXNlcy5zZWNwMTkycjEgPSBhbGlhc2VzLnByaW1lMTkydjFcbmFsaWFzZXMucDM4NCA9IGFsaWFzZXMuc2VjcDM4NHIxXG5hbGlhc2VzLnA1MjEgPSBhbGlhc2VzLnNlY3A1MjFyMVxuXG5mdW5jdGlvbiBFQ0RIIChjdXJ2ZSkge1xuICB0aGlzLmN1cnZlVHlwZSA9IGFsaWFzZXNbY3VydmVdXG4gIGlmICghdGhpcy5jdXJ2ZVR5cGUpIHtcbiAgICB0aGlzLmN1cnZlVHlwZSA9IHtcbiAgICAgIG5hbWU6IGN1cnZlXG4gICAgfVxuICB9XG4gIHRoaXMuY3VydmUgPSBuZXcgZWxsaXB0aWMuZWModGhpcy5jdXJ2ZVR5cGUubmFtZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIHRoaXMua2V5cyA9IHZvaWQgMFxufVxuXG5FQ0RILnByb3RvdHlwZS5nZW5lcmF0ZUtleXMgPSBmdW5jdGlvbiAoZW5jLCBmb3JtYXQpIHtcbiAgdGhpcy5rZXlzID0gdGhpcy5jdXJ2ZS5nZW5LZXlQYWlyKClcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KVxufVxuXG5FQ0RILnByb3RvdHlwZS5jb21wdXRlU2VjcmV0ID0gZnVuY3Rpb24gKG90aGVyLCBpbmVuYywgZW5jKSB7XG4gIGluZW5jID0gaW5lbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuICAgIG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpXG4gIH1cbiAgdmFyIG90aGVyUHViID0gdGhpcy5jdXJ2ZS5rZXlGcm9tUHVibGljKG90aGVyKS5nZXRQdWJsaWMoKVxuICB2YXIgb3V0ID0gb3RoZXJQdWIubXVsKHRoaXMua2V5cy5nZXRQcml2YXRlKCkpLmdldFgoKVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuICB2YXIga2V5ID0gdGhpcy5rZXlzLmdldFB1YmxpYyhmb3JtYXQgPT09ICdjb21wcmVzc2VkJywgdHJ1ZSlcbiAgaWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcbiAgICBpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcbiAgICAgIGtleVswXSA9IDdcbiAgICB9IGVsc2Uge1xuICAgICAga2V5WzBdID0gNlxuICAgIH1cbiAgfVxuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLmtleXMuZ2V0UHJpdmF0ZSgpLCBlbmMpXG59XG5cbkVDREgucHJvdG90eXBlLnNldFB1YmxpY0tleSA9IGZ1bmN0aW9uIChwdWIsIGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ3V0ZjgnXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKVxuICB9XG4gIHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1YilcbiAgcmV0dXJuIHRoaXNcbn1cblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcbiAgZW5jID0gZW5jIHx8ICd1dGY4J1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwcml2KSkge1xuICAgIHByaXYgPSBuZXcgQnVmZmVyKHByaXYsIGVuYylcbiAgfVxuXG4gIHZhciBfcHJpdiA9IG5ldyBCTihwcml2KVxuICBfcHJpdiA9IF9wcml2LnRvU3RyaW5nKDE2KVxuICB0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKVxuICB0aGlzLmtleXMuX2ltcG9ydFByaXZhdGUoX3ByaXYpXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJldHVyblZhbHVlIChibiwgZW5jLCBsZW4pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGJuKSkge1xuICAgIGJuID0gYm4udG9BcnJheSgpXG4gIH1cbiAgdmFyIGJ1ZiA9IG5ldyBCdWZmZXIoYm4pXG4gIGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuICAgIHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgYnVmID0gQnVmZmVyLmNvbmNhdChbemVyb3MsIGJ1Zl0pXG4gIH1cbiAgaWYgKCFlbmMpIHtcbiAgICByZXR1cm4gYnVmXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZyhlbmMpXG4gIH1cbn1cbiIsImV4cG9ydHMucHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJy4vcHVibGljRW5jcnlwdCcpXG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcmVxdWlyZSgnLi9wcml2YXRlRGVjcnlwdCcpXG5cbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBwcml2YXRlRW5jcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHVibGljRW5jcnlwdChrZXksIGJ1ZiwgdHJ1ZSlcbn1cblxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gZnVuY3Rpb24gcHVibGljRGVjcnlwdCAoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHJpdmF0ZURlY3J5cHQoa2V5LCBidWYsIHRydWUpXG59XG4iLCJ2YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHB1YmxpY0VuY3J5cHQgKHB1YmxpY0tleSwgbXNnLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nXG4gIGlmIChwdWJsaWNLZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwdWJsaWNLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwdWJsaWNLZXkpXG4gIHZhciBwYWRkZWRNc2dcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICBwYWRkZWRNc2cgPSBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSlcbiAgfSBlbHNlIGlmIChwYWRkaW5nID09PSAzKSB7XG4gICAgcGFkZGVkTXNnID0gbmV3IEJOKG1zZylcbiAgICBpZiAocGFkZGVkTXNnLmNtcChrZXkubW9kdWx1cykgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRvbyBsb25nIGZvciBtb2R1bHVzJylcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKVxuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcmV0dXJuIGNydChwYWRkZWRNc2csIGtleSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2l0aFB1YmxpYyhwYWRkZWRNc2csIGtleSlcbiAgfVxufVxuXG5mdW5jdGlvbiBvYWVwIChrZXksIG1zZykge1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGhcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIHZhciBoTGVuMiA9IDIgKiBoTGVuXG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpXG4gIH1cbiAgdmFyIHBzID0gQnVmZmVyLmFsbG9jKGsgLSBtTGVuIC0gaExlbjIgLSAyKVxuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDFcbiAgdmFyIHNlZWQgPSByYW5kb21CeXRlcyhoTGVuKVxuICB2YXIgbWFza2VkRGIgPSB4b3IoQnVmZmVyLmNvbmNhdChbaUhhc2gsIHBzLCBCdWZmZXIuYWxsb2MoMSwgMSksIG1zZ10sIGRibGVuKSwgbWdmKHNlZWQsIGRibGVuKSlcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSlcbiAgcmV0dXJuIG5ldyBCTihCdWZmZXIuY29uY2F0KFtCdWZmZXIuYWxsb2MoMSksIG1hc2tlZFNlZWQsIG1hc2tlZERiXSwgaykpXG59XG5mdW5jdGlvbiBwa2NzMSAoa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChtTGVuID4gayAtIDExKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIHRvbyBsb25nJylcbiAgfVxuICB2YXIgcHNcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBwcyA9IEJ1ZmZlci5hbGxvYyhrIC0gbUxlbiAtIDMsIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgcHMgPSBub25aZXJvKGsgLSBtTGVuIC0gMylcbiAgfVxuICByZXR1cm4gbmV3IEJOKEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFswLCByZXZlcnNlID8gMSA6IDJdKSwgcHMsIEJ1ZmZlci5hbGxvYygxKSwgbXNnXSwgaykpXG59XG5mdW5jdGlvbiBub25aZXJvIChsZW4pIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW4pXG4gIHZhciBpID0gMFxuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4gKiAyKVxuICB2YXIgY3VyID0gMFxuICB2YXIgbnVtXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgaWYgKGN1ciA9PT0gY2FjaGUubGVuZ3RoKSB7XG4gICAgICBjYWNoZSA9IHJhbmRvbUJ5dGVzKGxlbiAqIDIpXG4gICAgICBjdXIgPSAwXG4gICAgfVxuICAgIG51bSA9IGNhY2hlW2N1cisrXVxuICAgIGlmIChudW0pIHtcbiAgICAgIG91dFtpKytdID0gbnVtXG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRcbn1cbiIsInZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpXG52YXIgeG9yID0gcmVxdWlyZSgnLi94b3InKVxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHdpdGhQdWJsaWMgPSByZXF1aXJlKCcuL3dpdGhQdWJsaWMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJpdmF0ZURlY3J5cHQgKHByaXZhdGVLZXksIGVuYywgcmV2ZXJzZSkge1xuICB2YXIgcGFkZGluZ1xuICBpZiAocHJpdmF0ZUtleS5wYWRkaW5nKSB7XG4gICAgcGFkZGluZyA9IHByaXZhdGVLZXkucGFkZGluZ1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMVxuICB9IGVsc2Uge1xuICAgIHBhZGRpbmcgPSA0XG4gIH1cblxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHByaXZhdGVLZXkpXG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpXG4gIGlmIChlbmMubGVuZ3RoID4gayB8fCBuZXcgQk4oZW5jKS5jbXAoa2V5Lm1vZHVsdXMpID49IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtc2dcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBCTihlbmMpLCBrZXkpXG4gIH0gZWxzZSB7XG4gICAgbXNnID0gY3J0KGVuYywga2V5KVxuICB9XG4gIHZhciB6QnVmZmVyID0gQnVmZmVyLmFsbG9jKGsgLSBtc2cubGVuZ3RoKVxuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKVxuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHJldHVybiBvYWVwKGtleSwgbXNnKVxuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICByZXR1cm4gcGtjczEoa2V5LCBtc2csIHJldmVyc2UpXG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2dcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gcGFkZGluZycpXG4gIH1cbn1cblxuZnVuY3Rpb24gb2FlcCAoa2V5LCBtc2cpIHtcbiAgdmFyIGsgPSBrZXkubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIGlIYXNoID0gY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShCdWZmZXIuYWxsb2MoMCkpLmRpZ2VzdCgpXG4gIHZhciBoTGVuID0gaUhhc2gubGVuZ3RoXG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBtYXNrZWRTZWVkID0gbXNnLnNsaWNlKDEsIGhMZW4gKyAxKVxuICB2YXIgbWFza2VkRGIgPSBtc2cuc2xpY2UoaExlbiArIDEpXG4gIHZhciBzZWVkID0geG9yKG1hc2tlZFNlZWQsIG1nZihtYXNrZWREYiwgaExlbikpXG4gIHZhciBkYiA9IHhvcihtYXNrZWREYiwgbWdmKHNlZWQsIGsgLSBoTGVuIC0gMSkpXG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKVxuICB9XG4gIHZhciBpID0gaExlblxuICB3aGlsZSAoZGJbaV0gPT09IDApIHtcbiAgICBpKytcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIGRiLnNsaWNlKGkpXG59XG5cbmZ1bmN0aW9uIHBrY3MxIChrZXksIG1zZywgcmV2ZXJzZSkge1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMilcbiAgdmFyIGkgPSAyXG4gIHZhciBzdGF0dXMgPSAwXG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICB2YXIgcHMgPSBtc2cuc2xpY2UoMiwgaSAtIDEpXG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKSB7XG4gICAgc3RhdHVzKytcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrXG4gIH1cbiAgaWYgKHN0YXR1cykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpXG4gIH1cbiAgcmV0dXJuIG1zZy5zbGljZShpKVxufVxuZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBhID0gQnVmZmVyLmZyb20oYSlcbiAgYiA9IEJ1ZmZlci5mcm9tKGIpXG4gIHZhciBkaWYgPSAwXG4gIHZhciBsZW4gPSBhLmxlbmd0aFxuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgZGlmKytcbiAgICBsZW4gPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gIH1cbiAgdmFyIGkgPSAtMVxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgZGlmICs9IChhW2ldIF4gYltpXSlcbiAgfVxuICByZXR1cm4gZGlmXG59XG4iLCIndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gb2xkQnJvd3NlciAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignc2VjdXJlIHJhbmRvbSBudW1iZXIgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgYnJvd3NlclxcbnVzZSBjaHJvbWUsIEZpcmVGb3ggb3IgSW50ZXJuZXQgRXhwbG9yZXIgMTEnKVxufVxudmFyIHNhZmVCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpXG52YXIgcmFuZG9tYnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpXG52YXIgQnVmZmVyID0gc2FmZUJ1ZmZlci5CdWZmZXJcbnZhciBrQnVmZmVyTWF4TGVuZ3RoID0gc2FmZUJ1ZmZlci5rTWF4TGVuZ3RoXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cbnZhciBrTWF4VWludDMyID0gTWF0aC5wb3coMiwgMzIpIC0gMVxuZnVuY3Rpb24gYXNzZXJ0T2Zmc2V0IChvZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ251bWJlcicgfHwgb2Zmc2V0ICE9PSBvZmZzZXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvZmZzZXQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAob2Zmc2V0ID4ga01heFVpbnQzMiB8fCBvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2Zmc2V0IG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKG9mZnNldCA+IGtCdWZmZXJNYXhMZW5ndGggfHwgb2Zmc2V0ID4gbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBvdXQgb2YgcmFuZ2UnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicgfHwgc2l6ZSAhPT0gc2l6ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoc2l6ZSA+IGtNYXhVaW50MzIgfHwgc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSB1aW50MzInKVxuICB9XG5cbiAgaWYgKHNpemUgKyBvZmZzZXQgPiBsZW5ndGggfHwgc2l6ZSA+IGtCdWZmZXJNYXhMZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnVmZmVyIHRvbyBzbWFsbCcpXG4gIH1cbn1cbmlmICgoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHx8ICFwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZXhwb3J0cy5yYW5kb21GaWxsID0gcmFuZG9tRmlsbFxuICBleHBvcnRzLnJhbmRvbUZpbGxTeW5jID0gcmFuZG9tRmlsbFN5bmNcbn0gZWxzZSB7XG4gIGV4cG9ydHMucmFuZG9tRmlsbCA9IG9sZEJyb3dzZXJcbiAgZXhwb3J0cy5yYW5kb21GaWxsU3luYyA9IG9sZEJyb3dzZXJcbn1cbmZ1bmN0aW9uIHJhbmRvbUZpbGwgKGJ1Ziwgb2Zmc2V0LCBzaXplLCBjYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpICYmICEoYnVmIGluc3RhbmNlb2YgZ2xvYmFsLlVpbnQ4QXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9mZnNldFxuICAgIG9mZnNldCA9IDBcbiAgICBzaXplID0gYnVmLmxlbmd0aFxuICB9IGVsc2UgaWYgKHR5cGVvZiBzaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBzaXplXG4gICAgc2l6ZSA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNiXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgfVxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuICBhc3NlcnRTaXplKHNpemUsIG9mZnNldCwgYnVmLmxlbmd0aClcbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUsIGNiKVxufVxuXG5mdW5jdGlvbiBhY3R1YWxGaWxsIChidWYsIG9mZnNldCwgc2l6ZSwgY2IpIHtcbiAgaWYgKHByb2Nlc3MuYnJvd3Nlcikge1xuICAgIHZhciBvdXJCdWYgPSBidWYuYnVmZmVyXG4gICAgdmFyIHVpbnQgPSBuZXcgVWludDhBcnJheShvdXJCdWYsIG9mZnNldCwgc2l6ZSlcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVpbnQpXG4gICAgaWYgKGNiKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2IobnVsbCwgYnVmKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICByZXR1cm4gYnVmXG4gIH1cbiAgaWYgKGNiKSB7XG4gICAgcmFuZG9tYnl0ZXMoc2l6ZSwgZnVuY3Rpb24gKGVyciwgYnl0ZXMpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNiKGVycilcbiAgICAgIH1cbiAgICAgIGJ5dGVzLmNvcHkoYnVmLCBvZmZzZXQpXG4gICAgICBjYihudWxsLCBidWYpXG4gICAgfSlcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYnl0ZXMgPSByYW5kb21ieXRlcyhzaXplKVxuICBieXRlcy5jb3B5KGJ1Ziwgb2Zmc2V0KVxuICByZXR1cm4gYnVmXG59XG5mdW5jdGlvbiByYW5kb21GaWxsU3luYyAoYnVmLCBvZmZzZXQsIHNpemUpIHtcbiAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb2Zmc2V0ID0gMFxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikgJiYgIShidWYgaW5zdGFuY2VvZiBnbG9iYWwuVWludDhBcnJheSkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZlwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgb3IgVWludDhBcnJheScpXG4gIH1cblxuICBhc3NlcnRPZmZzZXQob2Zmc2V0LCBidWYubGVuZ3RoKVxuXG4gIGlmIChzaXplID09PSB1bmRlZmluZWQpIHNpemUgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG5cbiAgYXNzZXJ0U2l6ZShzaXplLCBvZmZzZXQsIGJ1Zi5sZW5ndGgpXG5cbiAgcmV0dXJuIGFjdHVhbEZpbGwoYnVmLCBvZmZzZXQsIHNpemUpXG59XG4iLCIndXNlIHN0cmljdCdcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKShyZXF1aXJlKCcuL2xpYi9lbGxpcHRpYycpKVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnLi9hc3NlcnQnKVxudmFyIGRlciA9IHJlcXVpcmUoJy4vZGVyJylcbnZhciBtZXNzYWdlcyA9IHJlcXVpcmUoJy4vbWVzc2FnZXMuanNvbicpXG5cbmZ1bmN0aW9uIGluaXRDb21wcmVzc2VkVmFsdWUgKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBkZWZhdWx0VmFsdWVcblxuICBhc3NlcnQuaXNCb29sZWFuKHZhbHVlLCBtZXNzYWdlcy5DT01QUkVTU0VEX1RZUEVfSU5WQUxJRClcbiAgcmV0dXJuIHZhbHVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNlY3AyNTZrMSkge1xuICByZXR1cm4ge1xuICAgIHByaXZhdGVLZXlWZXJpZnk6IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIocHJpdmF0ZUtleSwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgcmV0dXJuIHByaXZhdGVLZXkubGVuZ3RoID09PSAzMiAmJiBzZWNwMjU2azEucHJpdmF0ZUtleVZlcmlmeShwcml2YXRlS2V5KVxuICAgIH0sXG5cbiAgICBwcml2YXRlS2V5RXhwb3J0OiBmdW5jdGlvbiAocHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHByaXZhdGVLZXksIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChwcml2YXRlS2V5LCAzMiwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIGNvbXByZXNzZWQgPSBpbml0Q29tcHJlc3NlZFZhbHVlKGNvbXByZXNzZWQsIHRydWUpXG4gICAgICB2YXIgcHVibGljS2V5ID0gc2VjcDI1NmsxLnByaXZhdGVLZXlFeHBvcnQocHJpdmF0ZUtleSwgY29tcHJlc3NlZClcblxuICAgICAgcmV0dXJuIGRlci5wcml2YXRlS2V5RXhwb3J0KHByaXZhdGVLZXksIHB1YmxpY0tleSwgY29tcHJlc3NlZClcbiAgICB9LFxuXG4gICAgcHJpdmF0ZUtleUltcG9ydDogZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihwcml2YXRlS2V5LCBtZXNzYWdlcy5FQ19QUklWQVRFX0tFWV9UWVBFX0lOVkFMSUQpXG5cbiAgICAgIHByaXZhdGVLZXkgPSBkZXIucHJpdmF0ZUtleUltcG9ydChwcml2YXRlS2V5KVxuICAgICAgaWYgKHByaXZhdGVLZXkgJiYgcHJpdmF0ZUtleS5sZW5ndGggPT09IDMyICYmIHNlY3AyNTZrMS5wcml2YXRlS2V5VmVyaWZ5KHByaXZhdGVLZXkpKSByZXR1cm4gcHJpdmF0ZUtleVxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfSU1QT1JUX0RFUl9GQUlMKVxuICAgIH0sXG5cbiAgICBwcml2YXRlS2V5TmVnYXRlOiBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHByaXZhdGVLZXksIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChwcml2YXRlS2V5LCAzMiwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIHJldHVybiBzZWNwMjU2azEucHJpdmF0ZUtleU5lZ2F0ZShwcml2YXRlS2V5KVxuICAgIH0sXG5cbiAgICBwcml2YXRlS2V5TW9kSW52ZXJzZTogZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihwcml2YXRlS2V5LCBtZXNzYWdlcy5FQ19QUklWQVRFX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgocHJpdmF0ZUtleSwgMzIsIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnByaXZhdGVLZXlNb2RJbnZlcnNlKHByaXZhdGVLZXkpXG4gICAgfSxcblxuICAgIHByaXZhdGVLZXlUd2Vha0FkZDogZnVuY3Rpb24gKHByaXZhdGVLZXksIHR3ZWFrKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIocHJpdmF0ZUtleSwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKHByaXZhdGVLZXksIDMyLCBtZXNzYWdlcy5FQ19QUklWQVRFX0tFWV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHR3ZWFrLCBtZXNzYWdlcy5UV0VBS19UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgodHdlYWssIDMyLCBtZXNzYWdlcy5UV0VBS19MRU5HVEhfSU5WQUxJRClcblxuICAgICAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtBZGQocHJpdmF0ZUtleSwgdHdlYWspXG4gICAgfSxcblxuICAgIHByaXZhdGVLZXlUd2Vha011bDogZnVuY3Rpb24gKHByaXZhdGVLZXksIHR3ZWFrKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIocHJpdmF0ZUtleSwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKHByaXZhdGVLZXksIDMyLCBtZXNzYWdlcy5FQ19QUklWQVRFX0tFWV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHR3ZWFrLCBtZXNzYWdlcy5UV0VBS19UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgodHdlYWssIDMyLCBtZXNzYWdlcy5UV0VBS19MRU5HVEhfSU5WQUxJRClcblxuICAgICAgcmV0dXJuIHNlY3AyNTZrMS5wcml2YXRlS2V5VHdlYWtNdWwocHJpdmF0ZUtleSwgdHdlYWspXG4gICAgfSxcblxuICAgIHB1YmxpY0tleUNyZWF0ZTogZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihwcml2YXRlS2V5LCBtZXNzYWdlcy5FQ19QUklWQVRFX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgocHJpdmF0ZUtleSwgMzIsIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBjb21wcmVzc2VkID0gaW5pdENvbXByZXNzZWRWYWx1ZShjb21wcmVzc2VkLCB0cnVlKVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleUNyZWF0ZShwcml2YXRlS2V5LCBjb21wcmVzc2VkKVxuICAgIH0sXG5cbiAgICBwdWJsaWNLZXlDb252ZXJ0OiBmdW5jdGlvbiAocHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIocHVibGljS2V5LCBtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aDIocHVibGljS2V5LCAzMywgNjUsIG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIGNvbXByZXNzZWQgPSBpbml0Q29tcHJlc3NlZFZhbHVlKGNvbXByZXNzZWQsIHRydWUpXG5cbiAgICAgIHJldHVybiBzZWNwMjU2azEucHVibGljS2V5Q29udmVydChwdWJsaWNLZXksIGNvbXByZXNzZWQpXG4gICAgfSxcblxuICAgIHB1YmxpY0tleVZlcmlmeTogZnVuY3Rpb24gKHB1YmxpY0tleSkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHB1YmxpY0tleSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVZlcmlmeShwdWJsaWNLZXkpXG4gICAgfSxcblxuICAgIHB1YmxpY0tleVR3ZWFrQWRkOiBmdW5jdGlvbiAocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHB1YmxpY0tleSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgyKHB1YmxpY0tleSwgMzMsIDY1LCBtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBhc3NlcnQuaXNCdWZmZXIodHdlYWssIG1lc3NhZ2VzLlRXRUFLX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aCh0d2VhaywgMzIsIG1lc3NhZ2VzLlRXRUFLX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBjb21wcmVzc2VkID0gaW5pdENvbXByZXNzZWRWYWx1ZShjb21wcmVzc2VkLCB0cnVlKVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrQWRkKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpXG4gICAgfSxcblxuICAgIHB1YmxpY0tleVR3ZWFrTXVsOiBmdW5jdGlvbiAocHVibGljS2V5LCB0d2VhaywgY29tcHJlc3NlZCkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHB1YmxpY0tleSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgyKHB1YmxpY0tleSwgMzMsIDY1LCBtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBhc3NlcnQuaXNCdWZmZXIodHdlYWssIG1lc3NhZ2VzLlRXRUFLX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aCh0d2VhaywgMzIsIG1lc3NhZ2VzLlRXRUFLX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBjb21wcmVzc2VkID0gaW5pdENvbXByZXNzZWRWYWx1ZShjb21wcmVzc2VkLCB0cnVlKVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnB1YmxpY0tleVR3ZWFrTXVsKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpXG4gICAgfSxcblxuICAgIHB1YmxpY0tleUNvbWJpbmU6IGZ1bmN0aW9uIChwdWJsaWNLZXlzLCBjb21wcmVzc2VkKSB7XG4gICAgICBhc3NlcnQuaXNBcnJheShwdWJsaWNLZXlzLCBtZXNzYWdlcy5FQ19QVUJMSUNfS0VZU19UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNMZW5ndGhHVFplcm8ocHVibGljS2V5cywgbWVzc2FnZXMuRUNfUFVCTElDX0tFWVNfTEVOR1RIX0lOVkFMSUQpXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHB1YmxpY0tleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgYXNzZXJ0LmlzQnVmZmVyKHB1YmxpY0tleXNbaV0sIG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgyKHB1YmxpY0tleXNbaV0sIDMzLCA2NSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9MRU5HVEhfSU5WQUxJRClcbiAgICAgIH1cblxuICAgICAgY29tcHJlc3NlZCA9IGluaXRDb21wcmVzc2VkVmFsdWUoY29tcHJlc3NlZCwgdHJ1ZSlcblxuICAgICAgcmV0dXJuIHNlY3AyNTZrMS5wdWJsaWNLZXlDb21iaW5lKHB1YmxpY0tleXMsIGNvbXByZXNzZWQpXG4gICAgfSxcblxuICAgIHNpZ25hdHVyZU5vcm1hbGl6ZTogZnVuY3Rpb24gKHNpZ25hdHVyZSkge1xuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHNpZ25hdHVyZSwgbWVzc2FnZXMuRUNEU0FfU0lHTkFUVVJFX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChzaWduYXR1cmUsIDY0LCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIHJldHVybiBzZWNwMjU2azEuc2lnbmF0dXJlTm9ybWFsaXplKHNpZ25hdHVyZSlcbiAgICB9LFxuXG4gICAgc2lnbmF0dXJlRXhwb3J0OiBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIoc2lnbmF0dXJlLCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKHNpZ25hdHVyZSwgNjQsIG1lc3NhZ2VzLkVDRFNBX1NJR05BVFVSRV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgdmFyIHNpZ09iaiA9IHNlY3AyNTZrMS5zaWduYXR1cmVFeHBvcnQoc2lnbmF0dXJlKVxuICAgICAgcmV0dXJuIGRlci5zaWduYXR1cmVFeHBvcnQoc2lnT2JqKVxuICAgIH0sXG5cbiAgICBzaWduYXR1cmVJbXBvcnQ6IGZ1bmN0aW9uIChzaWcpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihzaWcsIG1lc3NhZ2VzLkVDRFNBX1NJR05BVFVSRV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNMZW5ndGhHVFplcm8oc2lnLCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIHZhciBzaWdPYmogPSBkZXIuc2lnbmF0dXJlSW1wb3J0KHNpZylcbiAgICAgIGlmIChzaWdPYmopIHJldHVybiBzZWNwMjU2azEuc2lnbmF0dXJlSW1wb3J0KHNpZ09iailcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDRFNBX1NJR05BVFVSRV9QQVJTRV9ERVJfRkFJTClcbiAgICB9LFxuXG4gICAgc2lnbmF0dXJlSW1wb3J0TGF4OiBmdW5jdGlvbiAoc2lnKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIoc2lnLCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzTGVuZ3RoR1RaZXJvKHNpZywgbWVzc2FnZXMuRUNEU0FfU0lHTkFUVVJFX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICB2YXIgc2lnT2JqID0gZGVyLnNpZ25hdHVyZUltcG9ydExheChzaWcpXG4gICAgICBpZiAoc2lnT2JqKSByZXR1cm4gc2VjcDI1NmsxLnNpZ25hdHVyZUltcG9ydChzaWdPYmopXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfUEFSU0VfREVSX0ZBSUwpXG4gICAgfSxcblxuICAgIHNpZ246IGZ1bmN0aW9uIChtZXNzYWdlLCBwcml2YXRlS2V5LCBvcHRpb25zKSB7XG4gICAgICBhc3NlcnQuaXNCdWZmZXIobWVzc2FnZSwgbWVzc2FnZXMuTVNHMzJfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKG1lc3NhZ2UsIDMyLCBtZXNzYWdlcy5NU0czMl9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHByaXZhdGVLZXksIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChwcml2YXRlS2V5LCAzMiwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIHZhciBkYXRhID0gbnVsbFxuICAgICAgdmFyIG5vbmNlZm4gPSBudWxsXG4gICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFzc2VydC5pc09iamVjdChvcHRpb25zLCBtZXNzYWdlcy5PUFRJT05TX1RZUEVfSU5WQUxJRClcblxuICAgICAgICBpZiAob3B0aW9ucy5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBhc3NlcnQuaXNCdWZmZXIob3B0aW9ucy5kYXRhLCBtZXNzYWdlcy5PUFRJT05TX0RBVEFfVFlQRV9JTlZBTElEKVxuICAgICAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChvcHRpb25zLmRhdGEsIDMyLCBtZXNzYWdlcy5PUFRJT05TX0RBVEFfTEVOR1RIX0lOVkFMSUQpXG4gICAgICAgICAgZGF0YSA9IG9wdGlvbnMuZGF0YVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9uY2VmbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYXNzZXJ0LmlzRnVuY3Rpb24ob3B0aW9ucy5ub25jZWZuLCBtZXNzYWdlcy5PUFRJT05TX05PTkNFRk5fVFlQRV9JTlZBTElEKVxuICAgICAgICAgIG5vbmNlZm4gPSBvcHRpb25zLm5vbmNlZm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnNpZ24obWVzc2FnZSwgcHJpdmF0ZUtleSwgbm9uY2VmbiwgZGF0YSlcbiAgICB9LFxuXG4gICAgdmVyaWZ5OiBmdW5jdGlvbiAobWVzc2FnZSwgc2lnbmF0dXJlLCBwdWJsaWNLZXkpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihtZXNzYWdlLCBtZXNzYWdlcy5NU0czMl9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgobWVzc2FnZSwgMzIsIG1lc3NhZ2VzLk1TRzMyX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBhc3NlcnQuaXNCdWZmZXIoc2lnbmF0dXJlLCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKHNpZ25hdHVyZSwgNjQsIG1lc3NhZ2VzLkVDRFNBX1NJR05BVFVSRV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHB1YmxpY0tleSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgyKHB1YmxpY0tleSwgMzMsIDY1LCBtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICByZXR1cm4gc2VjcDI1NmsxLnZlcmlmeShtZXNzYWdlLCBzaWduYXR1cmUsIHB1YmxpY0tleSlcbiAgICB9LFxuXG4gICAgcmVjb3ZlcjogZnVuY3Rpb24gKG1lc3NhZ2UsIHNpZ25hdHVyZSwgcmVjb3ZlcnksIGNvbXByZXNzZWQpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihtZXNzYWdlLCBtZXNzYWdlcy5NU0czMl9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNCdWZmZXJMZW5ndGgobWVzc2FnZSwgMzIsIG1lc3NhZ2VzLk1TRzMyX0xFTkdUSF9JTlZBTElEKVxuXG4gICAgICBhc3NlcnQuaXNCdWZmZXIoc2lnbmF0dXJlLCBtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoKHNpZ25hdHVyZSwgNjQsIG1lc3NhZ2VzLkVDRFNBX1NJR05BVFVSRV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzTnVtYmVyKHJlY292ZXJ5LCBtZXNzYWdlcy5SRUNPVkVSWV9JRF9UWVBFX0lOVkFMSUQpXG4gICAgICBhc3NlcnQuaXNOdW1iZXJJbkludGVydmFsKHJlY292ZXJ5LCAtMSwgNCwgbWVzc2FnZXMuUkVDT1ZFUllfSURfVkFMVUVfSU5WQUxJRClcblxuICAgICAgY29tcHJlc3NlZCA9IGluaXRDb21wcmVzc2VkVmFsdWUoY29tcHJlc3NlZCwgdHJ1ZSlcblxuICAgICAgcmV0dXJuIHNlY3AyNTZrMS5yZWNvdmVyKG1lc3NhZ2UsIHNpZ25hdHVyZSwgcmVjb3ZlcnksIGNvbXByZXNzZWQpXG4gICAgfSxcblxuICAgIGVjZGg6IGZ1bmN0aW9uIChwdWJsaWNLZXksIHByaXZhdGVLZXkpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihwdWJsaWNLZXksIG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoMihwdWJsaWNLZXksIDMzLCA2NSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHByaXZhdGVLZXksIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChwcml2YXRlS2V5LCAzMiwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIHJldHVybiBzZWNwMjU2azEuZWNkaChwdWJsaWNLZXksIHByaXZhdGVLZXkpXG4gICAgfSxcblxuICAgIGVjZGhVbnNhZmU6IGZ1bmN0aW9uIChwdWJsaWNLZXksIHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgICAgIGFzc2VydC5pc0J1ZmZlcihwdWJsaWNLZXksIG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfVFlQRV9JTlZBTElEKVxuICAgICAgYXNzZXJ0LmlzQnVmZmVyTGVuZ3RoMihwdWJsaWNLZXksIDMzLCA2NSwgbWVzc2FnZXMuRUNfUFVCTElDX0tFWV9MRU5HVEhfSU5WQUxJRClcblxuICAgICAgYXNzZXJ0LmlzQnVmZmVyKHByaXZhdGVLZXksIG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RZUEVfSU5WQUxJRClcbiAgICAgIGFzc2VydC5pc0J1ZmZlckxlbmd0aChwcml2YXRlS2V5LCAzMiwgbWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfTEVOR1RIX0lOVkFMSUQpXG5cbiAgICAgIGNvbXByZXNzZWQgPSBpbml0Q29tcHJlc3NlZFZhbHVlKGNvbXByZXNzZWQsIHRydWUpXG5cbiAgICAgIHJldHVybiBzZWNwMjU2azEuZWNkaFVuc2FmZShwdWJsaWNLZXksIHByaXZhdGVLZXksIGNvbXByZXNzZWQpXG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxuLy8gVHlwZUVycm9yXG5leHBvcnRzLmlzQXJyYXkgPSBmdW5jdGlvbiAodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgdGhyb3cgVHlwZUVycm9yKG1lc3NhZ2UpXG59XG5cbmV4cG9ydHMuaXNCb29sZWFuID0gZnVuY3Rpb24gKHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgQm9vbGVhbl0nKSB0aHJvdyBUeXBlRXJyb3IobWVzc2FnZSlcbn1cblxuZXhwb3J0cy5pc0J1ZmZlciA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHRocm93IFR5cGVFcnJvcihtZXNzYWdlKVxufVxuXG5leHBvcnRzLmlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSAnW29iamVjdCBGdW5jdGlvbl0nKSB0aHJvdyBUeXBlRXJyb3IobWVzc2FnZSlcbn1cblxuZXhwb3J0cy5pc051bWJlciA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IE51bWJlcl0nKSB0aHJvdyBUeXBlRXJyb3IobWVzc2FnZSlcbn1cblxuZXhwb3J0cy5pc09iamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB0aHJvdyBUeXBlRXJyb3IobWVzc2FnZSlcbn1cblxuLy8gUmFuZ2VFcnJvclxuZXhwb3J0cy5pc0J1ZmZlckxlbmd0aCA9IGZ1bmN0aW9uIChidWZmZXIsIGxlbmd0aCwgbWVzc2FnZSkge1xuICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKG1lc3NhZ2UpXG59XG5cbmV4cG9ydHMuaXNCdWZmZXJMZW5ndGgyID0gZnVuY3Rpb24gKGJ1ZmZlciwgbGVuZ3RoMSwgbGVuZ3RoMiwgbWVzc2FnZSkge1xuICBpZiAoYnVmZmVyLmxlbmd0aCAhPT0gbGVuZ3RoMSAmJiBidWZmZXIubGVuZ3RoICE9PSBsZW5ndGgyKSB0aHJvdyBSYW5nZUVycm9yKG1lc3NhZ2UpXG59XG5cbmV4cG9ydHMuaXNMZW5ndGhHVFplcm8gPSBmdW5jdGlvbiAodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkgdGhyb3cgUmFuZ2VFcnJvcihtZXNzYWdlKVxufVxuXG5leHBvcnRzLmlzTnVtYmVySW5JbnRlcnZhbCA9IGZ1bmN0aW9uIChudW1iZXIsIHgsIHksIG1lc3NhZ2UpIHtcbiAgaWYgKG51bWJlciA8PSB4IHx8IG51bWJlciA+PSB5KSB0aHJvdyBSYW5nZUVycm9yKG1lc3NhZ2UpXG59XG4iLCIndXNlIHN0cmljdCdcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIGJpcDY2ID0gcmVxdWlyZSgnYmlwNjYnKVxuXG52YXIgRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgPSBCdWZmZXIuZnJvbShbXG4gIC8vIGJlZ2luXG4gIDB4MzAsIDB4ODEsIDB4ZDMsIDB4MDIsIDB4MDEsIDB4MDEsIDB4MDQsIDB4MjAsXG4gIC8vIHByaXZhdGUga2V5XG4gIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gIC8vIG1pZGRsZVxuICAweGEwLCAweDgxLCAweDg1LCAweDMwLCAweDgxLCAweDgyLCAweDAyLCAweDAxLCAweDAxLCAweDMwLCAweDJjLCAweDA2LCAweDA3LCAweDJhLCAweDg2LCAweDQ4LFxuICAweGNFLCAweDNkLCAweDAxLCAweDAxLCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAweGZmLCAweGZmLCAweGZFLCAweGZmLCAweGZmLCAweGZjLCAweDJmLCAweDMwLCAweDA2LCAweDA0LCAweDAxLCAweDAwLCAweDA0LCAweDAxLCAweDA3LCAweDA0LFxuICAweDIxLCAweDAyLCAweDc5LCAweGJFLCAweDY2LCAweDdFLCAweGY5LCAweGRjLCAweGJiLCAweGFjLCAweDU1LCAweGEwLCAweDYyLCAweDk1LCAweGNFLCAweDg3LFxuICAweDBiLCAweDA3LCAweDAyLCAweDliLCAweGZjLCAweGRiLCAweDJkLCAweGNFLCAweDI4LCAweGQ5LCAweDU5LCAweGYyLCAweDgxLCAweDViLCAweDE2LCAweGY4LFxuICAweDE3LCAweDk4LCAweDAyLCAweDIxLCAweDAwLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZmLFxuICAweGZmLCAweGZmLCAweGZmLCAweGZmLCAweGZFLCAweGJhLCAweGFFLCAweGRjLCAweEU2LCAweGFmLCAweDQ4LCAweGEwLCAweDNiLCAweGJmLCAweGQyLCAweDVFLFxuICAweDhjLCAweGQwLCAweDM2LCAweDQxLCAweDQxLCAweDAyLCAweDAxLCAweDAxLCAweGExLCAweDI0LCAweDAzLCAweDIyLCAweDAwLFxuICAvLyBwdWJsaWMga2V5XG4gIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsXG4gIDB4MDBcbl0pXG5cbnZhciBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEID0gQnVmZmVyLmZyb20oW1xuICAvLyBiZWdpblxuICAweDMwLCAweDgyLCAweDAxLCAweDEzLCAweDAyLCAweDAxLCAweDAxLCAweDA0LCAweDIwLFxuICAvLyBwcml2YXRlIGtleVxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAvLyBtaWRkbGVcbiAgMHhhMCwgMHg4MSwgMHhhNSwgMHgzMCwgMHg4MSwgMHhhMiwgMHgwMiwgMHgwMSwgMHgwMSwgMHgzMCwgMHgyYywgMHgwNiwgMHgwNywgMHgyYSwgMHg4NiwgMHg0OCxcbiAgMHhjRSwgMHgzZCwgMHgwMSwgMHgwMSwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgMHhmZiwgMHhmZiwgMHhmRSwgMHhmZiwgMHhmZiwgMHhmYywgMHgyZiwgMHgzMCwgMHgwNiwgMHgwNCwgMHgwMSwgMHgwMCwgMHgwNCwgMHgwMSwgMHgwNywgMHgwNCxcbiAgMHg0MSwgMHgwNCwgMHg3OSwgMHhiRSwgMHg2NiwgMHg3RSwgMHhmOSwgMHhkYywgMHhiYiwgMHhhYywgMHg1NSwgMHhhMCwgMHg2MiwgMHg5NSwgMHhjRSwgMHg4NyxcbiAgMHgwYiwgMHgwNywgMHgwMiwgMHg5YiwgMHhmYywgMHhkYiwgMHgyZCwgMHhjRSwgMHgyOCwgMHhkOSwgMHg1OSwgMHhmMiwgMHg4MSwgMHg1YiwgMHgxNiwgMHhmOCxcbiAgMHgxNywgMHg5OCwgMHg0OCwgMHgzYSwgMHhkYSwgMHg3NywgMHgyNiwgMHhhMywgMHhjNCwgMHg2NSwgMHg1ZCwgMHhhNCwgMHhmYiwgMHhmYywgMHgwRSwgMHgxMSxcbiAgMHgwOCwgMHhhOCwgMHhmZCwgMHgxNywgMHhiNCwgMHg0OCwgMHhhNiwgMHg4NSwgMHg1NCwgMHgxOSwgMHg5YywgMHg0NywgMHhkMCwgMHg4ZiwgMHhmYiwgMHgxMCxcbiAgMHhkNCwgMHhiOCwgMHgwMiwgMHgyMSwgMHgwMCwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZixcbiAgMHhmZiwgMHhmZiwgMHhmZiwgMHhmZiwgMHhmRSwgMHhiYSwgMHhhRSwgMHhkYywgMHhFNiwgMHhhZiwgMHg0OCwgMHhhMCwgMHgzYiwgMHhiZiwgMHhkMiwgMHg1RSxcbiAgMHg4YywgMHhkMCwgMHgzNiwgMHg0MSwgMHg0MSwgMHgwMiwgMHgwMSwgMHgwMSwgMHhhMSwgMHg0NCwgMHgwMywgMHg0MiwgMHgwMCxcbiAgLy8gcHVibGljIGtleVxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLFxuICAweDAwXG5dKVxuXG5leHBvcnRzLnByaXZhdGVLZXlFeHBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSwgcHVibGljS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciByZXN1bHQgPSBCdWZmZXIuZnJvbShjb21wcmVzc2VkID8gRUNfUFJJVktFWV9FWFBPUlRfREVSX0NPTVBSRVNTRUQgOiBFQ19QUklWS0VZX0VYUE9SVF9ERVJfVU5DT01QUkVTU0VEKVxuICBwcml2YXRlS2V5LmNvcHkocmVzdWx0LCBjb21wcmVzc2VkID8gOCA6IDkpXG4gIHB1YmxpY0tleS5jb3B5KHJlc3VsdCwgY29tcHJlc3NlZCA/IDE4MSA6IDIxNClcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnRzLnByaXZhdGVLZXlJbXBvcnQgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICB2YXIgbGVuZ3RoID0gcHJpdmF0ZUtleS5sZW5ndGhcblxuICAvLyBzZXF1ZW5jZSBoZWFkZXJcbiAgdmFyIGluZGV4ID0gMFxuICBpZiAobGVuZ3RoIDwgaW5kZXggKyAxIHx8IHByaXZhdGVLZXlbaW5kZXhdICE9PSAweDMwKSByZXR1cm5cbiAgaW5kZXggKz0gMVxuXG4gIC8vIHNlcXVlbmNlIGxlbmd0aCBjb25zdHJ1Y3RvclxuICBpZiAobGVuZ3RoIDwgaW5kZXggKyAxIHx8ICEocHJpdmF0ZUtleVtpbmRleF0gJiAweDgwKSkgcmV0dXJuXG5cbiAgdmFyIGxlbmIgPSBwcml2YXRlS2V5W2luZGV4XSAmIDB4N2ZcbiAgaW5kZXggKz0gMVxuICBpZiAobGVuYiA8IDEgfHwgbGVuYiA+IDIpIHJldHVyblxuICBpZiAobGVuZ3RoIDwgaW5kZXggKyBsZW5iKSByZXR1cm5cblxuICAvLyBzZXF1ZW5jZSBsZW5ndGhcbiAgdmFyIGxlbiA9IHByaXZhdGVLZXlbaW5kZXggKyBsZW5iIC0gMV0gfCAobGVuYiA+IDEgPyBwcml2YXRlS2V5W2luZGV4ICsgbGVuYiAtIDJdIDw8IDggOiAwKVxuICBpbmRleCArPSBsZW5iXG4gIGlmIChsZW5ndGggPCBpbmRleCArIGxlbikgcmV0dXJuXG5cbiAgLy8gc2VxdWVuY2UgZWxlbWVudCAwOiB2ZXJzaW9uIG51bWJlciAoPTEpXG4gIGlmIChsZW5ndGggPCBpbmRleCArIDMgfHxcbiAgICAgIHByaXZhdGVLZXlbaW5kZXhdICE9PSAweDAyIHx8XG4gICAgICBwcml2YXRlS2V5W2luZGV4ICsgMV0gIT09IDB4MDEgfHxcbiAgICAgIHByaXZhdGVLZXlbaW5kZXggKyAyXSAhPT0gMHgwMSkge1xuICAgIHJldHVyblxuICB9XG4gIGluZGV4ICs9IDNcblxuICAvLyBzZXF1ZW5jZSBlbGVtZW50IDE6IG9jdGV0IHN0cmluZywgdXAgdG8gMzIgYnl0ZXNcbiAgaWYgKGxlbmd0aCA8IGluZGV4ICsgMiB8fFxuICAgICAgcHJpdmF0ZUtleVtpbmRleF0gIT09IDB4MDQgfHxcbiAgICAgIHByaXZhdGVLZXlbaW5kZXggKyAxXSA+IDB4MjAgfHxcbiAgICAgIGxlbmd0aCA8IGluZGV4ICsgMiArIHByaXZhdGVLZXlbaW5kZXggKyAxXSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgcmV0dXJuIHByaXZhdGVLZXkuc2xpY2UoaW5kZXggKyAyLCBpbmRleCArIDIgKyBwcml2YXRlS2V5W2luZGV4ICsgMV0pXG59XG5cbmV4cG9ydHMuc2lnbmF0dXJlRXhwb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFswXSksIHNpZ09iai5yXSlcbiAgZm9yICh2YXIgbGVuUiA9IDMzLCBwb3NSID0gMDsgbGVuUiA+IDEgJiYgcltwb3NSXSA9PT0gMHgwMCAmJiAhKHJbcG9zUiArIDFdICYgMHg4MCk7IC0tbGVuUiwgKytwb3NSKTtcblxuICB2YXIgcyA9IEJ1ZmZlci5jb25jYXQoW0J1ZmZlci5mcm9tKFswXSksIHNpZ09iai5zXSlcbiAgZm9yICh2YXIgbGVuUyA9IDMzLCBwb3NTID0gMDsgbGVuUyA+IDEgJiYgc1twb3NTXSA9PT0gMHgwMCAmJiAhKHNbcG9zUyArIDFdICYgMHg4MCk7IC0tbGVuUywgKytwb3NTKTtcblxuICByZXR1cm4gYmlwNjYuZW5jb2RlKHIuc2xpY2UocG9zUiksIHMuc2xpY2UocG9zUykpXG59XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZykge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMClcbiAgdmFyIHMgPSBCdWZmZXIuYWxsb2MoMzIsIDApXG5cbiAgdHJ5IHtcbiAgICB2YXIgc2lnT2JqID0gYmlwNjYuZGVjb2RlKHNpZylcbiAgICBpZiAoc2lnT2JqLnIubGVuZ3RoID09PSAzMyAmJiBzaWdPYmouclswXSA9PT0gMHgwMCkgc2lnT2JqLnIgPSBzaWdPYmouci5zbGljZSgxKVxuICAgIGlmIChzaWdPYmouci5sZW5ndGggPiAzMikgdGhyb3cgbmV3IEVycm9yKCdSIGxlbmd0aCBpcyB0b28gbG9uZycpXG4gICAgaWYgKHNpZ09iai5zLmxlbmd0aCA9PT0gMzMgJiYgc2lnT2JqLnNbMF0gPT09IDB4MDApIHNpZ09iai5zID0gc2lnT2JqLnMuc2xpY2UoMSlcbiAgICBpZiAoc2lnT2JqLnMubGVuZ3RoID4gMzIpIHRocm93IG5ldyBFcnJvcignUyBsZW5ndGggaXMgdG9vIGxvbmcnKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHNpZ09iai5yLmNvcHkociwgMzIgLSBzaWdPYmouci5sZW5ndGgpXG4gIHNpZ09iai5zLmNvcHkocywgMzIgLSBzaWdPYmoucy5sZW5ndGgpXG5cbiAgcmV0dXJuIHsgcjogciwgczogcyB9XG59XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0TGF4ID0gZnVuY3Rpb24gKHNpZykge1xuICB2YXIgciA9IEJ1ZmZlci5hbGxvYygzMiwgMClcbiAgdmFyIHMgPSBCdWZmZXIuYWxsb2MoMzIsIDApXG5cbiAgdmFyIGxlbmd0aCA9IHNpZy5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlXG4gIGlmIChzaWdbaW5kZXgrK10gIT09IDB4MzApIHJldHVyblxuXG4gIC8vIHNlcXVlbmNlIGxlbmd0aCBieXRlXG4gIHZhciBsZW5ieXRlID0gc2lnW2luZGV4KytdXG4gIGlmIChsZW5ieXRlICYgMHg4MCkge1xuICAgIGluZGV4ICs9IGxlbmJ5dGUgLSAweDgwXG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoKSByZXR1cm5cbiAgfVxuXG4gIC8vIHNlcXVlbmNlIHRhZyBieXRlIGZvciByXG4gIGlmIChzaWdbaW5kZXgrK10gIT09IDB4MDIpIHJldHVyblxuXG4gIC8vIGxlbmd0aCBmb3IgclxuICB2YXIgcmxlbiA9IHNpZ1tpbmRleCsrXVxuICBpZiAocmxlbiAmIDB4ODApIHtcbiAgICBsZW5ieXRlID0gcmxlbiAtIDB4ODBcbiAgICBpZiAoaW5kZXggKyBsZW5ieXRlID4gbGVuZ3RoKSByZXR1cm5cbiAgICBmb3IgKDsgbGVuYnl0ZSA+IDAgJiYgc2lnW2luZGV4XSA9PT0gMHgwMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKTtcbiAgICBmb3IgKHJsZW4gPSAwOyBsZW5ieXRlID4gMDsgaW5kZXggKz0gMSwgbGVuYnl0ZSAtPSAxKSBybGVuID0gKHJsZW4gPDwgOCkgKyBzaWdbaW5kZXhdXG4gIH1cbiAgaWYgKHJsZW4gPiBsZW5ndGggLSBpbmRleCkgcmV0dXJuXG4gIHZhciByaW5kZXggPSBpbmRleFxuICBpbmRleCArPSBybGVuXG5cbiAgLy8gc2VxdWVuY2UgdGFnIGJ5dGUgZm9yIHNcbiAgaWYgKHNpZ1tpbmRleCsrXSAhPT0gMHgwMikgcmV0dXJuXG5cbiAgLy8gbGVuZ3RoIGZvciBzXG4gIHZhciBzbGVuID0gc2lnW2luZGV4KytdXG4gIGlmIChzbGVuICYgMHg4MCkge1xuICAgIGxlbmJ5dGUgPSBzbGVuIC0gMHg4MFxuICAgIGlmIChpbmRleCArIGxlbmJ5dGUgPiBsZW5ndGgpIHJldHVyblxuICAgIGZvciAoOyBsZW5ieXRlID4gMCAmJiBzaWdbaW5kZXhdID09PSAweDAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpO1xuICAgIGZvciAoc2xlbiA9IDA7IGxlbmJ5dGUgPiAwOyBpbmRleCArPSAxLCBsZW5ieXRlIC09IDEpIHNsZW4gPSAoc2xlbiA8PCA4KSArIHNpZ1tpbmRleF1cbiAgfVxuICBpZiAoc2xlbiA+IGxlbmd0aCAtIGluZGV4KSByZXR1cm5cbiAgdmFyIHNpbmRleCA9IGluZGV4XG4gIGluZGV4ICs9IHNsZW5cblxuICAvLyBpZ25vcmUgbGVhZGluZyB6ZXJvcyBpbiByXG4gIGZvciAoOyBybGVuID4gMCAmJiBzaWdbcmluZGV4XSA9PT0gMHgwMDsgcmxlbiAtPSAxLCByaW5kZXggKz0gMSk7XG4gIC8vIGNvcHkgciB2YWx1ZVxuICBpZiAocmxlbiA+IDMyKSByZXR1cm5cbiAgdmFyIHJ2YWx1ZSA9IHNpZy5zbGljZShyaW5kZXgsIHJpbmRleCArIHJsZW4pXG4gIHJ2YWx1ZS5jb3B5KHIsIDMyIC0gcnZhbHVlLmxlbmd0aClcblxuICAvLyBpZ25vcmUgbGVhZGluZyB6ZXJvcyBpbiBzXG4gIGZvciAoOyBzbGVuID4gMCAmJiBzaWdbc2luZGV4XSA9PT0gMHgwMDsgc2xlbiAtPSAxLCBzaW5kZXggKz0gMSk7XG4gIC8vIGNvcHkgcyB2YWx1ZVxuICBpZiAoc2xlbiA+IDMyKSByZXR1cm5cbiAgdmFyIHN2YWx1ZSA9IHNpZy5zbGljZShzaW5kZXgsIHNpbmRleCArIHNsZW4pXG4gIHN2YWx1ZS5jb3B5KHMsIDMyIC0gc3ZhbHVlLmxlbmd0aClcblxuICByZXR1cm4geyByOiByLCBzOiBzIH1cbn1cbiIsIi8vIFJlZmVyZW5jZSBodHRwczovL2dpdGh1Yi5jb20vYml0Y29pbi9iaXBzL2Jsb2IvbWFzdGVyL2JpcC0wMDY2Lm1lZGlhd2lraVxuLy8gRm9ybWF0OiAweDMwIFt0b3RhbC1sZW5ndGhdIDB4MDIgW1ItbGVuZ3RoXSBbUl0gMHgwMiBbUy1sZW5ndGhdIFtTXVxuLy8gTk9URTogU0lHSEFTSCBieXRlIGlnbm9yZWQgQU5EIHJlc3RyaWN0ZWQsIHRydW5jYXRlIGJlZm9yZSB1c2VcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbmZ1bmN0aW9uIGNoZWNrIChidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPCA4KSByZXR1cm4gZmFsc2VcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPiA3MikgcmV0dXJuIGZhbHNlXG4gIGlmIChidWZmZXJbMF0gIT09IDB4MzApIHJldHVybiBmYWxzZVxuICBpZiAoYnVmZmVyWzFdICE9PSBidWZmZXIubGVuZ3RoIC0gMikgcmV0dXJuIGZhbHNlXG4gIGlmIChidWZmZXJbMl0gIT09IDB4MDIpIHJldHVybiBmYWxzZVxuXG4gIHZhciBsZW5SID0gYnVmZmVyWzNdXG4gIGlmIChsZW5SID09PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKDUgKyBsZW5SID49IGJ1ZmZlci5sZW5ndGgpIHJldHVybiBmYWxzZVxuICBpZiAoYnVmZmVyWzQgKyBsZW5SXSAhPT0gMHgwMikgcmV0dXJuIGZhbHNlXG5cbiAgdmFyIGxlblMgPSBidWZmZXJbNSArIGxlblJdXG4gIGlmIChsZW5TID09PSAwKSByZXR1cm4gZmFsc2VcbiAgaWYgKCg2ICsgbGVuUiArIGxlblMpICE9PSBidWZmZXIubGVuZ3RoKSByZXR1cm4gZmFsc2VcblxuICBpZiAoYnVmZmVyWzRdICYgMHg4MCkgcmV0dXJuIGZhbHNlXG4gIGlmIChsZW5SID4gMSAmJiAoYnVmZmVyWzRdID09PSAweDAwKSAmJiAhKGJ1ZmZlcls1XSAmIDB4ODApKSByZXR1cm4gZmFsc2VcblxuICBpZiAoYnVmZmVyW2xlblIgKyA2XSAmIDB4ODApIHJldHVybiBmYWxzZVxuICBpZiAobGVuUyA+IDEgJiYgKGJ1ZmZlcltsZW5SICsgNl0gPT09IDB4MDApICYmICEoYnVmZmVyW2xlblIgKyA3XSAmIDB4ODApKSByZXR1cm4gZmFsc2VcbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZGVjb2RlIChidWZmZXIpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPCA4KSB0aHJvdyBuZXcgRXJyb3IoJ0RFUiBzZXF1ZW5jZSBsZW5ndGggaXMgdG9vIHNob3J0JylcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPiA3MikgdGhyb3cgbmV3IEVycm9yKCdERVIgc2VxdWVuY2UgbGVuZ3RoIGlzIHRvbyBsb25nJylcbiAgaWYgKGJ1ZmZlclswXSAhPT0gMHgzMCkgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBERVIgc2VxdWVuY2UnKVxuICBpZiAoYnVmZmVyWzFdICE9PSBidWZmZXIubGVuZ3RoIC0gMikgdGhyb3cgbmV3IEVycm9yKCdERVIgc2VxdWVuY2UgbGVuZ3RoIGlzIGludmFsaWQnKVxuICBpZiAoYnVmZmVyWzJdICE9PSAweDAyKSB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIERFUiBpbnRlZ2VyJylcblxuICB2YXIgbGVuUiA9IGJ1ZmZlclszXVxuICBpZiAobGVuUiA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdSIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKDUgKyBsZW5SID49IGJ1ZmZlci5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignUiBsZW5ndGggaXMgdG9vIGxvbmcnKVxuICBpZiAoYnVmZmVyWzQgKyBsZW5SXSAhPT0gMHgwMikgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBERVIgaW50ZWdlciAoMiknKVxuXG4gIHZhciBsZW5TID0gYnVmZmVyWzUgKyBsZW5SXVxuICBpZiAobGVuUyA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKCg2ICsgbGVuUiArIGxlblMpICE9PSBidWZmZXIubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ1MgbGVuZ3RoIGlzIGludmFsaWQnKVxuXG4gIGlmIChidWZmZXJbNF0gJiAweDgwKSB0aHJvdyBuZXcgRXJyb3IoJ1IgdmFsdWUgaXMgbmVnYXRpdmUnKVxuICBpZiAobGVuUiA+IDEgJiYgKGJ1ZmZlcls0XSA9PT0gMHgwMCkgJiYgIShidWZmZXJbNV0gJiAweDgwKSkgdGhyb3cgbmV3IEVycm9yKCdSIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpXG5cbiAgaWYgKGJ1ZmZlcltsZW5SICsgNl0gJiAweDgwKSB0aHJvdyBuZXcgRXJyb3IoJ1MgdmFsdWUgaXMgbmVnYXRpdmUnKVxuICBpZiAobGVuUyA+IDEgJiYgKGJ1ZmZlcltsZW5SICsgNl0gPT09IDB4MDApICYmICEoYnVmZmVyW2xlblIgKyA3XSAmIDB4ODApKSB0aHJvdyBuZXcgRXJyb3IoJ1MgdmFsdWUgZXhjZXNzaXZlbHkgcGFkZGVkJylcblxuICAvLyBub24tQklQNjYgLSBleHRyYWN0IFIsIFMgdmFsdWVzXG4gIHJldHVybiB7XG4gICAgcjogYnVmZmVyLnNsaWNlKDQsIDQgKyBsZW5SKSxcbiAgICBzOiBidWZmZXIuc2xpY2UoNiArIGxlblIpXG4gIH1cbn1cblxuLypcbiAqIEV4cGVjdHMgciBhbmQgcyB0byBiZSBwb3NpdGl2ZSBERVIgaW50ZWdlcnMuXG4gKlxuICogVGhlIERFUiBmb3JtYXQgdXNlcyB0aGUgbW9zdCBzaWduaWZpY2FudCBiaXQgYXMgYSBzaWduIGJpdCAoJiAweDgwKS5cbiAqIElmIHRoZSBzaWduaWZpY2FudCBiaXQgaXMgc2V0IEFORCB0aGUgaW50ZWdlciBpcyBwb3NpdGl2ZSwgYSAweDAwIGlzIHByZXBlbmRlZC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICAgIDAgPT4gICAgIDB4MDBcbiAqICAgICAgMSA9PiAgICAgMHgwMVxuICogICAgIC0xID0+ICAgICAweGZmXG4gKiAgICAxMjcgPT4gICAgIDB4N2ZcbiAqICAgLTEyNyA9PiAgICAgMHg4MVxuICogICAgMTI4ID0+ICAgMHgwMDgwXG4gKiAgIC0xMjggPT4gICAgIDB4ODBcbiAqICAgIDI1NSA9PiAgIDB4MDBmZlxuICogICAtMjU1ID0+ICAgMHhmZjAxXG4gKiAgMTYzMDAgPT4gICAweDNmYWNcbiAqIC0xNjMwMCA9PiAgIDB4YzA1NFxuICogIDYyMzAwID0+IDB4MDBmMzVjXG4gKiAtNjIzMDAgPT4gMHhmZjBjYTRcbiovXG5mdW5jdGlvbiBlbmNvZGUgKHIsIHMpIHtcbiAgdmFyIGxlblIgPSByLmxlbmd0aFxuICB2YXIgbGVuUyA9IHMubGVuZ3RoXG4gIGlmIChsZW5SID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ1IgbGVuZ3RoIGlzIHplcm8nKVxuICBpZiAobGVuUyA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdTIGxlbmd0aCBpcyB6ZXJvJylcbiAgaWYgKGxlblIgPiAzMykgdGhyb3cgbmV3IEVycm9yKCdSIGxlbmd0aCBpcyB0b28gbG9uZycpXG4gIGlmIChsZW5TID4gMzMpIHRocm93IG5ldyBFcnJvcignUyBsZW5ndGggaXMgdG9vIGxvbmcnKVxuICBpZiAoclswXSAmIDB4ODApIHRocm93IG5ldyBFcnJvcignUiB2YWx1ZSBpcyBuZWdhdGl2ZScpXG4gIGlmIChzWzBdICYgMHg4MCkgdGhyb3cgbmV3IEVycm9yKCdTIHZhbHVlIGlzIG5lZ2F0aXZlJylcbiAgaWYgKGxlblIgPiAxICYmIChyWzBdID09PSAweDAwKSAmJiAhKHJbMV0gJiAweDgwKSkgdGhyb3cgbmV3IEVycm9yKCdSIHZhbHVlIGV4Y2Vzc2l2ZWx5IHBhZGRlZCcpXG4gIGlmIChsZW5TID4gMSAmJiAoc1swXSA9PT0gMHgwMCkgJiYgIShzWzFdICYgMHg4MCkpIHRocm93IG5ldyBFcnJvcignUyB2YWx1ZSBleGNlc3NpdmVseSBwYWRkZWQnKVxuXG4gIHZhciBzaWduYXR1cmUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoNiArIGxlblIgKyBsZW5TKVxuXG4gIC8vIDB4MzAgW3RvdGFsLWxlbmd0aF0gMHgwMiBbUi1sZW5ndGhdIFtSXSAweDAyIFtTLWxlbmd0aF0gW1NdXG4gIHNpZ25hdHVyZVswXSA9IDB4MzBcbiAgc2lnbmF0dXJlWzFdID0gc2lnbmF0dXJlLmxlbmd0aCAtIDJcbiAgc2lnbmF0dXJlWzJdID0gMHgwMlxuICBzaWduYXR1cmVbM10gPSByLmxlbmd0aFxuICByLmNvcHkoc2lnbmF0dXJlLCA0KVxuICBzaWduYXR1cmVbNCArIGxlblJdID0gMHgwMlxuICBzaWduYXR1cmVbNSArIGxlblJdID0gcy5sZW5ndGhcbiAgcy5jb3B5KHNpZ25hdHVyZSwgNiArIGxlblIpXG5cbiAgcmV0dXJuIHNpZ25hdHVyZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY2hlY2s6IGNoZWNrLFxuICBkZWNvZGU6IGRlY29kZSxcbiAgZW5jb2RlOiBlbmNvZGVcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJylcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcblxudmFyIG1lc3NhZ2VzID0gcmVxdWlyZSgnLi4vbWVzc2FnZXMuanNvbicpXG5cbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJylcbnZhciBlY3BhcmFtcyA9IGVjLmN1cnZlXG5cbmZ1bmN0aW9uIGxvYWRDb21wcmVzc2VkUHVibGljS2V5IChmaXJzdCwgeEJ1ZmZlcikge1xuICB2YXIgeCA9IG5ldyBCTih4QnVmZmVyKVxuXG4gIC8vIG92ZXJmbG93XG4gIGlmICh4LmNtcChlY3BhcmFtcy5wKSA+PSAwKSByZXR1cm4gbnVsbFxuICB4ID0geC50b1JlZChlY3BhcmFtcy5yZWQpXG5cbiAgLy8gY29tcHV0ZSBjb3JyZXNwb25kaW5nIFlcbiAgdmFyIHkgPSB4LnJlZFNxcigpLnJlZElNdWwoeCkucmVkSUFkZChlY3BhcmFtcy5iKS5yZWRTcXJ0KClcbiAgaWYgKChmaXJzdCA9PT0gMHgwMykgIT09IHkuaXNPZGQoKSkgeSA9IHkucmVkTmVnKClcblxuICByZXR1cm4gZWMua2V5UGFpcih7IHB1YjogeyB4OiB4LCB5OiB5IH0gfSlcbn1cblxuZnVuY3Rpb24gbG9hZFVuY29tcHJlc3NlZFB1YmxpY0tleSAoZmlyc3QsIHhCdWZmZXIsIHlCdWZmZXIpIHtcbiAgdmFyIHggPSBuZXcgQk4oeEJ1ZmZlcilcbiAgdmFyIHkgPSBuZXcgQk4oeUJ1ZmZlcilcblxuICAvLyBvdmVyZmxvd1xuICBpZiAoeC5jbXAoZWNwYXJhbXMucCkgPj0gMCB8fCB5LmNtcChlY3BhcmFtcy5wKSA+PSAwKSByZXR1cm4gbnVsbFxuXG4gIHggPSB4LnRvUmVkKGVjcGFyYW1zLnJlZClcbiAgeSA9IHkudG9SZWQoZWNwYXJhbXMucmVkKVxuXG4gIC8vIGlzIG9kZCBmbGFnXG4gIGlmICgoZmlyc3QgPT09IDB4MDYgfHwgZmlyc3QgPT09IDB4MDcpICYmIHkuaXNPZGQoKSAhPT0gKGZpcnN0ID09PSAweDA3KSkgcmV0dXJuIG51bGxcblxuICAvLyB4KngqeCArIGIgPSB5KnlcbiAgdmFyIHgzID0geC5yZWRTcXIoKS5yZWRJTXVsKHgpXG4gIGlmICgheS5yZWRTcXIoKS5yZWRJU3ViKHgzLnJlZElBZGQoZWNwYXJhbXMuYikpLmlzWmVybygpKSByZXR1cm4gbnVsbFxuXG4gIHJldHVybiBlYy5rZXlQYWlyKHsgcHViOiB7IHg6IHgsIHk6IHkgfSB9KVxufVxuXG5mdW5jdGlvbiBsb2FkUHVibGljS2V5IChwdWJsaWNLZXkpIHtcbiAgdmFyIGZpcnN0ID0gcHVibGljS2V5WzBdXG4gIHN3aXRjaCAoZmlyc3QpIHtcbiAgICBjYXNlIDB4MDI6XG4gICAgY2FzZSAweDAzOlxuICAgICAgaWYgKHB1YmxpY0tleS5sZW5ndGggIT09IDMzKSByZXR1cm4gbnVsbFxuICAgICAgcmV0dXJuIGxvYWRDb21wcmVzc2VkUHVibGljS2V5KGZpcnN0LCBwdWJsaWNLZXkuc2xpY2UoMSwgMzMpKVxuICAgIGNhc2UgMHgwNDpcbiAgICBjYXNlIDB4MDY6XG4gICAgY2FzZSAweDA3OlxuICAgICAgaWYgKHB1YmxpY0tleS5sZW5ndGggIT09IDY1KSByZXR1cm4gbnVsbFxuICAgICAgcmV0dXJuIGxvYWRVbmNvbXByZXNzZWRQdWJsaWNLZXkoZmlyc3QsIHB1YmxpY0tleS5zbGljZSgxLCAzMyksIHB1YmxpY0tleS5zbGljZSgzMywgNjUpKVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbmV4cG9ydHMucHJpdmF0ZUtleVZlcmlmeSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7XG4gIHZhciBibiA9IG5ldyBCTihwcml2YXRlS2V5KVxuICByZXR1cm4gYm4uY21wKGVjcGFyYW1zLm4pIDwgMCAmJiAhYm4uaXNaZXJvKClcbn1cblxuZXhwb3J0cy5wcml2YXRlS2V5RXhwb3J0ID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIGQgPSBuZXcgQk4ocHJpdmF0ZUtleSlcbiAgaWYgKGQuY21wKGVjcGFyYW1zLm4pID49IDAgfHwgZC5pc1plcm8oKSkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX0VYUE9SVF9ERVJfRkFJTClcblxuICByZXR1cm4gQnVmZmVyLmZyb20oZWMua2V5RnJvbVByaXZhdGUocHJpdmF0ZUtleSkuZ2V0UHVibGljKGNvbXByZXNzZWQsIHRydWUpKVxufVxuXG5leHBvcnRzLnByaXZhdGVLZXlOZWdhdGUgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICB2YXIgYm4gPSBuZXcgQk4ocHJpdmF0ZUtleSlcbiAgcmV0dXJuIGJuLmlzWmVybygpID8gQnVmZmVyLmFsbG9jKDMyKSA6IGVjcGFyYW1zLm4uc3ViKGJuKS51bW9kKGVjcGFyYW1zLm4pLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpXG59XG5cbmV4cG9ydHMucHJpdmF0ZUtleU1vZEludmVyc2UgPSBmdW5jdGlvbiAocHJpdmF0ZUtleSkge1xuICB2YXIgYm4gPSBuZXcgQk4ocHJpdmF0ZUtleSlcbiAgaWYgKGJuLmNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfUkFOR0VfSU5WQUxJRClcblxuICByZXR1cm4gYm4uaW52bShlY3BhcmFtcy5uKS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKVxufVxuXG5leHBvcnRzLnByaXZhdGVLZXlUd2Vha0FkZCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCB0d2Vhaykge1xuICB2YXIgYm4gPSBuZXcgQk4odHdlYWspXG4gIGlmIChibi5jbXAoZWNwYXJhbXMubikgPj0gMCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BSSVZBVEVfS0VZX1RXRUFLX0FERF9GQUlMKVxuXG4gIGJuLmlhZGQobmV3IEJOKHByaXZhdGVLZXkpKVxuICBpZiAoYm4uY21wKGVjcGFyYW1zLm4pID49IDApIGJuLmlzdWIoZWNwYXJhbXMubilcbiAgaWYgKGJuLmlzWmVybygpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfVFdFQUtfQUREX0ZBSUwpXG5cbiAgcmV0dXJuIGJuLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpXG59XG5cbmV4cG9ydHMucHJpdmF0ZUtleVR3ZWFrTXVsID0gZnVuY3Rpb24gKHByaXZhdGVLZXksIHR3ZWFrKSB7XG4gIHZhciBibiA9IG5ldyBCTih0d2VhaylcbiAgaWYgKGJuLmNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGJuLmlzWmVybygpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFJJVkFURV9LRVlfVFdFQUtfTVVMX0ZBSUwpXG5cbiAgYm4uaW11bChuZXcgQk4ocHJpdmF0ZUtleSkpXG4gIGlmIChibi5jbXAoZWNwYXJhbXMubikpIGJuID0gYm4udW1vZChlY3BhcmFtcy5uKVxuXG4gIHJldHVybiBibi50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKVxufVxuXG5leHBvcnRzLnB1YmxpY0tleUNyZWF0ZSA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBkID0gbmV3IEJOKHByaXZhdGVLZXkpXG4gIGlmIChkLmNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IGQuaXNaZXJvKCkpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX0NSRUFURV9GQUlMKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShlYy5rZXlGcm9tUHJpdmF0ZShwcml2YXRlS2V5KS5nZXRQdWJsaWMoY29tcHJlc3NlZCwgdHJ1ZSkpXG59XG5cbmV4cG9ydHMucHVibGljS2V5Q29udmVydCA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIGNvbXByZXNzZWQpIHtcbiAgdmFyIHBhaXIgPSBsb2FkUHVibGljS2V5KHB1YmxpY0tleSlcbiAgaWYgKHBhaXIgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX1BBUlNFX0ZBSUwpXG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBhaXIuZ2V0UHVibGljKGNvbXByZXNzZWQsIHRydWUpKVxufVxuXG5leHBvcnRzLnB1YmxpY0tleVZlcmlmeSA9IGZ1bmN0aW9uIChwdWJsaWNLZXkpIHtcbiAgcmV0dXJuIGxvYWRQdWJsaWNLZXkocHVibGljS2V5KSAhPT0gbnVsbFxufVxuXG5leHBvcnRzLnB1YmxpY0tleVR3ZWFrQWRkID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgdHdlYWssIGNvbXByZXNzZWQpIHtcbiAgdmFyIHBhaXIgPSBsb2FkUHVibGljS2V5KHB1YmxpY0tleSlcbiAgaWYgKHBhaXIgPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX1BBUlNFX0ZBSUwpXG5cbiAgdHdlYWsgPSBuZXcgQk4odHdlYWspXG4gIGlmICh0d2Vhay5jbXAoZWNwYXJhbXMubikgPj0gMCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfVFdFQUtfQUREX0ZBSUwpXG5cbiAgdmFyIHBvaW50ID0gZWNwYXJhbXMuZy5tdWwodHdlYWspLmFkZChwYWlyLnB1YilcbiAgaWYgKHBvaW50LmlzSW5maW5pdHkoKSkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfVFdFQUtfQUREX0ZBSUwpXG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBvaW50LmVuY29kZSh0cnVlLCBjb21wcmVzc2VkKSlcbn1cblxuZXhwb3J0cy5wdWJsaWNLZXlUd2Vha011bCA9IGZ1bmN0aW9uIChwdWJsaWNLZXksIHR3ZWFrLCBjb21wcmVzc2VkKSB7XG4gIHZhciBwYWlyID0gbG9hZFB1YmxpY0tleShwdWJsaWNLZXkpXG4gIGlmIChwYWlyID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFVCTElDX0tFWV9QQVJTRV9GQUlMKVxuXG4gIHR3ZWFrID0gbmV3IEJOKHR3ZWFrKVxuICBpZiAodHdlYWsuY21wKGVjcGFyYW1zLm4pID49IDAgfHwgdHdlYWsuaXNaZXJvKCkpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX1RXRUFLX01VTF9GQUlMKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShwYWlyLnB1Yi5tdWwodHdlYWspLmVuY29kZSh0cnVlLCBjb21wcmVzc2VkKSlcbn1cblxuZXhwb3J0cy5wdWJsaWNLZXlDb21iaW5lID0gZnVuY3Rpb24gKHB1YmxpY0tleXMsIGNvbXByZXNzZWQpIHtcbiAgdmFyIHBhaXJzID0gbmV3IEFycmF5KHB1YmxpY0tleXMubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHB1YmxpY0tleXMubGVuZ3RoOyArK2kpIHtcbiAgICBwYWlyc1tpXSA9IGxvYWRQdWJsaWNLZXkocHVibGljS2V5c1tpXSlcbiAgICBpZiAocGFpcnNbaV0gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ19QVUJMSUNfS0VZX1BBUlNFX0ZBSUwpXG4gIH1cblxuICB2YXIgcG9pbnQgPSBwYWlyc1swXS5wdWJcbiAgZm9yICh2YXIgaiA9IDE7IGogPCBwYWlycy5sZW5ndGg7ICsraikgcG9pbnQgPSBwb2ludC5hZGQocGFpcnNbal0ucHViKVxuICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNfUFVCTElDX0tFWV9DT01CSU5FX0ZBSUwpXG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBvaW50LmVuY29kZSh0cnVlLCBjb21wcmVzc2VkKSlcbn1cblxuZXhwb3J0cy5zaWduYXR1cmVOb3JtYWxpemUgPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gIHZhciByID0gbmV3IEJOKHNpZ25hdHVyZS5zbGljZSgwLCAzMikpXG4gIHZhciBzID0gbmV3IEJOKHNpZ25hdHVyZS5zbGljZSgzMiwgNjQpKVxuICBpZiAoci5jbXAoZWNwYXJhbXMubikgPj0gMCB8fCBzLmNtcChlY3BhcmFtcy5uKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNEU0FfU0lHTkFUVVJFX1BBUlNFX0ZBSUwpXG5cbiAgdmFyIHJlc3VsdCA9IEJ1ZmZlci5mcm9tKHNpZ25hdHVyZSlcbiAgaWYgKHMuY21wKGVjLm5oKSA9PT0gMSkgZWNwYXJhbXMubi5zdWIocykudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMikuY29weShyZXN1bHQsIDMyKVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0cy5zaWduYXR1cmVFeHBvcnQgPSBmdW5jdGlvbiAoc2lnbmF0dXJlKSB7XG4gIHZhciByID0gc2lnbmF0dXJlLnNsaWNlKDAsIDMyKVxuICB2YXIgcyA9IHNpZ25hdHVyZS5zbGljZSgzMiwgNjQpXG4gIGlmIChuZXcgQk4ocikuY21wKGVjcGFyYW1zLm4pID49IDAgfHwgbmV3IEJOKHMpLmNtcChlY3BhcmFtcy5uKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNEU0FfU0lHTkFUVVJFX1BBUlNFX0ZBSUwpXG5cbiAgcmV0dXJuIHsgcjogciwgczogcyB9XG59XG5cbmV4cG9ydHMuc2lnbmF0dXJlSW1wb3J0ID0gZnVuY3Rpb24gKHNpZ09iaikge1xuICB2YXIgciA9IG5ldyBCTihzaWdPYmoucilcbiAgaWYgKHIuY21wKGVjcGFyYW1zLm4pID49IDApIHIgPSBuZXcgQk4oMClcblxuICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucylcbiAgaWYgKHMuY21wKGVjcGFyYW1zLm4pID49IDApIHMgPSBuZXcgQk4oMClcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbXG4gICAgci50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKSxcbiAgICBzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpXG4gIF0pXG59XG5cbmV4cG9ydHMuc2lnbiA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwcml2YXRlS2V5LCBub25jZWZuLCBkYXRhKSB7XG4gIGlmICh0eXBlb2Ygbm9uY2VmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBnZXROb25jZSA9IG5vbmNlZm5cbiAgICBub25jZWZuID0gZnVuY3Rpb24gKGNvdW50ZXIpIHtcbiAgICAgIHZhciBub25jZSA9IGdldE5vbmNlKG1lc3NhZ2UsIHByaXZhdGVLZXksIG51bGwsIGRhdGEsIGNvdW50ZXIpXG4gICAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihub25jZSkgfHwgbm9uY2UubGVuZ3RoICE9PSAzMikgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDRFNBX1NJR05fRkFJTClcblxuICAgICAgcmV0dXJuIG5ldyBCTihub25jZSlcbiAgICB9XG4gIH1cblxuICB2YXIgZCA9IG5ldyBCTihwcml2YXRlS2V5KVxuICBpZiAoZC5jbXAoZWNwYXJhbXMubikgPj0gMCB8fCBkLmlzWmVybygpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNEU0FfU0lHTl9GQUlMKVxuXG4gIHZhciByZXN1bHQgPSBlYy5zaWduKG1lc3NhZ2UsIHByaXZhdGVLZXksIHsgY2Fub25pY2FsOiB0cnVlLCBrOiBub25jZWZuLCBwZXJzOiBkYXRhIH0pXG4gIHJldHVybiB7XG4gICAgc2lnbmF0dXJlOiBCdWZmZXIuY29uY2F0KFtcbiAgICAgIHJlc3VsdC5yLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLFxuICAgICAgcmVzdWx0LnMudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMilcbiAgICBdKSxcbiAgICByZWNvdmVyeTogcmVzdWx0LnJlY292ZXJ5UGFyYW1cbiAgfVxufVxuXG5leHBvcnRzLnZlcmlmeSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBzaWduYXR1cmUsIHB1YmxpY0tleSkge1xuICB2YXIgc2lnT2JqID0geyByOiBzaWduYXR1cmUuc2xpY2UoMCwgMzIpLCBzOiBzaWduYXR1cmUuc2xpY2UoMzIsIDY0KSB9XG5cbiAgdmFyIHNpZ3IgPSBuZXcgQk4oc2lnT2JqLnIpXG4gIHZhciBzaWdzID0gbmV3IEJOKHNpZ09iai5zKVxuICBpZiAoc2lnci5jbXAoZWNwYXJhbXMubikgPj0gMCB8fCBzaWdzLmNtcChlY3BhcmFtcy5uKSA+PSAwKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNEU0FfU0lHTkFUVVJFX1BBUlNFX0ZBSUwpXG4gIGlmIChzaWdzLmNtcChlYy5uaCkgPT09IDEgfHwgc2lnci5pc1plcm8oKSB8fCBzaWdzLmlzWmVybygpKSByZXR1cm4gZmFsc2VcblxuICB2YXIgcGFpciA9IGxvYWRQdWJsaWNLZXkocHVibGljS2V5KVxuICBpZiAocGFpciA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfUEFSU0VfRkFJTClcblxuICByZXR1cm4gZWMudmVyaWZ5KG1lc3NhZ2UsIHNpZ09iaiwgeyB4OiBwYWlyLnB1Yi54LCB5OiBwYWlyLnB1Yi55IH0pXG59XG5cbmV4cG9ydHMucmVjb3ZlciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBzaWduYXR1cmUsIHJlY292ZXJ5LCBjb21wcmVzc2VkKSB7XG4gIHZhciBzaWdPYmogPSB7IHI6IHNpZ25hdHVyZS5zbGljZSgwLCAzMiksIHM6IHNpZ25hdHVyZS5zbGljZSgzMiwgNjQpIH1cblxuICB2YXIgc2lnciA9IG5ldyBCTihzaWdPYmoucilcbiAgdmFyIHNpZ3MgPSBuZXcgQk4oc2lnT2JqLnMpXG4gIGlmIChzaWdyLmNtcChlY3BhcmFtcy5uKSA+PSAwIHx8IHNpZ3MuY21wKGVjcGFyYW1zLm4pID49IDApIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5FQ0RTQV9TSUdOQVRVUkVfUEFSU0VfRkFJTClcblxuICB0cnkge1xuICAgIGlmIChzaWdyLmlzWmVybygpIHx8IHNpZ3MuaXNaZXJvKCkpIHRocm93IG5ldyBFcnJvcigpXG5cbiAgICB2YXIgcG9pbnQgPSBlYy5yZWNvdmVyUHViS2V5KG1lc3NhZ2UsIHNpZ09iaiwgcmVjb3ZlcnkpXG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHBvaW50LmVuY29kZSh0cnVlLCBjb21wcmVzc2VkKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDRFNBX1JFQ09WRVJfRkFJTClcbiAgfVxufVxuXG5leHBvcnRzLmVjZGggPSBmdW5jdGlvbiAocHVibGljS2V5LCBwcml2YXRlS2V5KSB7XG4gIHZhciBzaGFyZWQgPSBleHBvcnRzLmVjZGhVbnNhZmUocHVibGljS2V5LCBwcml2YXRlS2V5LCB0cnVlKVxuICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHNoYXJlZCkuZGlnZXN0KClcbn1cblxuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICB2YXIgcGFpciA9IGxvYWRQdWJsaWNLZXkocHVibGljS2V5KVxuICBpZiAocGFpciA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLkVDX1BVQkxJQ19LRVlfUEFSU0VfRkFJTClcblxuICB2YXIgc2NhbGFyID0gbmV3IEJOKHByaXZhdGVLZXkpXG4gIGlmIChzY2FsYXIuY21wKGVjcGFyYW1zLm4pID49IDAgfHwgc2NhbGFyLmlzWmVybygpKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXMuRUNESF9GQUlMKVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShwYWlyLnB1Yi5tdWwoc2NhbGFyKS5lbmNvZGUodHJ1ZSwgY29tcHJlc3NlZCkpXG59XG4iXSwic291cmNlUm9vdCI6IiJ9